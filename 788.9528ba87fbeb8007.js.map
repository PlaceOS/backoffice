{"version":3,"file":"788.9528ba87fbeb8007.js","mappings":"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","names":["i0","PlaceComponent","BaseClass","constructor","_settings","_service","_users","super","this","extensions","extensionsForItem","active_item","dark_mode","updateTabList","tab_list","id","name","icon","class","concat","ngOnInit","title","selectors","PlaceDatabase","reindex","backfill","url","apiEndpoint","post","toPromise","t","factory","PlaceDatabaseDetailsComponent","_engine_service","reindexing","then","err","notifyError","JSON","stringify","response","message","backfilling","ctx","PlaceDetailsComponent","_dialog","user","backoffice_version","VERSION","tag","backoffice_hash","hash","backoffice_build","format","loadApiDetails","loadPlatformDetails","changelog","log","open","ChangelogModalComponent","data","copy","content","copyToClipboard","notifyInfo","get","details","api_details","changelog_data","replace","$localize","AdminClusterNodeComponent","used_memory","humanReadableByteCount","node","memory_usage","total_memory","memory_total","memory_percentage","generateCharts","ngOnChanges","changes","history","list","length","unshift","slice","Math","max","map","event","idx","x","y","value","points","PlaceClusterItemComponent","cluster","cluster_nodes","edge_nodes","cpu_history","PlaceClusterTaskListComponent","EventEmitter","loadProcesses","interval","confirmKillProcess","process","ref","ConfirmModalComponent","CONFIRM_METADATA","type","subscription","componentInstance","subscribe","reason","killing","loading","killProcess","close","terminateProcess","queryProcesses","include_status","process_list","PlaceClusterDetailsComponent","pipe","filter","active_cluster","tap","switchMap","queryClusters","resp","catchError","_","cluster_list","date","Date","now","forEach","nodes","hostname","push","core_cpu","shift","clusters$","AdminInterfacesComponent","loadInterfaces","interfaces","listInterfaceRepositories","Object","keys","AdminBrokersComponent","loadBrokers","newBroker","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","item","PlaceMQTTBroker","save","addBroker","editBroker","updateBroker","deleteBroker","openConfirmModal","o","removeBroker","catch","notifySuccess","brokers","queryBrokers","$event","ExtensionModalComponent","_data","_hotkey","FormGroup","FormControl","Validators","conditions","listen","submit","form","patchValue","addCondition","controls","removeCondition","condition","setValue","c","markAllAsTouched","valid","emit","metadata","MAT_DIALOG_DATA","PlaceExtensionsComponent","domain_list","queryDomains","r","setDomain","domain","config","backoffice","extend","extension_list","sort","a","b","localeCompare","editExtension","parse","undefined","first","i","updateDomain","removeExtension","e","ext","updated","PlaceDomain","BookingLimitsModalComponent","_dialog_ref","tenant","booking_limits","limits","k","amount","disableClose","console","call","FIELD_NAME_MAPPING","issuer","conference_type","signing_key","sub","client_id","client_secret","scopes","user_agent","StaffTenantModalComponent","delegated","platform","credentials","office_form","google_form","fields","handleDelegation","field","disable","setValidators","enable","valueChanges","removeControl","addControl","getInvalidFields","reduce","m","put","PlaceStaffAPIComponent","BehaviorSubject","tenants","getValue","shareReplay","next","editTenant","afterClosed","editLimits","removeTenant","system","del","statusText","EdgeModalComponent","edge","description","new_edge","updateEdge","addEdge","PlaceEdgeComponent","_change","_last_change","queryEdges","of","combineLatest","_edge_list","debounceTime","edges","retrieveEdgeToken","token","removeEdge","AdminSchemasComponent","_state","schemas","copySchema","active_schema","schema_copy","newSchema","schema","saveSchema","dirtyDate","requiredArgs","arguments","toDate","timestamp","getTime","floor","PlaceAPIKeyDetails","user_id","authority_id","permissions","created_at","getUnixTime","updated_at","secret","x_api_key","ctx_r14","APIKeyModalComponent","users","sys_admin","support","ENTER","COMMA","SPACE","setTimeout","_input_el","nativeElement","focus","s","setSearch","addChipItem","removeChipItem","scope_list","APIKeyService","_last_key","asObservable","_domain","limit","query","query_params","fn","d","path","_search","q","queryUsers","newKey","Promise","race","key","create","form_data","removeKey","remove","PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","readOnly","body","appendChild","successful","currentFocus","activeElement","select","setSelectionRange","execCommand","destroy","Clipboard","document","pendingCopy","beginCopy","ɵfac","DOCUMENT","ɵprov","ROUTES","component","canActivate","AuthorisedAdminGuard","children","AdminAPIKeysComponent","_clipboard","active_domain","available_domains","available_keys","last_key","copyKey","take","ExtensionOutletComponent","redirectTo","AppPlaceModule","imports","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule","period","scheduler","async","isNumeric","schedule","Observable","subscriber","add","dispatch","counter","state"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/engine/engine.component.ts","./apps/backoffice/src/app/common/database.service.ts","./apps/backoffice/src/app/engine/database-details.component.ts","./apps/backoffice/src/app/engine/details.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-node.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-item.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-task-list.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-details.component.ts","./apps/backoffice/src/app/engine/interfaces.component.ts","./apps/backoffice/src/app/engine/brokers.component.ts","./apps/backoffice/src/app/engine/extension-modal/extension-modal.component.html","./apps/backoffice/src/app/engine/extension-modal/extension-modal.component.ts","./apps/backoffice/src/app/engine/extensions.component.ts","./apps/backoffice/src/app/engine/booking-limits-modal.component.ts","./apps/backoffice/src/app/engine/staff-tenant-modal.component.ts","./apps/backoffice/src/app/engine/staff-api.component.ts","./apps/backoffice/src/app/engine/edge-modal.component.ts","./apps/backoffice/src/app/engine/edge.component.ts","./apps/backoffice/src/app/engine/schemas.component.ts","./node_modules/date-fns/esm/getTime/index.js","./node_modules/date-fns/esm/getUnixTime/index.js","./apps/backoffice/src/app/engine/api-keys/api-key-details.class.ts","./apps/backoffice/src/app/engine/api-keys/api-key-modal.component.ts","./apps/backoffice/src/app/engine/api-keys/api-keys.service.ts","./node_modules/@angular/cdk/fesm2020/clipboard.mjs","./apps/backoffice/src/app/engine/api-keys/api-keys.component.ts","./apps/backoffice/src/app/engine/engine.routes.ts","./apps/backoffice/src/app/engine/engine.module.ts","./node_modules/rxjs/_esm2015/internal/observable/interval.js"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { ActiveItemService } from '../common/item.service';\nimport { SettingsService } from '../common/settings.service';\nimport { BackofficeUsersService } from '../users/users.service';\n\n@Component({\n    selector: 'app-engine',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col\">\n                <div\n                    class=\"flex flex-1 z-0 h-1/2 dark:text-white dark:bg-neutral-700\"\n                >\n                    <div\n                        class=\"relative sm:w-56 px-2 my-4 border-r border-gray-400 border-opacity-30 z-10 pt-10 sm:pt-0\"\n                    >\n                        <a\n                            *ngFor=\"let item of tab_list\"\n                            class=\"flex items-center space-x-2 m-2 rounded h-8 px-3 hover:bg-primary hover:bg-opacity-25\"\n                            [routerLink]=\"['/admin', item.id]\"\n                            routerLinkActive=\"active\"\n                        >\n                            <app-icon [icon]=\"item.icon\"></app-icon>\n                            <span class=\"hidden sm:block\">{{ item.name }}</span>\n                        </a>\n                    </div>\n                    <div\n                        class=\"relative flex-1 w-1/2 h-full z-0 px-4 dark:text-white overflow-auto\"\n                    >\n                        <router-outlet></router-outlet>\n                    </div>\n                    \n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2 absolute top-2 left-4 z-40\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n\n            .active {\n                background-color: var(--primary) !important;\n                color: #fff;\n                margin-right: -1px;\n            }\n        `,\n    ],\n})\nexport class PlaceComponent extends BaseClass {\n    public tab_list = [];\n    public open_menu = false;\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, 'admin');\n    }\n\n    public get dark_mode() {\n        return this._users.dark_mode;\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info' } },\n            {\n                id: 'database',\n                name: 'Database',\n                icon: { class: 'backoffice-database' },\n            },\n            {\n                id: 'clusters',\n                name: 'Clusters',\n                icon: { class: 'backoffice-server' },\n            },\n            { id: 'edge', name: 'Edges', icon: { class: 'backoffice-server' } },\n            {\n                id: 'interfaces',\n                name: 'Interfaces',\n                icon: { class: 'backoffice-browser' },\n            },\n            {\n                id: 'brokers',\n                name: 'MQTT Brokers',\n                icon: { class: 'backoffice-server' },\n            },\n            {\n                id: 'staff-api',\n                name: 'Staff API',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'extensions',\n                name: 'Extensions',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'api-keys',\n                name: 'API Keys',\n                icon: { class: 'backoffice-key' },\n            },\n            {\n                id: 'schemas',\n                name: 'Custom Schemas',\n                icon: { class: 'backoffice-list' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _service: ActiveItemService,\n        private _users: BackofficeUsersService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.title = 'Admin';\n        this.updateTabList();\n    }\n}\n","import { post, apiEndpoint } from '@placeos/ts-client';\nimport { Injectable } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlaceDatabase extends BaseClass {\n    public reindex(backfill: boolean = true) {\n        const url = `${apiEndpoint()}/reindex${\n            backfill ? '?backfill=true' : ''\n        }`;\n        return post(url, null).toPromise();\n    }\n\n    public backfill() {\n        const url = `${apiEndpoint()}/backfill`;\n        return post(url, null).toPromise();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { PlaceDatabase } from 'apps/backoffice/src/app/common/database.service';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'app-database-details',\n    template: `\n        <mat-card>\n            <mat-card-content>\n                Re-index elasticsearch for the\n                <br />current state of the database\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button [disabled]=\"reindexing\" (click)=\"reindex()\">\n                    <ng-container *ngIf=\"!reindexing; else spinner\"\n                        >Re-index</ng-container\n                    >\n                </button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card>\n            <mat-card-content>\n                Backfill elasticsearch with the<br />\n                current state of the database\n            </mat-card-content>\n            <mat-card-actions>\n                <button\n                    mat-button\n                    [disabled]=\"backfilling\"\n                    (click)=\"backfill()\"\n                >\n                    <ng-container *ngIf=\"!backfilling; else spinner\"\n                        >Backfill</ng-container\n                    >\n                </button>\n            </mat-card-actions>\n        </mat-card>\n        <ng-template #spinner>\n            <div class=\"flex justify-center w-full my-1\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding-top: 1em;\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            button {\n                min-width: 10em;\n                margin: 0.25em;\n            }\n\n            mat-card {\n                margin: 0.5em;\n                text-align: center;\n            }\n        `,\n    ],\n})\nexport class PlaceDatabaseDetailsComponent {\n    /** Whether backend is reindexing the database */\n    public reindexing: boolean;\n    /** Whether backend is reindexing the database */\n    public backfilling: boolean;\n\n    constructor(private _engine_service: PlaceDatabase) {}\n\n    public reindex() {\n        this.reindexing = true;\n        this._engine_service.reindex().then(\n            () => (this.reindexing = false),\n            (err) => {\n                this.reindexing = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    public backfill() {\n        this.backfilling = true;\n        this._engine_service.backfill().then(\n            () => (this.backfilling = false),\n            (err) => {\n                this.backfilling = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { get, apiEndpoint } from '@placeos/ts-client';\n\nimport { VERSION } from '../../environments/version';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ChangelogModalComponent,\n    ChangelogModalData,\n} from 'apps/backoffice/src/app/overlays/changelog-modal/changelog-modal.component';\nimport { BackofficeUsersService } from 'apps/backoffice/src/app/users/users.service';\nimport {\n    notifyError,\n    notifyInfo,\n} from 'apps/backoffice/src/app/common/notifications';\n\nimport { copyToClipboard } from '../common/general';\nimport { format } from 'date-fns';\n\nexport interface PlaceServiceDetails {\n    /** Name of the service */\n    service: string;\n    /** Commit hash of the service */\n    commit: string;\n    /** Current version number of the service */\n    version: string;\n    /** Build time of the active version of the service */\n    build_time: string;\n    /** Version of the backend service platform */\n    platform_version: string;\n}\n\n@Component({\n    selector: 'app-engine-details',\n    template: `\n        <h3 class=\"text-lg font-medium\" i18n=\"@@backoffice\">Backoffice</h3>\n        <section class=\"space-y-2 mb-4 flex flex-col px-2\">\n            <div class=\"flex items-center\">\n                <label for=\"version\" class=\"w-24\" i18n=\"@@version\"\n                    >Version:</label\n                >\n                <code\n                    name=\"version\"\n                    (click)=\"copy('version', backoffice_version)\"\n                >\n                    {{ backoffice_version }}\n                </code>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"hash\" class=\"w-24\" i18n=\"@@commitHash\"\n                    >Commit Hash:</label\n                >\n                <code name=\"hash\" (click)=\"copy('hash', backoffice_hash)\">\n                    {{ backoffice_hash }}\n                </code>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"build-time\" class=\"w-24\" i18n=\"@@buildTime\"\n                    >Build:</label\n                >\n                <div\n                    name=\"build-time\"\n                    class=\"text-sm\"\n                    (click)=\"copy('build time', backoffice_build)\"\n                >\n                    {{ backoffice_build }}\n                </div>\n            </div>\n        </section>\n        <h3 class=\"text-lg font-medium flex items-center\" i18n=\"@@apiHeader\">\n            API\n            <button\n                *ngIf=\"changelog_data\"\n                class=\"p-2 text-xs underline\"\n                (click)=\"changelog(changelog_data)\"\n            >\n                View Changelog\n            </button>\n        </h3>\n        <section class=\"flex flex-wrap py-2\">\n            <div\n                class=\"bg-white dark:bg-[#424242] rounded shadow m-2 min-w-[40%] flex-1 overflow-hidden\"\n                *ngFor=\"let api of api_details\"\n            >\n                <h3\n                    class=\"w-full px-4 py-2 mb-1 border-b border-gray-200 dark:border-white/20\"\n                >\n                    {{ api.service }}\n                </h3>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\">\n                    <label class=\"w-24\">Commit Hash</label>\n                    <code>\n                        {{ api.commit | slice: 0:8 }}\n                    </code>\n                </div>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\">\n                    <label class=\"w-24\">Version</label>\n                    <code>\n                        {{ api.version }}\n                    </code>\n                </div>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\">\n                    <label class=\"w-24\">Build time</label>\n                    <div class=\"text-sm\">\n                        {{ api.build_time | date: 'MMM d, y, h:mm a' }}\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center px-4 py-1 hover:bg-gray-400/20 mb-1\"\n                >\n                    <label class=\"w-24\">Platform</label>\n                    <code>\n                        {{ api.platform_version }}\n                    </code>\n                </div>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class PlaceDetailsComponent extends BaseClass implements OnInit {\n    /** Current details about the API */\n    public api_details: PlaceServiceDetails[];\n    public changelog_data: string = '';\n\n    public get user() {\n        return this._users.user;\n    }\n\n    public get backoffice_version() {\n        return VERSION?.tag || '';\n    }\n\n    public get backoffice_hash() {\n        return VERSION?.hash || '';\n    }\n\n    public get backoffice_build() {\n        return `${format(VERSION.time, 'dd MMM yyyy')} at ${format(\n            VERSION.time,\n            ' h:mma'\n        )}`;\n    }\n\n    constructor(\n        private _users: BackofficeUsersService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadApiDetails();\n        this.loadPlatformDetails();\n    }\n\n    public changelog(log: string) {\n        this._dialog.open<ChangelogModalComponent, ChangelogModalData>(\n            ChangelogModalComponent,\n            {\n                data: { changelog: log },\n            }\n        );\n    }\n\n    public copy(name: string, content: string) {\n        copyToClipboard(content);\n        notifyInfo(`Copied ${name} to clipboard`);\n    }\n\n    public loadApiDetails(): void {\n        get(`${apiEndpoint()}/cluster/versions`)\n            .toPromise()\n            .then(\n                (details) => (this.api_details = details as any),\n                (err) =>\n                    notifyError(\n                        `Error loading API details. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n\n    public loadPlatformDetails(): void {\n        get(`${apiEndpoint()}/platform`)\n            .toPromise()\n            .then(\n                (details) =>\n                    (this.changelog_data = details.changelog.replace(\n                        '# Changelog\\n\\n',\n                        ''\n                    )),\n                (err) =>\n                    notifyError(\n                        `Error loading API details. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { humanReadableByteCount } from '@placeos/ts-client';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { Point } from '../../common/types';\n\ninterface PlaceClusterRunCounts {\n    modules: number;\n    drivers: number;\n}\n\nexport interface PlaceClusterNode {\n    hostname: string;\n    cpu_count: number;\n    core_cpu: number;\n    total_cpu: number;\n    memory_total: number;\n    memory_usage: number;\n    core_memory: number;\n    run_count?: PlaceClusterRunCounts;\n}\n\nexport interface PlaceClusterUsageStamp {\n    id: number;\n    value: number;\n}\n\n@Component({\n    selector: 'admin-cluster-node',\n    template: `\n        <h4>{{ node?.hostname }}</h4>\n        <div class=\"mb-2 h-40 w-64\">\n            <div basic-line-graph [points]=\"points\"></div>\n        </div>\n        <div class=\"memory-utilisation\">\n            <div class=\"flex items-center space-x-2 p-2\">\n                <label i18n=\"@@cluserMemoryUsed\">Memory Used</label>\n                <div class=\"value\">\n                    {{ used_memory }} / {{ total_memory }} ({{\n                        memory_percentage.toFixed(2)\n                    }}%)\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 bg-black bg-opacity-5 rounded p-2\"\n            >\n                <label i18n=\"@@clusterCpuUsage\">CPU Usage</label>\n                <div class=\"value\">{{ node?.total_cpu }}%</div>\n            </div>\n        </div>\n    `,\n    styles: [],\n})\nexport class AdminClusterNodeComponent implements OnChanges, OnInit {\n    /** Node to display on the view */\n    @Input() public node: PlaceClusterNode;\n    /** Historical data for node */\n    @Input() public history: PlaceClusterUsageStamp[];\n    /** Store for the chart data object */\n    // private _chart: Chart;\n    /**  */\n    public points: Point[] = [];\n\n    public get used_memory() {\n        return humanReadableByteCount((this.node?.memory_usage || 0) * 1024);\n    }\n\n    public get total_memory() {\n        return humanReadableByteCount((this.node?.memory_total || 0) * 1024);\n    }\n\n    public get memory_percentage() {\n        return (\n            ((this.node?.memory_usage || 0) / (this.node?.memory_total || 1)) *\n            100\n        );\n    }\n\n    @ViewChild('chart', { static: true })\n    public _chart_el: ElementRef<HTMLCanvasElement>;\n\n    public ngOnInit() {\n        this.generateCharts();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.history && this.history) {\n            this.generateCharts();\n        }\n    }\n\n    public generateCharts(): void {\n        const list = [...this.history] || [];\n        while (list.length < 12) {\n            list.unshift({} as any);\n        }\n        const data = list\n            .slice(Math.max(0, list.length - 12))\n            .map((event, idx) => ({\n                x: idx,\n                y: event.value || 0,\n            }));\n        this.points = [...data];\n    }\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { PlaceCluster } from '@placeos/ts-client';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    PlaceClusterNode,\n    PlaceClusterUsageStamp,\n} from './cluster-node.component';\n\n@Component({\n    selector: 'engine-cluster-item',\n    template: `\n        <ng-container *ngFor=\"let node of cluster_nodes\">\n            <admin-cluster-node\n                [node]=\"node\"\n                [history]=\"cpu_history[node.hostname] || []\"\n            ></admin-cluster-node>\n        </ng-container>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterItemComponent implements OnChanges {\n    /** Cluster to display details for */\n    @Input() public cluster: PlaceCluster;\n    /** List of historical data for cluster's CPU usage */\n    @Input() public cpu_history: HashMap<PlaceClusterUsageStamp[]> = {};\n    /** List of nodes contained by the cluster */\n    public cluster_nodes: PlaceClusterNode[];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.cluster && this.cluster) {\n            this.cluster_nodes = [this.cluster, ...this.cluster.edge_nodes];\n            this.cpu_history = this.cpu_history || {};\n        }\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceCluster,\n    PlaceProcess,\n    terminateProcess,\n    queryProcesses,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'engine-cluster-task-list',\n    template: `\n        <div class=\"flex items-center mb-4\">\n            <button mat-icon-button (click)=\"close.emit()\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'backoffice-arrow-left' }\"\n                ></app-icon>\n            </button>\n            <h3 class=\"text-lg font-medium\" i18n=\"@@clusterHeader\">\n                Cluster - {{ cluster?.hostname }}\n            </h3>\n        </div>\n        <div role=\"table\" class=\"h-1/2 flex-1\">\n            <div table-head>\n                <div class=\"flex-1 p-2\">Name</div>\n                <div class=\"w-24 p-2\">CPU %</div>\n                <div class=\"w-24 p-2\">Memory</div>\n                <div class=\"w-24 p-2\">Instances</div>\n                <div class=\"w-12 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let element of process_list\">\n                    <div\n                        class=\"flex-1 p-2\"\n                        [innerHTML]=\"element.id | driverFormat\"\n                    ></div>\n                    <div class=\"w-24 p-2\">\n                        {{ element.cpu_usage.toFixed(2) }}%\n                    </div>\n                    <div class=\"w-24 p-2\">{{ element.used_memory }}</div>\n                    <div class=\"w-24 p-2\">{{ element.module_instances }}</div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            (click)=\"confirmKillProcess(element)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div\n            class=\"flex flex-col items-center p-8\"\n            *ngIf=\"!process_list || !process_list.length\"\n        >\n            <p i18n=\"@@processTableEmpty\">No tasks running on cluster</p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterTaskListComponent extends BaseClass implements OnInit {\n    /** Cluster to display tasks details for */\n    @Input() public cluster: PlaceCluster;\n    /** Emitter for close events */\n    @Output() public close = new EventEmitter<void>();\n    /** List of processes running in the cluster */\n    public process_list: PlaceProcess[] = [];\n    /** Whether the task list is updating */\n    public loading: boolean;\n    /** ID of the process being killed */\n    public killing: string;\n\n    public column_list: string[] = [\n        'id',\n        'cpu_usage',\n        'memory_usage',\n        'module_instances',\n        'running',\n    ];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadProcesses();\n        this.interval('load_tasks', () => this.loadProcesses(), 2000);\n    }\n\n    public confirmKillProcess(process: PlaceProcess): void {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want kill the process for \"${process.id}\"?</p>\n                    <p>The process will be terminated <strong>immediately</strong>.\n                    The process may be restarted after a short while.</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm_kill',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.killing = process.id;\n                    ref.componentInstance.loading = 'Processing request...';\n                    this.killProcess(process).then(\n                        () => {\n                            this.killing = null;\n                            ref.close();\n                        },\n                        (err) => {\n                            ref.componentInstance.loading = null;\n                            this.killing = null;\n                            notifyError(\n                                `Error killing process. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            );\n                            ref.close();\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public killProcess(process: PlaceProcess) {\n        return terminateProcess(this.cluster.id, process.id).toPromise();\n    }\n\n    private loadProcesses(): void {\n        this.loading = true;\n        queryProcesses(this.cluster.id, {\n            include_status: true,\n        } as any).subscribe((list) => {\n            this.process_list = list || [];\n            this.loading = false;\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { map, catchError, switchMap, tap, filter } from 'rxjs/operators';\n\nimport { PlaceCluster, queryClusters } from '@placeos/ts-client';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport { PlaceClusterUsageStamp } from './cluster-node.component';\nimport { interval } from 'rxjs';\n\n@Component({\n    selector: 'engine-cluster-details',\n    template: `\n        <ng-container\n            *ngIf=\"cluster_list && cluster_list.length; else empty_state\"\n        >\n            <ng-container *ngIf=\"!active_cluster; else process_state\">\n                <ng-container *ngFor=\"let cluster of cluster_list\">\n                    <mat-card class=\"m-2 text-center\">\n                        <mat-card-header>\n                            <mat-card-title clas=\"capitalize\"\n                                >{{ cluster.hostname || 'Undefined Cluster' }}\n                            </mat-card-title>\n                        </mat-card-header>\n                        <mat-card-content>\n                            <engine-cluster-item\n                                [cluster]=\"cluster\"\n                                [cpu_history]=\"cpu_history[cluster.id] || []\"\n                            ></engine-cluster-item>\n                        </mat-card-content>\n                        <mat-card-actions>\n                            <button\n                                mat-button\n                                (click)=\"active_cluster = cluster\"\n                                i18n=\"@@viewClusterProcesses\"\n                            >\n                                View Processes\n                            </button>\n                        </mat-card-actions>\n                    </mat-card>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center p-8 space-y-2\"\n            >\n                <app-icon\n                    class=\"text-3xl\"\n                    [icon]=\"{ class: 'backoffice-cross' }\"\n                ></app-icon>\n                <div class=\"text\" i18n=\"@@clusterListEmpty\">\n                    No Cluster details to show\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #process_state>\n            <engine-cluster-task-list\n                [cluster]=\"active_cluster\"\n                (close)=\"active_cluster = null\"\n            ></engine-cluster-task-list>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterDetailsComponent extends BaseClass implements OnInit {\n    /** List of available clusters on this instance of engine */\n    public cluster_list: PlaceCluster[] = [];\n    /** Map of clusters to CPU usage history */\n    public cpu_history: HashMap<HashMap<PlaceClusterUsageStamp[]>> = {};\n    /** Active cluster to show details for */\n    public active_cluster: PlaceCluster;\n    /** Whether cluster details are being loaded */\n    public loading: boolean;\n\n    public readonly clusters$ = interval(2000).pipe(\n        filter(() => !this.active_cluster),\n        tap(() => (this.loading = true)),\n        switchMap(() => queryClusters({ include_status: true } as any)),\n        map((resp) => resp.data),\n        catchError((_) => []),\n        map((list) => {\n            this.cluster_list = list || [];\n            const date = Date.now();\n            this.cluster_list.forEach((cluster) => {\n                if (!this.cpu_history[cluster.id]) {\n                    this.cpu_history[cluster.id] = {};\n                }\n                const nodes = [cluster, ...cluster.edge_nodes] as any;\n                for (const node of nodes) {\n                    if (!this.cpu_history[cluster.id][node.hostname]) {\n                        this.cpu_history[cluster.id][node.hostname] = [];\n                    }\n                    this.cpu_history[cluster.id][node.hostname].push({\n                        id: date,\n                        value: node.core_cpu,\n                    });\n                    if (\n                        this.cpu_history[cluster.id][node.hostname].length > 120\n                    ) {\n                        this.cpu_history[cluster.id][node.hostname].shift();\n                    }\n                }\n            });\n        }),\n        tap(() => (this.loading = false))\n    );\n\n    public ngOnInit(): void {\n        this.subscription('load_cluster', this.clusters$.subscribe());\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { listInterfaceRepositories } from '@placeos/ts-client';\n\nimport { Identity } from 'apps/backoffice/src/app/common/types';\n\n@Component({\n    selector: 'app-interfaces',\n    template: `\n        <div\n            role=\"table\" \n            class=\"pt-4\"\n            *ngIf=\"interfaces && interfaces.length; else load_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Repository</div>\n                <div class=\"w-[20rem] p-2\">Commit Hash</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of interfaces\">\n                    <div class=\"flex-1 p-2\">{{ item.id }}</div>\n                    <div class=\"w-[20rem] p-2\">\n                        <code>\n                            {{ item.name || \"~No Commit Hash~\" }}\n                        </code>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <app-icon class=\"mb-4\" className=\"backoffice-cross\"></app-icon>\n                <p>No interfaces</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AdminInterfacesComponent implements OnInit {\n    /** List of interfaces */\n    public interfaces: Identity[] = [];\n\n    ngOnInit() {\n        this.loadInterfaces();\n    }\n\n    private async loadInterfaces() {\n        const interfaces = await listInterfaceRepositories().toPromise();\n        this.interfaces = Object.keys(interfaces).map((id) => ({\n            id,\n            name: interfaces[id],\n        }));\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {\n    PlaceMQTTBroker,\n    updateBroker,\n    addBroker,\n    queryBrokers,\n    removeBroker,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ItemCreateUpdateModalComponent } from 'apps/backoffice/src/app/overlays/item-modal/item-modal.component';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { openConfirmModal } from 'apps/backoffice/src/app/common/general';\n\n@Component({\n    selector: 'app-brokers',\n    template: `\n        <button mat-button class=\"my-4\" (click)=\"newBroker()\">\n            <div class=\"flex items-center\">\n                <app-icon className=\"backoffice-plus\"></app-icon>\n                <div class=\"text\">Add Broker</div>\n            </div>\n        </button>\n        <div class=\"overflow-auto\">\n            <div\n                role=\"table\"\n                *ngIf=\"brokers && brokers.length; else load_state\"\n                class=\"min-w-[52rem]\"\n            >\n                <div table-head>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"w-24 p-2\">Auth Type</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-32 p-2 truncate\">Host</div>\n                    <div class=\"w-16 p-2\">Port</div>\n                    <div class=\"w-16 p-2\">TLS</div>\n                    <div class=\"w-32 p-2\">Filters</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of brokers\">\n                        <div class=\"w-32 p-2\">{{ item.name }}</div>\n                        <div class=\"w-24 p-2\">\n                            { item.auth_type, select, 0 { Certificate }, 2 {\n                            User Password }, other { No Auth }}\n                        </div>\n                        <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.host }}</div>\n                        <div class=\"w-16 p-2\">{{ item.port }}</div>\n                        <div class=\"w-16 p-2\">\n                            { item.tls, select, true { Yes }, false { No } }\n                        </div>\n                        <div class=\"w-32 p-2\">{{ item.filters | json }}</div>\n                        <div class=\"w-24 p-2 flex items-center\">\n                            <button mat-icon-button (click)=\"editBroker(item)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"deleteBroker(item)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No Brokers</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n            }\n        `,\n    ],\n})\nexport class AdminBrokersComponent extends BaseClass implements OnInit {\n    public brokers: PlaceMQTTBroker[] = [];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loadBrokers();\n    }\n\n    public newBroker(): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new PlaceMQTTBroker(),\n                name: 'Broker',\n                save: (item) => addBroker(item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public editBroker(item: PlaceMQTTBroker): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Broker',\n                save: (item) => updateBroker(item.id, item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public async deleteBroker(item: PlaceMQTTBroker): Promise<void> {\n        if (item) {\n            const details = await openConfirmModal(\n                {\n                    title: `Delete MQTT Broker`,\n                    content: `<p>Are you sure you want delete this boker?</p><p>The broker will be deleted <strong>immediately.</strong></p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n                this._dialog\n            );\n            if (!details) return;\n            details.loading('Deleting broker...');\n            const err = await removeBroker(item.id)\n                .toPromise()\n                .catch((_) => _);\n            details.close();\n            if (err)\n                return notifyError(\n                    `Error deleting broker. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            notifySuccess(`Successfully deleted broker \"${item.name}\".`);\n            this.loadBrokers();\n        }\n    }\n\n    private async loadBrokers() {\n        const brokers = await queryBrokers()\n            .pipe(map((resp) => resp.data))\n            .toPromise();\n        this.brokers = brokers;\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ item ? 'Edit' : 'New' }} Extension</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"form && !loading; else load_state\" [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\">\n                <label for=\"type\" i18n=\"@@typeLabel\">Type<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select formControlName=\"type\">\n                        <mat-option *ngFor=\"let type of available_types\" [value]=\"type\">\n                            <span class=\"capitalize\">{{ type }}</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"name\" i18n=\"@@nameLabel\">Name<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Extension Display Name\"\n                        i18n-placeholder=\"@@extensionNamePlaceholder\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error i18n=\"@@nameError\">A valid name is required</mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\">\n            <label for=\"url\" i18n=\"@@urlLabel\">URL<span>*</span>: </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"url\"\n                    placeholder=\"Extension URL\"\n                    i18n-placeholder=\"@@extensionUrlPlaceholder\"\n                    formControlName=\"url\"\n                />\n                <mat-error i18n=\"@@urlError\">A valid URL is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"w-full\">\n            <label *ngIf=\"form.controls.conditions.value?.length\">Conditions</label>\n            <div class=\"fieldset\" *ngFor=\"let condition of form.controls.conditions.value\">\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"url\"\n                            [(ngModel)]=\"condition[0]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Field\"\n                            i18n-placeholder=\"@@conditionPlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [(ngModel)]=\"condition[1]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Operation\"\n                        >\n                            <mat-option *ngFor=\"let type of condition_ops\" [value]=\"type\">\n                                <span class=\"capitalize\">{{ type }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"value\"\n                            [disabled]=\"condition[1] === 'truthy' || condition[1] === 'falsy'\"\n                            [(ngModel)]=\"condition[2]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Value\"\n                            i18n-placeholder=\"@@conditionValuePlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button mat-icon-button (click)=\"removeCondition(condition)\">\n                    <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                </button>\n            </div>\n            <button mat-button class=\"w-full\" (click)=\"addCondition()\">Add Condition</button>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (click)=\"submit()\">{{ item ? 'Save' : 'Add' }} [S]</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HotkeysService } from 'apps/backoffice/src/app/common/hotkeys.service';\nimport { DialogEvent } from 'apps/backoffice/src/app/common/types';\n\nimport { BackofficeExtension } from '../extensions.component';\n\n@Component({\n    selector: 'extension-modal',\n    templateUrl: './extension-modal.component.html',\n    styleUrls: ['./extension-modal.component.scss'],\n})\nexport class ExtensionModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly available_types = [\n        'admin',\n        'systems',\n        'modules',\n        'zones',\n        'drivers',\n        'repositories',\n        'triggers',\n        'users',\n        'domains',\n    ];\n    public readonly condition_ops = ['includes', 'equals', 'truthy', 'falsy'];\n    public readonly item = this._data.item;\n    public loading = false;\n    public form = new FormGroup({\n        type: new FormControl('systems', [Validators.required]),\n        name: new FormControl('', [Validators.required]),\n        url: new FormControl('', [Validators.required]),\n        conditions: new FormControl([]),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { item: BackofficeExtension },\n        private _hotkey: HotkeysService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'save',\n            this._hotkey.listen(['KeyS'], () => this.submit())\n        );\n        this.form.patchValue(this.item);\n    }\n\n    public addCondition() {\n        const conditions = this.form.controls.conditions.value;\n        conditions.push(['', '', '']);\n    }\n\n    public removeCondition(condition: [string, string, any]) {\n        this.form.controls.conditions.setValue(\n            this.form.controls.conditions.value.filter((c) => c !== condition)\n        );\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        const value = this.form.value;\n        value.conditions = value.conditions.filter((c) => c[0] && c[1]);\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceDomain, queryDomains, updateDomain } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { ApplicationIcon } from 'apps/backoffice/src/app/common/types';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\n\nexport interface BackofficeExtension {\n    /** Section of backoffice to extend */\n    type:\n        | 'admin'\n        | 'systems'\n        | 'modules'\n        | 'zones'\n        | 'drivers'\n        | 'repositories'\n        | 'triggers'\n        | 'users'\n        | 'domains';\n    /** Display name of the extension */\n    name: string;\n    /** URL to the application to embed */\n    url: string;\n    /** Conditions for showing the extension */\n    conditions: [string, string, any][];\n    /** Icon to display next to the name */\n    icon: ApplicationIcon;\n}\n\n@Component({\n    selector: '[app-extensions]',\n    template: `\n        <h2 class=\"text-lg font-medium mb-4 mt-4\">Backoffice extensions</h2>\n        <div *ngIf=\"!loading; else load_state\">\n            <div class=\"flex items-center space-x-2 mb-4\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"domain\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <button mat-button (click)=\"editExtension()\">\n                    Add Extension\n                </button>\n            </div>\n            <div class=\"bg-info my-4 p-4 flex items-center rounded shadow space-x-4 text-sm text-white\">\n                <p><strong>Note:</strong> Backoffice requires a full page refresh for extension changes and additions to apply</p>\n            </div>\n            <div role=\"table\">\n                <div table-head>\n                    <div class=\"w-24 p-2\">Type</div>\n                    <div class=\"w-40 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">URL</div>\n                    <div class=\"w-28 p-2\">Conditions</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let extension of extension_list\">\n                        <div class=\"w-24 p-2 capitalize\">\n                            {{ extension.type }}\n                        </div>\n                        <div class=\"w-40 p-2\">{{ extension.name }}</div>\n                        <div class=\"flex-1 p-2\">{{ extension.url }}</div>\n                        <div class=\"w-28 p-2\">\n                            {{ extension.conditions.length }}\n                        </div>\n                        <div class=\"w-24 flex items-center justify-center\">\n                            <button\n                                mat-icon-button\n                                (click)=\"editExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"removeExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                </div>\n                <div class=\"text\">{{ loading }}</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceExtensionsComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public domain: PlaceDomain;\n    /** List of extension available on the current domain */\n    public extension_list: BackofficeExtension[] = [];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.setDomain(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public setDomain(domain: PlaceDomain) {\n        this.domain = domain;\n        const config = this.domain.config?.backoffice?.extend || {};\n        const extensions: BackofficeExtension[] = [];\n        for (const type in config) {\n            if (!config[type]) {\n                continue;\n            }\n            for (const name in config[type]) {\n                if (!config[type][name]) {\n                    continue;\n                }\n                extensions.push({\n                    ...config[type][name],\n                    name,\n                    type,\n                });\n            }\n        }\n        this.extension_list = extensions;\n        this.extension_list.sort(\n            (a, b) =>\n                a.type.localeCompare(b.type) || a.name.localeCompare(b.name)\n        );\n    }\n\n    public editExtension(item?: BackofficeExtension) {\n        const ref = this._dialog.open(ExtensionModalComponent, {\n            data: { item: item ? JSON.parse(JSON.stringify(item)) : undefined },\n        });\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (event) => {\n                ref.componentInstance.loading = true;\n                if (item) {\n                    this.extension_list = this.extension_list.filter(\n                        (i) => i !== item\n                    );\n                }\n                this.extension_list.push(event.metadata);\n                await this.updateDomain();\n                ref.componentInstance.loading = false;\n                ref.close();\n            });\n    }\n\n    public async removeExtension(item: BackofficeExtension) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                data: {\n                    title: 'Remove extension',\n                    content: `Are you sure you want to remove the extension \"${item.name}\" from ${item.type}?`,\n                    icon: { class: 'backoffice-trash' },\n                },\n            }\n        );\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (_) => {\n                ref.componentInstance.loading = 'Removing extension...';\n                this.extension_list = this.extension_list.filter(\n                    (i) => i !== item\n                );\n                await this.updateDomain().catch((e) =>\n                    notifyError(`Error removing extension: ${e}`)\n                );\n                ref.componentInstance.loading = '';\n                ref.close();\n            });\n    }\n\n    public async updateDomain() {\n        const extensions = {};\n        for (const ext of this.extension_list) {\n            if (!extensions[ext.type]) {\n                extensions[ext.type] = {};\n            }\n            const data = { ...ext };\n            delete data.type;\n            delete data.name;\n            extensions[ext.type][ext.name] = data;\n        }\n        const updated = new PlaceDomain({\n            ...this.domain,\n            config: {\n                ...this.domain.config,\n                backoffice: {\n                    ...(this.domain.config.backoffice || {}),\n                    extend: extensions,\n                },\n            },\n        });\n        const domain = await updateDomain(this.domain.id, updated).toPromise();\n        this.setDomain(domain);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { post } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { StaffTenantModalData } from './staff-tenant-modal.component';\n\n@Component({\n    selector: 'booking-limits-modal',\n    template: ` <header>\n            <h3>Edit Tenant Booking Limits</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto w-[512px] max-w-[100vw]\"\n        >\n            <div class=\"flex flex-col\">\n                <object-list-field\n                    formControlName=\"booking_limits\"\n                    [fields]=\"['type', 'amount']\"\n                ></object-list-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-gray-200 flex justify-center\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving booking limits for Staff API tenant...</p>\n            </main>\n        </ng-template>`,\n    styles: [``],\n})\nexport class BookingLimitsModalComponent {\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public form = new FormGroup({\n        booking_limits: new FormControl<{ type: string, amount: string }[]>([]),\n    });\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<BookingLimitsModalComponent>\n    ) {\n        const limits = this.tenant?.booking_limits || {};\n        this.form.patchValue({\n            booking_limits: Object.keys(limits).map((k) => ({\n                type: k,\n                amount: `${limits[k]}`,\n            })),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const limits: { type: string; amount: string }[] =\n            this.form.value.booking_limits || [];\n        const booking_limits = {};\n        for (const { type, amount } of limits) {\n            booking_limits[type] = +amount || 0;\n        }\n        console.log('Limits:', limits, booking_limits);\n        const call = post(\n            `/api/staff/v1/tenants/${this.tenant.id}/limits`,\n            booking_limits\n        );\n        const resp = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!resp) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close({ ...this.tenant, booking_limits: resp });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, FormRecord, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { PlaceDomain, post, put } from '@placeos/ts-client';\nimport { getInvalidFields } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent, HashMap } from '../common/types';\nimport { PlaceTenant } from './staff-api.component';\n\nconst FIELD_NAME_MAPPING: HashMap<string> = {\n    issuer: 'Service Account Email',\n    conference_type: 'Conference Type',\n    signing_key: 'Private Key',\n    sub: 'Service User',\n    client_id: 'Client ID',\n    client_secret: 'Client Secret',\n    domain: 'Domain',\n    scopes: 'Scopes',\n    user_agent: 'User Agent',\n};\n\nexport interface StaffTenantModalData {\n    tenant?: PlaceTenant;\n    domain?: PlaceDomain;\n}\n\n@Component({\n    selector: 'staff-tenant-modal',\n    template: `\n        <header>\n            <h3>{{ tenant ? 'Edit' : 'New' }} Tenant</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto\"\n        >\n            <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label>Name<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"Tenant Name\"\n                        />\n                        <mat-error>A tenant name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label>Platform<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"platform\">\n                            <mat-option value=\"google\">Google</mat-option>\n                            <mat-option value=\"office365\">Office365</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div\n                class=\"flex items-center mb-4\"\n                *ngIf=\"form.value.platform !== 'google'\"\n            >\n                <mat-checkbox formControlName=\"delegated\"\n                    >Delegated</mat-checkbox\n                >\n            </div>\n            <form *ngIf=\"credentials\" [formGroup]=\"credentials\">\n                <div\n                    class=\"flex flex-col\"\n                    *ngFor=\"let item of credentials.controls | keyvalue\"\n                    [class.hidden]=\"item.value?.disabled\"\n                >\n                    <label class=\"capitalize\"\n                        >{{ name_map[item.key] || item.key\n                        }}<span *ngIf=\"item.key !== 'conference_type'\">*</span\n                        >:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <ng-container [ngSwitch]=\"item.key\">\n                            <input\n                                matInput\n                                *ngSwitchDefault\n                                [formControlName]=\"item.key\"\n                                [placeholder]=\"name_map[item.key] || item.key\"\n                            />\n                            <textarea\n                                matInput\n                                *ngSwitchCase=\"'signing_key'\"\n                                [formControlName]=\"item.key\"\n                                [placeholder]=\"name_map[item.key] || item.key\"\n                            ></textarea>\n                        </ng-container>\n                        <mat-error>A {{ item.key }} is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </form>\n            <div class=\"flex flex-col space-y-2\">\n                <label>Booking Limits</label>\n                <object-list-field\n                    formControlName=\"booking_limits\"\n                    [fields]=\"['type', 'amount']\"\n                ></object-list-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-gray-200 flex justify-center\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving staff API tenant...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class StaffTenantModalComponent implements OnInit {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public form = new FormGroup({\n        domain: new FormControl(\n            this.domain?.domain || this.tenant.domain || 'localhost'\n        ),\n        name: new FormControl(this.tenant?.name || '', [Validators.required]),\n        delegated: new FormControl(this.tenant?.delegated ?? false),\n        platform: new FormControl(this.tenant?.platform || 'google', [\n            Validators.required,\n        ]),\n        booking_limits: new FormControl([]),\n        credentials:\n            this.tenant?.platform === 'office365'\n                ? this.office_form\n                : this.google_form,\n    });\n\n    public loading = false;\n\n    public readonly name_map = FIELD_NAME_MAPPING;\n\n    public get office_form() {\n        return new FormGroup({\n            tenant: new FormControl('', [Validators.required]),\n            client_id: new FormControl('', [Validators.required]),\n            client_secret: new FormControl('', [Validators.required]),\n            conference_type: new FormControl(''),\n        });\n    }\n\n    public get google_form() {\n        return new FormGroup({\n            issuer: new FormControl('', [Validators.required]),\n            signing_key: new FormControl('', [Validators.required]),\n            scopes: new FormControl('', [Validators.required]),\n            domain: new FormControl('', [Validators.required]),\n            sub: new FormControl('', [Validators.required]),\n            user_agent: new FormControl('PlaceOS', [Validators.required]),\n            conference_type: new FormControl(''),\n        });\n    }\n\n    public get credentials(): FormGroup {\n        return this.form?.controls.credentials as any;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<StaffTenantModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        const limits = this.tenant?.booking_limits || {};\n        const fields = [\n            'tenant',\n            'client_id',\n            'client_secrect',\n            'issuer',\n            'signing_key',\n            'scopes',\n            'sub',\n        ];\n        const handleDelegation = (delegated) => {\n            if (delegated) {\n                for (const field of fields) {\n                    this.form.get('credentials')?.get(field)?.disable();\n                    this.form.get('credentials')?.get(field)?.setValidators([]);\n                }\n            } else {\n                for (const field of fields) {\n                    this.form.get('credentials')?.get(field)?.enable();\n                    this.form\n                        .get('credentials')\n                        ?.get(field)\n                        ?.setValidators([Validators.required]);\n                }\n            }\n        };\n        this.form.controls.platform.valueChanges.subscribe((platform) => {\n            const credentials = this.form.value.credentials;\n            this.form.removeControl('credentials');\n            this.form.addControl(\n                'credentials',\n                platform === 'office365' ? this.office_form : this.google_form\n            );\n            handleDelegation(this.form.value.delegated);\n            this.form.patchValue({ credentials });\n        });\n        this.form.controls.delegated.valueChanges.subscribe(handleDelegation);\n        this.form.patchValue({\n            ...(this.tenant || {}),\n            domain: this.tenant?.domain || this._data.domain?.domain,\n            booking_limits: Object.keys(limits).map((k) => ({\n                type: k,\n                amount: limits[k],\n            })),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return notifyError(\n                `Some fields are invalid. [${getInvalidFields(this.form)}]`\n            );\n        }\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const limits: { type: string; amount: string }[] =\n            this.form.value.booking_limits || [];\n        const booking_limits = limits.reduce(\n            (m, { type, amount }) => (m[type] = +amount),\n            {}\n        );\n        const call = this.tenant?.id\n            ? put(`/api/staff/v1/tenants/${this.tenant.id}`, {\n                  ...(this.tenant || {}),\n                  ...this.form.value,\n                  booking_limits,\n              })\n            : post('/api/staff/v1/tenants', {\n                  ...(this.tenant || {}),\n                  ...this.form.value,\n                  booking_limits,\n              });\n        const tenant = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!tenant) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { del, get, PlaceDomain, queryDomains } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { BookingLimitsModalComponent } from './booking-limits-modal.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\n\nexport interface PlaceTenant {\n    id: string;\n    name: string;\n    domain: string;\n    platform: string;\n    delegated?: boolean;\n    booking_limits: Record<string, number>;\n    credentials?: HashMap<string>;\n}\n\n@Component({\n    selector: 'staff-api',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <label for=\"type\">Domain: </label>\n            <mat-form-field class=\"h-12\" appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [ngModel]=\"domain | async\"\n                    (ngModelChange)=\"domain.next($event)\"\n                    placeholder=\"Select Domain...\"\n                >\n                    <mat-option *ngFor=\"let domain of domain_list\" [value]=\"domain\">\n                        {{ domain.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button mat-button (click)=\"editTenant()\">Add Tenant</button>\n        </div>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div class=\"w-full\" *ngIf=\"(tenants | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-1/2 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Platform</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of tenants | async\">\n                        <div class=\"w-1/2 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">{{ item.platform }}</div>\n                        <div class=\"w-24 p-2 truncate\">\n                            <button mat-button class=\"clear underline\" (click)=\"editLimits(item)\">\n                                Edit Limits\n                            </button>\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"editTenant(item)\">\n                                <app-icon className=\"backoffice-edit\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"removeTenant(item)\">\n                                <app-icon className=\"backoffice-trash\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No tenants for selected domain</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceStaffAPIComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public readonly domain = new BehaviorSubject<PlaceDomain>(null);\n\n    public readonly tenants = this.domain.pipe(\n        switchMap(() => {\n            this.loading = 'Loading tenants for domain...';\n            return get('/api/staff/v1/tenants');\n        }),\n        catchError((_) => []),\n        map((tenants) => {\n            this.loading = '';\n            return tenants.filter((t) => t.domain === this.domain.getValue().domain);\n        }),\n        shareReplay()\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.domain.next(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public editTenant(tenant?: PlaceTenant) {\n        const ref = this._dialog.open(StaffTenantModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe(_ => this.domain.next(this.domain.getValue()));\n    }\n\n    public editLimits(tenant: PlaceTenant) {\n        const ref = this._dialog.open(BookingLimitsModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe(_ => this.domain.next(this.domain.getValue()));\n    }\n\n    public async removeTenant(tenant: PlaceTenant) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove tenant?',\n                content: `Remove <strong>${tenant.name}</strong> from this domain?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        details.loading('Removing tenant from domain...');\n        const system = await del(`/api/staff/v1/tenants/${tenant.id}`)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${tenant.id} from domain. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                return true;\n            });\n        details.close();\n        if (system) return;\n        notifySuccess(`Successfully removed tenant from domain.`);\n        this.domain.next(this.domain.getValue());\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { addEdge, PlaceEdge, updateEdge } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\n\nexport interface EdgeModalData {\n    edge: PlaceEdge;\n}\n\n@Component({\n    selector: 'edge-modal',\n    template: `\n        <header>\n            <h3>{{ edge ? 'Edit' : 'New' }} Edge</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main [formGroup]=\"form\" *ngIf=\"!loading && form; else load_state\" class=\"overflow-auto\">\n            <div class=\"flex flex-col flex-1\">\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"name\" placeholder=\"Edge Name\" />\n                    <mat-error>A edge name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea matInput formControlName=\"description\" placeholder=\"Edge description...\"></textarea>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer *ngIf=\"!loading\" class=\"p-2 border-t border-gray-200 flex justify-center\">\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving edge...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class EdgeModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly edge = this._data.edge;\n\n    public form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n    });\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EdgeModalData,\n        private _dialog_ref: MatDialogRef<EdgeModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form.patchValue(this.edge);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const edge = { ...this.edge, ...this.form.value };\n        const method = edge.id ? updateEdge(edge.id, edge) : addEdge(edge);\n        const new_edge = await method.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!new_edge) return notifyError('Error adding new edge.');\n        notifySuccess('Successfully added new edge.');\n        this._dialog_ref.close(new_edge);\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceEdge,\n    queryEdges,\n    removeEdge,\n    retrieveEdgeToken,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, debounce, debounceTime, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { copyToClipboard, openConfirmModal } from '../common/general';\nimport {\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n} from '../common/notifications';\nimport { EdgeModalComponent } from './edge-modal.component';\n\n@Component({\n    selector: '[admin-edge]',\n    template: `\n        <button mat-button class=\"w-full sm:w-32 my-4\" (click)=\"edit()\">\n            Add New Edge\n        </button>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div table class=\"w-full min-w-[48rem]\" *ngIf=\"(edges | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-32 p-2\">ID</div>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-32 p-2\">API Key</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of edges | async\">\n                        <div class=\"w-32 p-2 truncate text-xs font-mono\">\n                            {{ item.id }}\n                        </div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">\n                            {{ item.description }}\n                        </div>\n                        <div class=\"w-32 p-2\">\n                            <code>{{ item.x_api_key || '********' }}</code>\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button\n                                mat-icon-button\n                                class=\"h-10 w-10\"\n                                (click)=\"edit(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-edit\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                class=\"h-10 w-10\"\n                                (click)=\"remove(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No edges</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                min-height: 10rem;\n            }\n        `,\n    ],\n})\nexport class PlaceEdgeComponent {\n    public loading: string = '';\n\n    private _change = new BehaviorSubject<number>(0);\n    private _last_change = new BehaviorSubject<PlaceEdge>(null);\n\n    private _edge_list: Observable<PlaceEdge[]> = this._change.pipe(\n        switchMap((_) => {\n            this.loading = 'Loading Edges...';\n            this._last_change.next(null);\n            return queryEdges();\n        }),\n        catchError((_) => of({})),\n        map((details?: { data: PlaceEdge[] }) => {\n            this.loading = '';\n            return (details?.data || []).sort((a, b) =>\n                a.id.localeCompare(b.id)\n            );\n        }),\n        shareReplay()\n    );\n\n    public readonly edges = combineLatest([\n        this._last_change,\n        this._edge_list,\n    ]).pipe(\n        debounceTime(500),\n        map(([edge, list]) => {\n            if (!edge) return list;\n            const edges = list.filter((_) => _.id !== edge.id);\n            edges.push(edge);\n            return edges.sort((a, b) => a.id.localeCompare(b.id));\n        })\n    );\n\n    public readonly token = async (edge: PlaceEdge) => {\n        const details = await retrieveEdgeToken(edge.id).toPromise();\n        copyToClipboard(details.token);\n        notifyInfo(`Token copied to clickboard.`);\n    };\n\n    public readonly edit = async (edge?: PlaceEdge) => {\n        const ref = this._dialog.open(EdgeModalComponent, { data: { edge } });\n        ref.afterClosed().subscribe(_ => this._last_change.next(_));\n    };\n\n    public readonly remove = async (i: PlaceEdge) => {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove edge?',\n                content: `Remove <strong>${i.name}</strong>?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Removing edge...');\n        const err = await removeEdge(i.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing edge. Error: ${\n                    err.statusText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed Edge.');\n        this._change.next(Date.now());\n    };\n\n    constructor(private _dialog: MatDialog) {}\n}\n","import { Component } from '@angular/core';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { randomInt } from '../common/general';\nimport { JsonSchema, SchemaStateService } from './schema-state.service';\n\n@Component({\n    selector: 'admin-schemas',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"active_schema\"\n                        (ngModelChange)=\"copySchema()\"\n                        placeholder=\"Select Schema...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let schema of schema_list | async\"\n                            [value]=\"schema\"\n                        >\n                            {{ schema.name }}\n                        </mat-option>\n                        <mat-option\n                            (click)=\"newSchema(); $event.preventDefault()\"\n                        >\n                            <span class=\"italic font-sans\">New Schema</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"newSchema()\">\n                Add Schema\n            </button>\n        </div>\n        <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"schema_copy\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema Name: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <input matInput [(ngModel)]=\"schema_copy.name\" />\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"saveSchema()\">\n                Save Schema\n            </button>\n        </div>\n        <div class=\"relative flex-1 h-1/2\">\n            <ng-container *ngIf=\"schema_copy; else empty_state\">\n                <settings-form-field\n                    [(ngModel)]=\"schema_copy.schema\"\n                    lang=\"json\"\n                    [readonly]=\"false\"\n                ></settings-form-field>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"absolute inset-0 flex items-center justify-center\">\n                <p class=\"p-8\">Select a schema to edit</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 1rem;\n                right: 1rem;\n                bottom: 0;\n                display: flex;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class AdminSchemasComponent {\n    public active_schema: JsonSchema;\n    public schema_copy: JsonSchema;\n\n    public readonly schema_list = this._state.schemas.pipe(shareReplay(1));\n    constructor(private _state: SchemaStateService) {}\n\n    public copySchema() {\n        if (!this.active_schema) return;\n        this.schema_copy = JSON.parse(JSON.stringify(this.active_schema));\n    }\n\n    public async newSchema() {\n        this.active_schema = {\n            name: 'New Schema',\n            schema: '{}',\n        };\n        this.copySchema();\n    }\n\n    public saveSchema() {\n        this._state.saveSchema(this.schema_copy);\n        this.active_schema = null;\n        this.schema_copy = null;\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import { getUnixTime } from 'date-fns';\n\nexport class PlaceAPIKeyDetails {\n    public readonly id: string;\n    public readonly name: string;\n    public readonly user_id: string;\n    public readonly authority_id: string;\n    public readonly description: string;\n    public readonly scopes: string[];\n    public readonly permissions: null | 'user' | 'support' | 'admin';\n    public readonly created_at: number;\n    public readonly updated_at: number;\n    public readonly secret?: string;\n    public readonly x_api_key?: string;\n\n    constructor(_data: Partial<PlaceAPIKeyDetails>) {\n        this.id = _data.id || '';\n        this.name = _data.name || '';\n        this.user_id = _data.user_id || '';\n        this.authority_id = _data.authority_id || '';\n        this.description = _data.description || '';\n        this.permissions = _data.permissions || 'user';\n        this.created_at = _data.created_at || getUnixTime(new Date());\n        this.updated_at = _data.updated_at || getUnixTime(new Date());\n        this.secret = _data.secret;\n        this.x_api_key = _data.x_api_key || '';\n        this.scopes = _data.scopes || [];\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { addChipItem, removeChipItem } from '../../common/forms';\nimport { DialogEvent } from '../../common/types';\nimport { APIKeyService } from './api-keys.service';\n\n@Component({\n    selector: 'api-key-modal',\n    template: `\n        <header class=\"h-12 flex items-center justify-between p-2\">\n            <h2>New API Key</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            class=\"w-[32rem] max-w-[calc(100vw-2rem)]\"\n            *ngIf=\"!loading && form; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                        matInput\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Description</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        name=\"description\"\n                        formControlName=\"description\"\n                        placeholder=\"Description\"\n                        matInput\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"scope\">Scopes</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Scopes\">\n                        <mat-chip\n                            *ngFor=\"let scope of scope_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeScope(tag)\"\n                        >\n                            {{ scope }}\n                            <app-icon\n                                matChipRemove\n                                className=\"backoffice-cross\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            placeholder=\"Scopes...\"\n                            i18n-placeholder=\"@@apiScopePlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addScope($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"user\">User<span>*</span></label>\n                <an-action-field\n                    [matMenuTriggerFor]=\"menu\"\n                    yPosition=\"below\"\n                    class=\"mb-8\"\n                    (click)=\"focusInput()\"\n                >\n                    <div [class.opacity-30]=\"!form.value.user?.id\">\n                        {{ form.value.user?.name || 'Select user' }}\n                    </div>\n                </an-action-field>\n                <mat-menu #menu=\"matMenu\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"px-2 h-12\"\n                        (click)=\"\n                            $event.preventDefault(); $event.stopPropagation()\n                        \"\n                    >\n                        <input\n                            matInput\n                            #input\n                            ngModel\n                            (ngModelChange)=\"setSearch($event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Search users...\"\n                        />\n                    </mat-form-field>\n                    <button\n                        mat-menu-item\n                        *ngFor=\"let item of users | async | slice: 0:10\"\n                        (click)=\"\n                            form.patchValue({ user: item, user_id: item.id });\n                            setSearch('')\n                        \"\n                        [class.text-primary]=\"form.value.user?.id === item.id\"\n                    >\n                        {{ item.name }}\n                    </button>\n                </mat-menu>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"permissions\">Permissions</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"permissions\"\n                        formControlName=\"permissions\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option [value]=\"null\">None</mat-option>\n                        <mat-option value=\"user\">User</mat-option>\n                        <mat-option value=\"support\">Support</mat-option>\n                        <mat-option value=\"admin\">Admin</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 flex items-center justify-center border-t border-gray-100 dark:border-gray-100/20\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 w-[24rem] h-64\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class APIKeyModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        user: new FormControl(null),\n        user_id: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        scopes: new FormControl([]),\n        permissions: new FormControl(''),\n    });\n    public loading: string;\n    public readonly search_str = new BehaviorSubject('');\n\n    @ViewChild('input') public _input_el: ElementRef<HTMLInputElement>;\n\n    public readonly users = combineLatest([\n        this._service.users,\n        this.form.valueChanges,\n    ]).pipe(\n        map(([users, { permissions }]) => {\n            if (permissions === 'admin')\n                return users.filter((_) => _.sys_admin);\n            if (permissions === 'support')\n                return users.filter((_) => _.support || _.sys_admin);\n            return users.sort((a, b) => a.name?.localeCompare(b.name));\n        })\n    );\n\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public readonly focusInput = () =>\n        setTimeout(() => this._input_el?.nativeElement?.focus(), 100);\n    public readonly setSearch = (s) => this._service.setSearch(s);\n\n    public readonly addScope = (e) =>\n        addChipItem(this.form.controls.scopes as any, e);\n    public readonly removeScope = (i) =>\n        removeChipItem(this.form.controls.scopes as any, i);\n\n    constructor(private _service: APIKeyService) {\n        setTimeout(() => this.form.patchValue({ permissions: null }), 100);\n    }\n\n    public get scope_list(): string[] {\n        return this.form.controls.scopes.value;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        const data = { ...this.form.value };\n        delete data.user;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    create,\n    PlaceDomain,\n    PlaceUser,\n    query,\n    queryDomains,\n    queryUsers,\n    remove,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { debounce, debounceTime, first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../../common/general';\nimport { notifyError, notifySuccess } from '../../common/notifications';\nimport { PlaceAPIKeyDetails } from './api-key-details.class';\nimport { APIKeyModalComponent } from './api-key-modal.component';\n\n@Injectable()\nexport class APIKeyService {\n    private _search = new BehaviorSubject<string>('');\n    private _domain = new BehaviorSubject<PlaceDomain>(null);\n    private _last_key = new BehaviorSubject<PlaceAPIKeyDetails>(null);\n    private _change = new BehaviorSubject<number>(0);\n\n    public readonly last_key = this._last_key.asObservable();\n    public readonly active_domain = this._domain.asObservable();\n\n    public readonly available_domains = queryDomains({ limit: 500 }).pipe(\n        map((_) => _.data),\n        shareReplay(1)\n    );\n\n    public readonly available_keys = combineLatest([\n        this._domain,\n        this._change,\n    ]).pipe(\n        switchMap(([domain]) => {\n            return domain\n                ? query({\n                      query_params: { authority_id: domain.id },\n                      fn: (d) => new PlaceAPIKeyDetails(d),\n                      path: 'api_keys',\n                  }).pipe(map((_) => _.data as PlaceAPIKeyDetails[]))\n                : of([] as PlaceAPIKeyDetails[]);\n        }),\n        shareReplay(1)\n    );\n\n    public readonly users = combineLatest([\n        this._domain,\n        this._search,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(([domain, q]) => {\n            return domain\n                ? queryUsers({ authority_id: domain.id, q }).pipe(\n                      map((_) => _.data as PlaceUser[])\n                  )\n                : of([] as PlaceUser[]);\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public setDomain(domain: PlaceDomain) {\n        this._domain.next(domain);\n    }\n\n    public setSearch(s: string) {\n        this._search.next(s);\n    }\n\n    public async newKey() {\n        const ref = this._dialog.open(APIKeyModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Creating new API key...';\n        const domain = this._domain.getValue();\n        const key = await create({\n            query_params: {},\n            fn: (d) => new PlaceAPIKeyDetails(d),\n            path: 'api_keys',\n            form_data: {\n                ...details.metadata,\n                authority_id: domain.id,\n            },\n        })\n            .toPromise()\n            .catch((_) => {\n                ref.close();\n                notifyError(_);\n                throw _;\n            });\n        this._last_key.next(key as any);\n        this._change.next(Date.now());\n        notifySuccess('Successfully created new API key.');\n        ref.close();\n    }\n\n    public async removeKey(key: PlaceAPIKeyDetails) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove API Key',\n                content: `Are you sure you wish to remove this API key?\n                    Removing this key may result in applications using this key to stop working.`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Removing API key...');\n        await remove({\n            id: key.id,\n            query_params: {},\n            path: 'api_keys',\n        }).toPromise();\n        details.close();\n        notifySuccess('Successfully removed API key.');\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Clipboard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCopyToClipboard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }]; }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ClipboardModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { Component } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { take } from 'rxjs/operators';\nimport { APIKeyService } from './api-keys.service';\nimport { notifyInfo } from '../../common/notifications';\n\n@Component({\n    selector: 'admin-api-keys',\n    template: `\n        <div class=\"flex items-start space-x-2 my-4\">\n            <div class=\"flex flex-col space-y-1\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [ngModel]=\"domain | async\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list | async\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button\n                mat-button\n                class=\"mt-8 min-w-[8rem]\"\n                [disabled]=\"!(domain | async)\"\n                (click)=\"newKey()\"\n            >\n                Add API Key\n            </button>\n            <div\n                *ngIf=\"last_key | async\"\n                class=\"rounded shadow border border-gray-100 min-w-[24rem]\"\n            >\n                <div class=\"border-b px-2 pb-1 border-gray-200 !w-full\">\n                    <label class=\"p-0 m-0\">\n                        Last API Key Details ({{\n                            (last_key | async)?.name || 'Unanamed API Key'\n                        }})\n                    </label>\n                </div>\n                <div class=\"p-2\">\n                    <div\n                        class=\"select-all text-xs opacity-60 mono break-words cursor-pointer\"\n                        (click)=\"copyKey()\"\n                    >\n                        {{ (last_key | async)?.x_api_key}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div role=\"table\" class=\"min-w-[60rem]\" *ngIf=\"(key_list | async)?.length; else load_state\">\n            <div table-head>\n                <div class=\"w-32 p-2\">Name</div>\n                <div class=\"flex-1 p-2\">Description</div>\n                <div class=\"w-32 p-2 truncate\">Scopes</div>\n                <div class=\"w-28 p-2\">Permissions</div>\n                <div class=\"w-32 p-2\">Created</div>\n                <div class=\"w-16 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of key_list | async\">\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                    <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                    <div class=\"w-32 p-2 truncate\">\n                        <span\n                            class=\"m-1 px-2 py-1 bg-gray-400 rounded text-xs text-white\"\n                            *ngFor=\"let scope of item.scopes\"\n                        >\n                            {{ scope }}\n                        </span>\n                    </div>\n                    <div class=\"w-28 p-2\">{{ item.permissions || 'None' }}</div>\n                    <div class=\"w-32 p-2\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-16 p-2 flex items-center\">\n                        <button mat-icon-button (click)=\"deleteKey(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No API Keys</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AdminAPIKeysComponent {\n    public readonly domain = this._service.active_domain;\n    public readonly domain_list = this._service.available_domains;\n    public readonly key_list = this._service.available_keys;\n    public readonly last_key = this._service.last_key;\n\n    public readonly setDomain = (d) => this._service.setDomain(d);\n    public readonly newKey = () => this._service.newKey();\n    public readonly deleteKey = (k) => this._service.removeKey(k);\n\n    constructor(\n        private _service: APIKeyService,\n        private _clipboard: Clipboard\n    ) {}\n\n    public async copyKey() {\n        const key = await this.last_key.pipe(take(1)).toPromise();\n        if (!key?.x_api_key) return;\n        this._clipboard.copy(key.x_api_key);\n        notifyInfo('Copied API key to clipboard.');\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { AuthorisedAdminGuard } from 'apps/backoffice/src/app/ui/guards/authorised-admin.guard';\n\nimport { PlaceComponent } from './engine.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        component: PlaceComponent,\n        canActivate: [AuthorisedAdminGuard],\n        children: [\n            { path: 'about', component: PlaceDetailsComponent },\n            { path: 'database', component: PlaceDatabaseDetailsComponent },\n            { path: 'clusters', component: PlaceClusterDetailsComponent },\n            { path: 'interfaces', component: AdminInterfacesComponent },\n            { path: 'brokers', component: AdminBrokersComponent },\n            { path: 'edge', component: PlaceEdgeComponent },\n            { path: 'extensions', component: PlaceExtensionsComponent },\n            { path: 'staff-api', component: PlaceStaffAPIComponent },\n            { path: 'schemas', component: AdminSchemasComponent },\n            { path: 'api-keys', component: AdminAPIKeysComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './engine.routes';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\nimport { PlaceComponent } from './engine.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { PlaceClusterItemComponent } from './cluster-details/cluster-item.component';\nimport { PlaceClusterTaskListComponent } from './cluster-details/cluster-task-list.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { EdgeModalComponent } from './edge-modal.component';\nimport { AdminClusterNodeComponent } from './cluster-details/cluster-node.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\nimport { APIKeyModalComponent } from './api-keys/api-key-modal.component';\nimport { APIKeyService } from './api-keys/api-keys.service';\nimport { BookingLimitsModalComponent } from './booking-limits-modal.component';\n\n@NgModule({\n    declarations: [\n        PlaceComponent,\n        PlaceDatabaseDetailsComponent,\n        PlaceDetailsComponent,\n        PlaceClusterDetailsComponent,\n        PlaceClusterItemComponent,\n        PlaceClusterTaskListComponent,\n        PlaceExtensionsComponent,\n        AdminInterfacesComponent,\n        AdminBrokersComponent,\n        ExtensionModalComponent,\n        PlaceStaffAPIComponent,\n        StaffTenantModalComponent,\n        PlaceEdgeComponent,\n        EdgeModalComponent,\n        AdminClusterNodeComponent,\n        AdminSchemasComponent,\n        AdminAPIKeysComponent,\n        APIKeyModalComponent,\n        BookingLimitsModalComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n    providers: [\n        APIKeyService\n    ]\n})\nexport class AppPlaceModule {}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n"]}