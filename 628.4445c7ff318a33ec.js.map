{"version":3,"file":"628.4445c7ff318a33ec.js","mappings":"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","names":["TriggerStateService","constructor","_service","_dialog","this","item","pipe","switchMap","PlaceTrigger","listTriggerInstances","id","of","shareReplay","active_item","editCondition","condition","template","ref","o","open","TriggerConditionModalComponent","width","height","data","trigger","JSON","parse","stringify","undefined","system","result","Promise","race","componentInstance","event","first","_","reason","toPromise","afterClosed","replaceItem","metadata","editAction","action","TriggerActionModalComponent","reorderAction","type","fst","snd","details","openConfirmModal","title","content","icon","class","n","list","actions","functions","mailers","moveItemInArray","loading","resp","updateTrigger","toJSON","catch","notifyError","response","message","notifySuccess","removeCondition","conditions","comparisons","time_dependents","index","findIndex","i","splice","err","close","removeAction","emails","removeTriggerFromSystem","name","removeSystemTrigger","responseText","i0","factory","action_r29","$event","TriggerAboutComponent","BaseClass","super","querySystems","q","map","c","template_system","a","ngOnInit","subscription","subscribe","confirmReorder","previousIndex","currentIndex","selectors","$localize","i18n_22","ctx","TriggerInstancesComponent","instances","s","ROUTES","path","component","TriggersComponent","create","extensions","extensionsForItem","updateTabList","tab_list","count","instance_count","concat","loadValues","length","children","ExtensionOutletComponent","redirectTo","AppTriggersModule","CommonModule","FormsModule","RouterModule","SharedContentModule","DragDropModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/triggers/trigger-state.service.ts","./apps/backoffice/src/app/triggers/trigger-about.component.ts","./apps/backoffice/src/app/triggers/trigger-instances.component.ts","./apps/backoffice/src/app/triggers/triggers.component.ts","./apps/backoffice/src/app/triggers/triggers.routes.ts","./apps/backoffice/src/app/triggers/triggers.module.ts"],"sourcesContent":["import { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceSystem,\n    PlaceTrigger,\n    listTriggerInstances,\n    removeSystemTrigger,\n    TriggerComparison,\n    TriggerFunction,\n    TriggerMailer,\n    TriggerTimeCondition,\n    updateTrigger,\n} from '@placeos/ts-client';\nimport { Observable, of } from 'rxjs';\nimport { first, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\nimport {\n    TriggerActionModalComponent,\n    TriggerActionModalData,\n} from '../overlays/trigger-action-modal/trigger-action-modal.component';\nimport {\n    TriggerConditionData,\n    TriggerConditionModalComponent,\n} from '../overlays/trigger-condition-modal/trigger-condition-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TriggerStateService {\n    public readonly item: Observable<PlaceTrigger> = this._service.item as any;\n\n    public readonly instances: Observable<PlaceTrigger[]> = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceTrigger)) return of([]);\n            return listTriggerInstances(item.id);\n        }),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(\n        private _service: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    /**\n     * Add new condition to trigger\n     */\n    public async editCondition(\n        condition: TriggerComparison | TriggerTimeCondition = null,\n        template: PlaceSystem\n    ) {\n        if (!template) return;\n        const ref = this._dialog.open<\n            TriggerConditionModalComponent,\n            TriggerConditionData\n        >(TriggerConditionModalComponent, {\n            width: 'auto',\n            height: 'auto',\n            data: {\n                trigger: this.active_item,\n                condition: condition\n                    ? JSON.parse(JSON.stringify(condition))\n                    : undefined,\n                system: template,\n            },\n        });\n        const result: DialogEvent | null = (await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])) as any;\n        if (!result?.reason) return;\n        this._service.replaceItem(result.metadata.trigger);\n    }\n\n    /**\n     * Edit existing action on active trigger\n     * @param action Action to edit\n     */\n    public async editAction(\n        action: TriggerFunction | TriggerMailer = null,\n        template: PlaceSystem\n    ) {\n        if (!template) return;\n        const ref = this._dialog.open<\n            TriggerActionModalComponent,\n            TriggerActionModalData\n        >(TriggerActionModalComponent, {\n            data: {\n                trigger: this.active_item,\n                action,\n                system: template,\n            },\n        });\n        const result: DialogEvent | null = (await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])) as any;\n        if (!result?.reason) return;\n        this._service.replaceItem(result.metadata.trigger);\n    }\n\n    /**\n     * Re-order action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public async reorderAction(\n        type: 'function' | 'mailer',\n        fst: number,\n        snd: number\n    ): Promise<void> {\n        const details = await openConfirmModal(\n            {\n                title: `Reoreder trigger ${type} action`,\n                content: `Are you sure you want remove this trigger condition?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        const list: any[] = [\n            ...(type === 'function'\n                ? this.active_item.actions.functions\n                : this.active_item.actions.mailers),\n        ];\n        moveItemInArray(list, fst, snd);\n        const actions = {\n            functions:\n                type === 'function' ? list : this.active_item.actions.functions,\n            mailers:\n                type === 'function' ? this.active_item.actions.mailers : list,\n        };\n        details.loading('Re-ordering triggger actions...');\n        const resp = await updateTrigger(this.active_item.id, {\n            ...this.active_item.toJSON(),\n            actions,\n        })\n            .toPromise()\n            .catch((_) => _);\n        if (!(resp instanceof PlaceTrigger))\n            return notifyError(\n                `Error re-ordered trigger ${type} action. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        this._service.replaceItem(resp);\n        notifySuccess(`Successfully re-ordered trigger ${type} action.`);\n    }\n\n    public async removeCondition(\n        condition: TriggerComparison | TriggerTimeCondition\n    ) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger condition`,\n                content: `Are you sure you want remove this trigger condition?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger condition...');\n        const item = this.active_item;\n        const conditions = {\n            comparisons: [...item.conditions.comparisons],\n            time_dependents: [...item.conditions.time_dependents],\n        };\n        const index = ((condition as TriggerTimeCondition).type\n            ? item.conditions.time_dependents\n            : item.conditions.comparisons\n        ).findIndex((i) => JSON.stringify(i) === JSON.stringify(condition));\n        conditions.time_dependents.splice(index, 1);\n        ((condition as TriggerTimeCondition).type\n            ? conditions.time_dependents\n            : conditions.comparisons\n        ).splice(index, 1);\n        const resp = await updateTrigger(item.id, {\n            ...item.toJSON(),\n            conditions,\n        })\n            .toPromise()\n            .catch((err) => err);\n        details.close();\n        if (!(resp instanceof PlaceTrigger)) {\n            return notifyError(\n                `Error removing trigger condition. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        }\n        this._service.replaceItem(resp);\n        notifySuccess('Successfully removed trigger condition.');\n    }\n\n    public async removeAction(action: TriggerFunction | TriggerMailer) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger action`,\n                content: `Are you sure you want remove this trigger action?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger action...');\n        const item = this.active_item;\n        const actions = {\n            functions: [...item.actions.functions],\n            mailers: [...item.actions.mailers],\n        };\n        const index = ((action as TriggerMailer).emails\n            ? item.actions.mailers\n            : item.actions.functions\n        ).findIndex((i) => JSON.stringify(i) === JSON.stringify(action));\n        ((action as TriggerMailer).emails\n            ? actions.mailers\n            : actions.functions\n        ).splice(index, 1);\n        const resp = await updateTrigger(item.id, { ...item.toJSON(), actions })\n            .toPromise()\n            .catch((err) => err);\n        details.close();\n        if (!(resp instanceof PlaceTrigger)) {\n            return notifyError(\n                `Error removing trigger action. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        }\n        this._service.replaceItem(resp);\n        notifySuccess('Successfully removed trigger action.');\n    }\n\n    public async removeTriggerFromSystem(system: PlaceSystem) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger from system`,\n                content: `Are you sure you want remove this trigger from ${system.name}?<br>The system will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger from system...');\n        const err = await removeSystemTrigger(system.id, this.active_item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing trigger from system. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed trigger from system.');\n    }\n}\n","import { Component } from '@angular/core';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    PlaceTrigger,\n    PlaceSystem,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerFunction,\n    TriggerMailer,\n    querySystems,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { TriggerStateService } from './trigger-state.service';\n\n@Component({\n    selector: 'trigger-about',\n    template: `\n        <section class=\"space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@triggerCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.updated_at\">\n                <label i18n=\"@triggerUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <div class=\"flex items-center space-x-2\">\n            <label\n                for=\"driver\"\n                class=\"whitespace-nowrap\"\n                matTooltip=\"System to use for available status variables and function calls\"\n                i18n=\"@@triggerTemplateSystemLabel\"\n                >Template System:\n            </label>\n            <item-search-field\n                class=\"h-12\"\n                name=\"system\"\n                [query_fn]=\"query_fn\"\n                [(ngModel)]=\"template_system\"\n            ></item-search-field>\n        </div>\n        <header class=\"flex items-center my-4\">\n            <button\n                mat-icon-button\n                [disabled]=\"!template_system\"\n                (click)=\"editCondition()\"\n            >\n                <app-icon className=\"backoffice-plus\"></app-icon>\n            </button>\n            <div class=\"font-medium text-lg\" i18n=\"@@triggerConditionsHeader\">\n                Conditions\n            </div>\n        </header>\n        <section\n            role=\"table\"\n            *ngIf=\"\n                comparisons.length || time_dependents.length;\n                else no_conditions\n            \"\n        >\n            <div\n                table-head\n                i18n=\"@@triggerComparisonLabel\"\n                *ngIf=\"comparisons.length\"\n            >\n                <div class=\"flex-1 p-2\">Variable Comparison Condtions</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let comparison of comparisons\">\n                    <div class=\"w-12\"></div>\n                    <div class=\"flex-1 p-2\">\n                        {{ comparison.left | json }} {{ comparison.operator }}\n                        {{ comparison.right | json }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editCondition(comparison)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"removeCondition(comparison)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div\n                table-head\n                i18n=\"@@triggerTimeLabel\"\n                *ngIf=\"time_dependents.length\"\n            >\n                <div class=\"flex-1 p-2\">Time Dependent Conditions</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let time of time_dependents\">\n                    <div class=\"w-12\"></div>\n                    <div class=\"flex-1 p-2\">\n                        {{ time.type === 'at' ? 'At time' : 'CRON' }}\n                        {{ time.type === 'at' ? time.time : time.cron }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editCondition(time)\"\n                        >\n                            <app-icon className=\"backoffice-edit\"></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeCondition(time)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <header class=\"flex items-center space-x-2 my-4\">\n            <button\n                mat-icon-button\n                [disabled]=\"!template_system\"\n                (click)=\"editAction()\"\n            >\n                <app-icon className=\"backoffice-plus\"></app-icon>\n            </button>\n            <div class=\"font-medium text-lg\" i18n=\"@@triggerActionsHeader\">\n                Actions\n            </div>\n        </header>\n        <section\n            role=\"table\"\n            *ngIf=\"functions.length || mailers.length; else no_actions\"\n        >\n            <div\n                table-head\n                i18n=\"@@triggerFunctionsLabel\"\n                *ngIf=\"functions.length\"\n            >\n                <div class=\"flex-1 p-2\">Function Call Actions</div>\n            </div>\n            <div\n                table-body\n                cdkDropList\n                (cdkDropListDropped)=\"confirmReorder('function', $event)\"\n            >\n                <div table-row *ngFor=\"let action of functions\" cdkDrag>\n                    <div\n                        class=\"w-12 flex items-center justify-center\"\n                        cdkDragHandle\n                    >\n                        <app-icon\n                            [icon]=\"{ class: 'backoffice-select-arrows' }\"\n                        ></app-icon>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        {{ action.mod }}, {{ action.method }}({{\n                            action.args | json\n                        }})\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editAction(action)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeAction(action)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                    <div\n                        class=\"p-4 border-4 border-dashed border-black bg-gray-300\"\n                        *cdkDragPlaceholder\n                    ></div>\n                </div>\n            </div>\n            <div table-head i18n=\"@@triggerEmailsLabel\" *ngIf=\"mailers.length\">\n                <div class=\"flex-1 p-2\">Email Actions</div>\n            </div>\n            <div\n                table-body\n                cdkDropList\n                (cdkDropListDropped)=\"confirmReorder('mailer', $event)\"\n            >\n                <div table-row *ngFor=\"let action of mailers\" cdkDrag>\n                    <div\n                        class=\"w-12 flex items-center justify-center\"\n                        cdkDragHandle\n                    >\n                        <app-icon\n                            [icon]=\"{ class: 'backoffice-select-arrows' }\"\n                        ></app-icon>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        <span\n                            [matTooltip]=\"action.emails | formatList\"\n                            i18n=\"@@emailCountDisplay\"\n                            >{{ action.emails.length }} { action.emails.length,\n                            plural, =1 { Address } other { Addresses } }</span\n                        >&nbsp; | Body Length: {{ action.content.length }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editAction(action)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeAction(action)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                    <div\n                        class=\"p-4 border-4 border-dashed border-black bg-gray-300\"\n                        *cdkDragPlaceholder\n                    ></div>\n                </div>\n            </div>\n        </section>\n        <ng-template #no_conditions>\n            <div\n                class=\"flex flex-col items-center p-8\"\n                i18n=\"@@triggerConditionsEmpty\"\n            >\n                No condtions for trigger\n            </div>\n        </ng-template>\n        <ng-template #no_actions>\n            <div\n                class=\"flex flex-col items-center p-8\"\n                i18n=\"@@triggerActionsEmpty\"\n            >\n                No actions for trigger\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TriggerAboutComponent extends BaseClass {\n    /** System to use for conditions with systen variables and functions */\n    public template_system: PlaceSystem;\n    /** List of variable comparison trigger conditions */\n    public comparisons: TriggerComparison[] = [];\n    /** List of time dependent trigger conditions */\n    public time_dependents: TriggerTimeCondition[] = [];\n    /** List of function call trigger actions */\n    public functions: TriggerFunction[] = [];\n    /** List of email trigger actions */\n    public mailers: TriggerMailer[] = [];\n    /** Query function for systems */\n    public readonly query_fn = (_) =>\n        querySystems({ q: _ }).pipe(map((resp) => resp.data));\n\n    public readonly editCondition = (c?) =>\n        this._service.editCondition(c, this.template_system);\n    public readonly removeCondition = (c) => this._service.removeCondition(c);\n    public readonly editAction = (a?) =>\n        this._service.editAction(a, this.template_system);\n    public readonly removeAction = (a) => this._service.removeAction(a);\n\n    public get item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: TriggerStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                if (this.item && this.item.conditions) {\n                    this.comparisons = this.item.conditions.comparisons || [];\n                    this.time_dependents =\n                        this.item.conditions.time_dependents || [];\n                    this.functions = this.item.actions.functions || [];\n                    this.mailers = this.item.actions.mailers || [];\n                }\n            })\n        );\n    }\n    /**\n     * Open confirmation modal for re-ordering action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public confirmReorder(\n        type: 'function' | 'mailer',\n        event: CdkDragDrop<any[]>\n    ): void {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderAction(\n                type,\n                event.previousIndex,\n                event.currentIndex\n            );\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceTrigger } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport { TriggerStateService } from './trigger-state.service';\n\n@Component({\n    selector: 'trigger-systems',\n    template: `\n        <div role=\"table\" *ngIf=\"(instances | async)?.length; else empty_state\">\n            <div table-head>\n                <td class=\"w-12 h-10\"></td>\n                <td\n                    class=\"flex-1 h-10 flex items-center px-2\"\n                    i18n=\"@@systemTableName\"\n                >\n                    Parent ID\n                </td>\n                <td\n                    class=\"w-32 h-10 flex items-center px-2\"\n                    i18n=\"@@systemTableAdded\"\n                >\n                    Added\n                </td>\n                <td class=\"w-12 h-10\"></td>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of instances | async\">\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <div\n                            class=\"h-2 w-2 rounded-full bg-black\"\n                            [class.active]=\"item.bookable\"\n                        ></div>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        <a\n                            *ngIf=\"item.id\"\n                            class=\"underline\"\n                            [routerLink]=\"\n                                item.zone_id\n                                    ? ['/zones', item.zone_id]\n                                    : ['/systems', item.control_system_id]\n                            \"\n                            [matTooltip]=\"\n                                item.zone_id || item.control_system_id\n                            \"\n                        >\n                            {{\n                                item.name ||\n                                    item.zone_id ||\n                                    item.control_system_id\n                            }}\n                        </a>\n                    </div>\n                    <div class=\"w-32 p-2\">\n                        {{ +item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"deleteTrigger(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <div class=\"text\" i18n=\"@@systemTableEmpty\">\n                    No instances of trigger\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            .active {\n                background-color: var(--success) !important;\n            }\n        `,\n    ],\n})\nexport class TriggerInstancesComponent {\n    /** List of systems associated with the trigger */\n    public readonly instances = this._service.instances;\n    /** Map of systems ids to connected status */\n    public connected: HashMap<boolean> = {};\n\n    public readonly deleteTrigger = (s) =>\n        this._service.removeTriggerFromSystem(s);\n\n    public get item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: TriggerStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { listTriggerInstances, PlaceTrigger } from '@placeos/ts-client';\nimport { extensionsForItem } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\n\n@Component({\n    selector: 'new-triggers-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <item-sidebar class=\"hidden sm:block\" [route]=\"name\" title=\"Triggers\"></item-sidebar>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                <item-selection class=\"z-20 sm:hidden\" [route]=\"name\" title=\"Triggers\">\n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </item-selection>\n                <div class=\"flex flex-col flex-1 h-1/2\">\n                    <ng-container *ngIf=\"item?.id\">\n                        <item-details\n                            [can_edit]=\"true\"\n                            [item]=\"item\"\n                            type=\"Trigger\"\n                        ></item-details>\n                        <item-tablist\n                            [base]=\"name\"\n                            [tabs]=\"tab_list\"\n                            [scrolled]=\"scroll > 0\"\n                            class=\"z-10\"\n                        ></item-tablist>\n                        <div\n                            #el\n                            class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                            (scroll)=\"scroll = el.scrollTop\"\n                        >\n                            <router-outlet></router-outlet>\n                        </div>\n                    </ng-container>\n                </div>\n                <button\n                    class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                    matTooltip=\"New trigger\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"newItem()\"\n                >\n                    <app-icon\n                        [className]=\"'backoffice-plus'\"\n                        class=\"text-3xl\"\n                    ></app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class TriggersComponent extends BaseClass {\n    public readonly name = 'triggers';\n\n    public open_menu = false;\n    public instance_count = 0;\n    public tab_list = [];\n\n    public readonly newItem = () => this._service.create();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'instances',\n                name: 'Instances',\n                count: this.instance_count,\n                icon: { class: 'backoffice-documents' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: ActiveItemService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadValues(item as any);\n            })\n        );\n        this.updateTabList();\n    }\n\n    protected async loadValues(item: PlaceTrigger) {\n        if (!item) return;\n        // Get trigger count\n        this.instance_count = (\n            await listTriggerInstances(item.id).toPromise()\n        ).length;\n        this.updateTabList();\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { TriggerAboutComponent } from './trigger-about.component';\nimport { TriggerInstancesComponent } from './trigger-instances.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { TriggersComponent } from './triggers.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: TriggersComponent,\n        children: [\n            { path: 'about', component: TriggerAboutComponent },\n            { path: 'instances', component: TriggerInstancesComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './triggers.routes';\n\nimport { TriggerAboutComponent } from './trigger-about.component';\nimport { TriggerInstancesComponent } from './trigger-instances.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { TriggersComponent } from './triggers.component';\n\n@NgModule({\n    declarations: [\n        TriggerAboutComponent,\n        TriggerInstancesComponent,\n        TriggersComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule,\n    ],\n})\nexport class AppTriggersModule {}\n"],"x_google_ignoreList":[]}