{"version":3,"mappings":"oGAGA,IAUIA,EAVY,WAIf,GAAoB,oBAATC,KAAwB,OAAOA,KAC1C,GAAsB,oBAAXC,OAA0B,OAAOA,OAC5C,QAAsB,IAAXF,EAA0B,OAAOA,EAC5C,MAAM,IAAIG,MAAM,kCAGJC,GAEbC,EAAOC,QAAUA,EAAUN,EAAOO,MAG9BP,EAAOO,QACVD,UAAkBN,EAAOO,MAAMC,KAAKR,IAGrCM,UAAkBN,EAAOS,QACzBH,UAAkBN,EAAOU,QACzBJ,WAAmBN,EAAOW","names":["global","self","window","Error","getGlobal","module","exports","fetch","bind","Headers","Request","Response"],"sources":["./node_modules/node-fetch/browser.js"],"sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":"webpack:///","file":"42.6753b67c1bd2cb98.js"}