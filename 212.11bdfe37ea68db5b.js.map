{"version":3,"file":"212.11bdfe37ea68db5b.js","mappings":"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","names":["DomainStateService","active_item","this","_state","constructor","_dialog","_loading","BehaviorSubject","_changed","item","loading","asObservable","users","combineLatest","pipe","filter","_","PlaceDomain","switchMap","queryUsers","authority_id","id","map","data","catchError","shareReplay","auth_sources","q","querySAMLSources","queryOAuthSources","queryLDAPSources","list","forEach","array","concat","applications","queryApplications","counts","_ref","_asyncToGenerator","details","Promise","all","total","toPromise","saml","oauth","ldap","_x","apply","arguments","update","domain","_this","updateDomain","replaceItem","editApplication","_this2","PlaceApplication","owner_id","ref","open","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","name","save","i","client_id","updateApplication","addApplication","race","componentInstance","event","first","reason","afterClosed","next","Date","valueOf","deleteApplication","_this3","openConfirmModal","title","content","icon","type","class","err","removeApplication","catch","close","notifyError","responseText","message","notifySuccess","editAuthSource","_this4","AuthSourceModalComponent","auth_source","deleteAuthSource","_this5","PlaceSAMLSource","removeSAMLSource","PlaceOAuthSource","removeOAuthSource","removeLDAPSource","static","t","i0","i1","i2","core","Yz7","factory","ɵfac","providedIn","item_r4","_r6","$implicit","ctx_r5","show_secret","copySecret","ctx_r7","ctx_r8","redirect_uri","uid","ctx_r3","secret","scopes","_c12","_c13","DomainApplicationsComponent_div_2_div_14_Template","ctx_r0","DomainApplicationsComponent","_service","newApplication","copyToClipboard","notifyInfo","Xpm","selectors","decls","vars","consts","i18n_0","$localize","ctx","DomainApplicationsComponent_div_2_Template","DomainApplicationsComponent_ng_template_4_Template","tmp_0_0","length","_r2","_c8","_c9","DomainAuthenticationComponent_div_2_div_10_Template","DomainAuthenticationComponent","source_types","newAuthSource","source","DomainAuthenticationComponent_div_2_Template","DomainAuthenticationComponent_ng_template_4_Template","_c6","email","sys_admin","support","DomainUsersComponent_div_0_div_9_Template","DomainUsersComponent","DomainUsersComponent_div_0_Template","DomainUsersComponent_ng_template_2_Template","_r4","saveChanges","$event","index","DomainAboutComponent_section_2_settings_form_field_6_Template","DomainAboutComponent_section_2_settings_form_field_7_Template","form","DomainAboutComponent","AsyncHandler","super","FormGroup","config","FormControl","validateJSONString","internals","ngOnInit","subscription","subscribe","loadForm","valid","JSON","parse","value","patchValue","stringify","undefined","features","template","rf","DomainAboutComponent_section_2_Template","_r3","_r1","ctx_r2","scroll","scrollTop","tab_list","ROUTES","path","component","DomainsComponent","extensions","extensionsForItem","_item","open_menu","newItem","create","updateTabList","count","c","DomainsComponent_ng_container_8_Template","children","ExtensionOutletComponent","redirectTo","AppDomainsModule","oAB","cJS","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","forChild","SharedContentModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/domains/domain-state.service.ts","./apps/backoffice/src/app/domains/domain-applications.component.ts","./apps/backoffice/src/app/domains/domain-authentication.component.ts","./apps/backoffice/src/app/domains/domain-users.component.ts","./apps/backoffice/src/app/domains/domain-about.component.ts","./apps/backoffice/src/app/domains/domains.component.ts","./apps/backoffice/src/app/domains/domains.routes.ts","./apps/backoffice/src/app/domains/domains.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addApplication,\n    PlaceApplication,\n    PlaceDomain,\n    PlaceLDAPSource,\n    PlaceOAuthSource,\n    PlaceSAMLSource,\n    PlaceUser,\n    queryApplications,\n    queryLDAPSources,\n    queryOAuthSources,\n    querySAMLSources,\n    queryUsers,\n    removeApplication,\n    removeLDAPSource,\n    removeOAuthSource,\n    removeSAMLSource,\n    updateApplication,\n    updateDomain,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, merge, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    share,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { AuthSourceModalComponent } from '../overlays/auth-source-modal/auth-source-modal.component';\nimport { ItemCreateUpdateModalComponent } from '../overlays/item-modal/item-modal.component';\n\nexport type PlaceAuthSource =\n    | PlaceOAuthSource\n    | PlaceSAMLSource\n    | PlaceLDAPSource;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DomainStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _changed = new BehaviorSubject<number>(0);\n\n    public readonly item: Observable<PlaceDomain> = this._state.item as any;\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly users: Observable<PlaceUser[]> = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => queryUsers({ authority_id: item.id } as any)),\n        map((_) => _.data),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly auth_sources: Observable<PlaceAuthSource[]> = combineLatest(\n        [this._changed, this.item]\n    ).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => {\n            const q = { authority_id: item.id };\n            return combineLatest([\n                querySAMLSources(q as any).pipe(map((_) => _.data)),\n                queryOAuthSources(q as any).pipe(map((_) => _.data)),\n                queryLDAPSources(q as any).pipe(map((_) => _.data)),\n            ]);\n        }),\n        map((_) => {\n            let list = [];\n            _.forEach((array) => (list = list.concat(array)));\n            return list;\n        }),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly applications: Observable<PlaceApplication[]> =\n        combineLatest([this._changed, this.item]).pipe(\n            filter(([_, item]) => item instanceof PlaceDomain),\n            switchMap(([_, item]) =>\n                queryApplications({ authority_id: item.id } as any)\n            ),\n            map((_) => _.data),\n            catchError((_) => []),\n            shareReplay(1)\n        );\n\n    public readonly counts = combineLatest([this._changed, this.item]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(async ([_, item]) => {\n            const q = { authority_id: item?.id };\n            const details = await Promise.all([\n                queryApplications(q as any)\n                    .pipe(map((_) => _.total))\n                    .toPromise(),\n                combineLatest([\n                    querySAMLSources(q as any),\n                    queryOAuthSources(q as any),\n                    queryLDAPSources(q as any),\n                ])\n                    .pipe(\n                        map(\n                            ([saml, oauth, ldap]) =>\n                                saml.total + oauth.total + ldap.total\n                        )\n                    )\n                    .toPromise(),\n                queryUsers(q as any)\n                    .pipe(map((_) => _.total))\n                    .toPromise(),\n            ]);\n            const [applications, auth_sources, users] = details;\n            return {\n                applications,\n                auth_sources: auth_sources || 0,\n                users,\n            };\n        }),\n        shareReplay(1)\n    );\n\n    public get active_item() {\n        return this._state.active_item;\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async update(domain: PlaceDomain) {\n        const item = await updateDomain(domain.id, domain).toPromise();\n        this._state.replaceItem(item);\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public async editApplication(item?: PlaceApplication) {\n        item = item || new PlaceApplication({ owner_id: this.active_item.id });\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Application',\n                save: (i) => {\n                    delete i.client_id;\n                    return i.id\n                        ? updateApplication(i.id, i)\n                        : addApplication(i);\n                },\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details) return;\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Remove application from domain\n     * @param item Application to delete\n     */\n    public async deleteApplication(item: PlaceApplication) {\n        const details = await openConfirmModal(\n            {\n                title: `Delete application`,\n                content: `<p>Are you sure you want delete the application ${item.name}?</p><p>Configuration will be <strong>immediately</strong> updated</p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Deleting domain application...');\n        const err = await removeApplication(item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing domain application. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed domain application.');\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public async editAuthSource(item?: PlaceAuthSource) {\n        const ref = this._dialog.open(AuthSourceModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                auth_source: item,\n                domain: this.active_item,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details) return;\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Remove application from domain\n     * @param item Application to delete\n     */\n    public async deleteAuthSource(item: PlaceAuthSource) {\n        const details = await openConfirmModal(\n            {\n                title: `Delete auth source`,\n                content: `<p>Are you sure you want delete this auth source?</p><p>Deleting this will remove this auth source <strong>immediately</strong></p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Deleting domain auth source...');\n        const method =\n            item instanceof PlaceSAMLSource\n                ? removeSAMLSource\n                : item instanceof PlaceOAuthSource\n                ? removeOAuthSource\n                : removeLDAPSource;\n        const err = await method(item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing domain auth source. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed domain auth source.');\n        this._changed.next(new Date().valueOf());\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain, PlaceApplication } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport { copyToClipboard } from 'apps/backoffice/src/app/common/general';\nimport { notifyInfo } from 'apps/backoffice/src/app/common/notifications';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-applications',\n    template: `\n        <button\n            btn\n            class=\"w-full sm:w-40 mb-4\"\n            (click)=\"newApplication()\"\n            i18n=\"@@newAction\"\n        >\n            New Application\n        </button>\n        <div\n            role=\"table\"\n            class=\"overflow-x-auto\"\n            *ngIf=\"(applications | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"w-40 p-2\" i18n=\"@@applicationTableName\">Name</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@applicationTableRedirect\">\n                    Redirect\n                </div>\n                <div class=\"w-48 p-2\" i18n=\"@@applicationTableClientId\">\n                    Client ID\n                </div>\n                <div class=\"w-48 p-2\" i18n=\"@@applicationTableClientSecret\">\n                    Secret\n                </div>\n                <div class=\"w-24 p-2\" i18n=\"@@applicationTableScope\">Scope</div>\n                <div class=\"w-24\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of applications | async\">\n                    <div class=\"w-40 p-2\" [matTooltip]=\"item.id\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"flex-1 p-2 underline overflow-hidden\">\n                        <a [href]=\"item.redirect_uri\" class=\"truncate\">{{\n                            item.redirect_uri\n                        }}</a>\n                    </div>\n                    <div class=\"w-48 p-2 truncate text-xs\">{{ item.uid }}</div>\n                    <div\n                        class=\"w-48 p-2 truncate underline text-center text-xs\"\n                        (click)=\"\n                            !show_secret[item.id]\n                                ? (show_secret[item.id] = true)\n                                : copySecret(item)\n                        \"\n                    >\n                        {{ show_secret[item.id] ? item.secret : 'Show' }}\n                    </div>\n                    <div class=\"w-24 p-2\">{{ item.scopes }}</div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button btn icon (click)=\"editApplication(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button btn icon (click)=\"deleteApplication(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div empty-state>\n                <p i18n=\"@@applicationTableEmpty\">No applications found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [role='table'] > div {\n                min-width: 56rem;\n            }\n        `,\n    ],\n})\nexport class DomainApplicationsComponent {\n    /** List of applications associated with the active domain */\n    public readonly applications = this._service.applications;\n\n    public show_secret: HashMap<boolean> = {};\n\n    public readonly newApplication = () => this._service.editApplication();\n    public readonly editApplication = (item) =>\n        this._service.editApplication(item);\n    public readonly deleteApplication = (item) =>\n        this._service.deleteApplication(item);\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n\n    public copySecret(item: PlaceApplication) {\n        this.show_secret[item.id] = false;\n        copyToClipboard(item.secret);\n        notifyInfo('Copied client secret to clipboard');\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-authentication',\n    template: `\n        <button\n            btn\n            class=\"w-full sm:w-40 mb-4\"\n            (click)=\"newAuthSource()\"\n            i18n=\"@@newAction\"\n        >\n            New Auth Source\n        </button>\n        <div\n            role=\"table\"\n            class=\"min-w-[36rem]\"\n            *ngIf=\"(auth_sources | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"w-48 p-2\" i18n=\"@@authTableID\">ID</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@authTableName\">Name</div>\n                <div class=\"w-32 p-2\" i18n=\"@@authTableType\">Type</div>\n                <div class=\"w-24 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of auth_sources | async\">\n                    <div class=\"w-48 p-2 mono text-xs\">\n                        {{ item.id }}\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"w-32 p-2 uppercase\">{{ item.type }}</div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button btn icon (click)=\"editAuthSource(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button btn icon (click)=\"deleteAuthSource(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div empty-state>\n                <p i18n=\"@@authTableEmpty\">No authentication sources found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainAuthenticationComponent {\n    /** List of auth sources associated with the active domain */\n    public readonly auth_sources = this._service.auth_sources;\n    /** Mapping of auth sources to their type */\n    public source_types: HashMap<'oauth' | 'saml' | 'ldap'> = {};\n\n    public readonly newAuthSource = () => this._service.editAuthSource();\n    public readonly editAuthSource = (source) =>\n        this._service.editAuthSource(source);\n    public readonly deleteAuthSource = (source) =>\n        this._service.deleteAuthSource(source);\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-users',\n    template: `\n        <div role=\"table\" *ngIf=\"(users | async)?.length; else empty_state\">\n            <div table-head>\n                <div class=\"w-64 p-2\" i18n=\"@@userTableName\">Name</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@userTableEmail\">Email</div>\n                <div class=\"w-24 p-2\" i18n=\"@@userTableRole\">Role</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of users | async\">\n                    <div class=\"w-64 p-2 underline\">\n                        <a\n                            [routerLink]=\"['/users', item.id]\"\n                            [matTooltip]=\"item.id\"\n                            matTooltipPosition=\"right\"\n                        >\n                            {{ item.name }}\n                        </a>\n                    </div>\n                    <div class=\"flex-1 p-2 underline\">\n                        <a [href]=\"'mailto:' + item.email\">{{ item.email }}</a>\n                    </div>\n                    <div class=\"w-24 p-2\">\n                        <code [class.text-opacity-20]=\"!item.sys_admin && !item.support\">\n                            {{ item.sys_admin ? 'Admin' : item.support ? 'Support' : 'None' }}\n                        </code>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <p i18n=\"@@userTableEmpty\">No users associated with domain</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainUsersComponent {\n    public readonly users = this._service.users;\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport { validateJSONString } from 'apps/backoffice/src/app/common/validation';\nimport { DomainStateService } from './domain-state.service';\nimport { notifySuccess } from '../common/notifications';\n\n@Component({\n    selector: 'app-domain-about',\n    template: `\n        <h3 class=\"text-lg font-medium mb-2\">Settings</h3>\n        <section *ngIf=\"form\" [formGroup]=\"form\">\n            <button btn matRipple (click)=\"saveChanges()\">Save Changes</button>\n            <mat-tab-group [(selectedIndex)]=\"index\">\n                <mat-tab label=\"Config\"> </mat-tab>\n                <mat-tab label=\"Internals\"> </mat-tab>\n            </mat-tab-group>\n            <settings-form-field\n                *ngIf=\"index !== 1\"\n                formControlName=\"config\"\n                lang=\"json\"\n                [readonly]=\"false\"\n            ></settings-form-field>\n            <settings-form-field\n                *ngIf=\"index === 1\"\n                formControlName=\"internals\"\n                lang=\"json\"\n                [readonly]=\"false\"\n            ></settings-form-field>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainAboutComponent extends AsyncHandler implements OnInit {\n    /** Form group for edit domain settings */\n    public form = new FormGroup({\n        config: new FormControl('', [validateJSONString]),\n        internals: new FormControl('', [validateJSONString]),\n    });\n    /** Index of the active tab */\n    public index: number;\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((_) => this.loadForm())\n        );\n    }\n\n    /** Save changes to the form fields */\n    public async saveChanges() {\n        if (!this.form.valid) return;\n        const domain = new PlaceDomain({\n            ...this.item,\n            config: JSON.parse(this.form.value.config),\n            internals: JSON.parse(this.form.value.internals),\n        });\n        await this._service.update(domain);\n        notifySuccess('Successfully updated domain settings.');\n    }\n\n    /** Load form fields for active item */\n    private loadForm(): void {\n        this.form.patchValue({\n            internals: JSON.stringify(this.item.internals, undefined, 4),\n            config: JSON.stringify(this.item.config, undefined, 4),\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { extensionsForItem } from '../common/api';\nimport { AsyncHandler } from '../common/async-handler.class';\nimport { ActiveItemService } from '../common/item.service';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'new-domains-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-base-200  bg-base-100 \"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <item-sidebar\n                class=\"hidden sm:block\"\n                [route]=\"name\"\n                title=\"Domains\"\n            ></item-sidebar>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                <item-selection\n                    class=\"z-20 sm:hidden\"\n                    [route]=\"name\"\n                    title=\"Domains\"\n                >\n                    <button\n                        btn\n                        icon\n                        class=\"sm:hidden mr-2\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </item-selection>\n                <div class=\"flex flex-col flex-1 h-1/2\">\n                    <ng-container *ngIf=\"item?.id\">\n                        <item-details\n                            [can_edit]=\"true\"\n                            [item]=\"item\"\n                            type=\"Domain\"\n                        ></item-details>\n                        <item-tablist\n                            [base]=\"name\"\n                            [tabs]=\"tab_list\"\n                            [scrolled]=\"scroll > 0\"\n                            class=\"z-10\"\n                        ></item-tablist>\n                        <div\n                            #el\n                            class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                            (scroll)=\"scroll = el.scrollTop\"\n                        >\n                            <router-outlet></router-outlet>\n                        </div>\n                    </ng-container>\n                </div>\n                <button\n                    class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-secondary rounded-lg shadow z-30 text-secondary-content\"\n                    matTooltip=\"New domain\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"newItem()\"\n                >\n                    <app-icon\n                        [className]=\"'backoffice-plus'\"\n                        class=\"text-3xl\"\n                    ></app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DomainsComponent extends AsyncHandler {\n    public readonly name = 'domains';\n\n    public open_menu = false;\n    public tab_list = [];\n\n    public readonly newItem = () => this._item.create();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    constructor(\n        private _service: DomainStateService,\n        protected _item: ActiveItemService\n    ) {\n        super();\n    }\n\n    public updateTabList(count: Record<string, number>) {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'applications',\n                name: 'Applications',\n                count: count.applications || 0,\n                icon: { class: 'backoffice-publish' },\n            },\n            {\n                id: 'authentication',\n                name: 'Authentication',\n                count: count.auth_sources || 0,\n                icon: { class: 'backoffice-lock-open' },\n            },\n            {\n                id: 'users',\n                name: 'Users',\n                count: count.users || 0,\n                icon: { class: 'backoffice-users' },\n            },\n        ].concat(this.extensions);\n    }\n\n    public ngOnInit(): void {\n        this.updateTabList({});\n        this.subscription(\n            'item',\n            this._service.counts.subscribe((c) => this.updateTabList(c as any))\n        );\n    }\n}\n","import { Routes } from '@angular/router';\nimport { DomainApplicationsComponent } from './domain-applications.component';\nimport { DomainAuthenticationComponent } from './domain-authentication.component';\nimport { DomainUsersComponent } from './domain-users.component';\nimport { DomainAboutComponent } from './domain-about.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { DomainsComponent } from './domains.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: DomainsComponent,\n        children: [\n            { path: 'about', component: DomainAboutComponent },\n            { path: 'applications', component: DomainApplicationsComponent },\n            { path: 'authentication', component: DomainAuthenticationComponent },\n            { path: 'users', component: DomainUsersComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './domains.routes';\n\nimport { DomainApplicationsComponent } from './domain-applications.component';\nimport { DomainAuthenticationComponent } from './domain-authentication.component';\nimport { DomainUsersComponent } from './domain-users.component';\nimport { DomainAboutComponent } from './domain-about.component';\n\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { DomainsComponent } from './domains.component';\n\n@NgModule({\n    declarations: [\n        DomainApplicationsComponent,\n        DomainAuthenticationComponent,\n        DomainUsersComponent,\n        DomainAboutComponent,\n        DomainsComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppDomainsModule {}\n"],"x_google_ignoreList":[]}