{"version":3,"sources":["./apps/backoffice/src/app/engine/schema-state.service.ts"],"names":["SchemaStateService","_schemas","schemas","this","asObservable","loadSchemas","id","schema","getValue","find","_","JSON","parse","schema_list","query_params","fn","path","pipe","data","toPromise","console","log","sort","a","b","name","localeCompare","next","details","form_data","new_schema","method","filter"],"mappings":"wKAgBO,Y,MAAMA,EAKT,cAJQ,KAAAC,SAAW,IAAI,IAA8B,IAErC,KAAAC,QAAUC,KAAKF,SAASG,eAGpCD,KAAKE,cAGF,UAAUC,GACb,MACMC,EADcJ,KAAKF,SAASO,WACPC,KAAMC,GAAMA,EAAEJ,KAAOA,GAChD,OAAKC,EACEI,KAAKC,MAAML,EAAOA,QAAU,MADf,KAIX,c,8CACT,MAAMM,QAAoB,SAAkB,CACxCC,aAAc,GACdC,GAAKL,GAAMA,EACXM,KAAM,WAELC,MAAK,OAAKP,GAAMA,EAAEQ,OAClBC,YACLC,QAAQC,IAAI,eAAgBR,GAC5BA,EAAYS,KAAK,CAACC,EAAGC,KAAK,MAAC,OAAM,QAAN,EAAAD,EAAEE,YAAI,eAAEC,cAAcF,EAAEC,QACnDtB,KAAKF,SAAS0B,KAAKd,KAGV,WAAWN,G,8CACpB,IAAIM,EAAcV,KAAKF,SAASO,WAChC,MAAMoB,EAAU,CACZd,aAAc,GACdC,GAAKL,GAAMA,EACXmB,UAAWtB,EACXS,KAAM,UAEJc,QAAoBvB,EAAOD,IAC3B,SAAM,+BACCsB,GAAO,CACVtB,GAAIC,EAAOD,GACXyB,OAAQ,YAEZ,SAAM,iBAAkBH,KAC5BT,YACFN,EAAc,IACPA,EAAYmB,OAAQtB,GAAMH,EAAOD,KAAOI,EAAEJ,IAC7CwB,GAEJjB,EAAYS,KAAK,CAACC,EAAGC,KAAK,MAAC,OAAM,QAAN,EAAAD,EAAEE,YAAI,eAAEC,cAAcF,EAAEC,QACnDtB,KAAKF,SAAS0B,KAAKd,M,6CAlDdb,I,0BAAAA,EAAkB,QAAlBA,EAAkB,qBAFf,S,GAET","file":"592.274a185e3267e47982ad.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { create, query, update } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface JsonSchema {\n    id?: string;\n    name: string;\n    description?: string;\n    schema: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SchemaStateService {\n    private _schemas = new BehaviorSubject<JsonSchema[]>([]);\n\n    public readonly schemas = this._schemas.asObservable();\n\n    constructor() {\n        this.loadSchemas();\n    }\n\n    public getSchema(id: string): HashMap {\n        const schema_list = this._schemas.getValue();\n        const schema = schema_list.find((_) => _.id === id);\n        if (!schema) return null;\n        return JSON.parse(schema.schema || '{}');\n    }\n\n    public async loadSchemas() {\n        const schema_list = await query<JsonSchema>({\n            query_params: {},\n            fn: (_) => _ as any,\n            path: 'schema',\n        })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        console.log('Schema List:', schema_list);\n        schema_list.sort((a, b) => a.name?.localeCompare(b.name));\n        this._schemas.next(schema_list);\n    }\n\n    public async saveSchema(schema: JsonSchema) {\n        let schema_list = this._schemas.getValue();\n        const details = {\n            query_params: {},\n            fn: (_) => _,\n            form_data: schema,\n            path: 'schema',\n        };\n        const new_schema = await (schema.id\n            ? update<JsonSchema>({\n                  ...details,\n                  id: schema.id,\n                  method: 'patch',\n              })\n            : create<JsonSchema>({ ...details })\n        ).toPromise();\n        schema_list = [\n            ...schema_list.filter((_) => schema.id !== _.id),\n            new_schema,\n        ];\n        schema_list.sort((a, b) => a.name?.localeCompare(b.name));\n        this._schemas.next(schema_list);\n    }\n}\n"],"sourceRoot":"webpack:///"}