{"version":3,"mappings":"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","names":["ZonesStateService","constructor","_service","_dialog","this","BehaviorSubject","_loading","asObservable","item","combineLatest","all_item","_change","pipe","debounceTime","switchMap","d","__awaiter","PlaceZone","next","details","Promise","all","querySystems","zone_id","id","limit","map","total","toPromise","catch","_","listZoneTriggers","listMetadata","length","queryZones","parent","systems","triggers","metadata","children","list","data","catchError","shareReplay","of","setTimeout","getValue","active_item","selectTrigger","ref","open","SelectItemModalComponent","service_name","query_fn","queryTriggers","q","resp","race","componentInstance","event","first","reason","afterClosed","close","zone","addTrigger","replaceItem","trigger","updateZone","Object","unique","removeTrigger","openConfirmModal","title","content","name","icon","type","class","filter","t","err","notifyError","statusText","message","notifySuccess","i0","factory","ZonesComponent","BaseClass","_route","_router","super","extensions","extensionsForItem","updateTabList","tab_list","count","concat","ngOnInit","subscription","counts","subscribe","selectors","ZoneAboutComponent","parsed_description","marked","e","_a","description","tag_list","tags","$localize","ZoneSystemsComponent","_state","filter$","search","toLowerCase","sys","includes","ctx","ctx_r9","oxw","ZoneTriggersComponent","loading","ZoneChildrenComponent","zones","ZoneMetadataComponent","ROUTES","path","component","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppZonesModule","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule"],"sources":["./apps/backoffice/src/app/zones/zones-state.service.ts","./apps/backoffice/src/app/zones/zones.component.ts","./apps/backoffice/src/app/zones/zone-about.component.ts","./apps/backoffice/src/app/zones/zone-systems.component.ts","./apps/backoffice/src/app/zones/zone-triggers.component.ts","./apps/backoffice/src/app/zones/zone-children.component.ts","./apps/backoffice/src/app/zones/zone-metadata.component.ts","./apps/backoffice/src/app/zones/zones.routes.ts","./apps/backoffice/src/app/zones/zones.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    listZoneTriggers,\n    PlaceMetadata,\n    PlaceTrigger,\n    PlaceZone,\n    querySystems,\n    queryTriggers,\n    queryZones,\n    listMetadata,\n    updateZone,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, debounceTime, first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal, unique } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData,\n} from '../overlays/select-item-modal/select-item-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ZonesStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _change = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly item = this._service.item;\n\n    public readonly counts = combineLatest([this._service.all_item, this._change]).pipe(\n        debounceTime(300),\n        switchMap(async (d) => {\n            const [item] = d;\n            if (!(item instanceof PlaceZone)) return {};\n            this._loading.next(true);\n            const details = await Promise.all([\n                querySystems({ zone_id: item.id, limit: 1 })\n                    .pipe(map((d) => d.total))\n                    .toPromise()\n                    .catch((_) => 0),\n                listZoneTriggers(item.id)\n                    .pipe(map((d) => d.total))\n                    .toPromise()\n                    .catch((_) => 0),\n                listMetadata(item.id)\n                    .pipe(map((d) => d.length))\n                    .toPromise()\n                    .catch((_) => 0),\n                queryZones({ parent: item.id, limit: 1 })\n                    .pipe(map((d) => d.total))\n                    .toPromise()\n                    .catch((_) => 0),\n            ]);\n            const [systems, triggers, metadata, children] = details;\n            this._loading.next(false);\n            return {\n                systems,\n                triggers,\n                metadata,\n                children,\n            };\n        })\n    );\n\n    public readonly systems = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceZone)) return [];\n            return querySystems({ zone_id: item.id });\n        }),\n        map((list) => list.data),\n        catchError((_) => []),\n        shareReplay()\n    );\n\n    public readonly triggers = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceZone)) return [];\n            return listZoneTriggers(item.id);\n        }),\n        map((list) => list.data),\n        catchError((_) => []),\n        shareReplay()\n    );\n\n    public readonly metadata: Observable<PlaceMetadata[]> = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceZone)) return of([]);\n            return listMetadata(item.id);\n        }),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly children = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceZone)) return [];\n            return queryZones({ parent: item.id });\n        }),\n        map((list) => list.data),\n        catchError((_) => []),\n        shareReplay()\n    );\n\n    public get active_item(): PlaceZone {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService, private _dialog: MatDialog) {\n        setTimeout(() => this._change.next(!this._change.getValue()), 1000);\n    }\n\n    public async selectTrigger() {\n        const ref = this._dialog.open<SelectItemModalComponent, SelectItemModalData>(\n            SelectItemModalComponent,\n            {\n                data: {\n                    service_name: 'Triggers',\n                    query_fn: (_) => queryTriggers({ q: _ }).pipe(map((resp) => resp.data)),\n                },\n            }\n        );\n        const details = await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'action')).toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details || !details.reason) return ref.close();\n        const zone = await this.addTrigger(ref.componentInstance.item);\n        ref.close();\n        if (zone) this._service.replaceItem(zone);\n    }\n\n    public async addTrigger(trigger: PlaceTrigger) {\n        return updateZone(this.active_item.id, {\n            ...this.active_item,\n            triggers: unique([...this.active_item.triggers, trigger.id]),\n        }).toPromise();\n    }\n\n    public async removeTrigger(trigger: PlaceTrigger) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger`,\n                content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        const zone = await updateZone(this.active_item.id, {\n            ...this.active_item,\n            triggers: this.active_item.triggers.filter((t) => t !== trigger.id),\n        })\n            .toPromise()\n            .catch((err) => {\n                details.close();\n                notifyError(\n                    `Error removing trigger ${trigger.id} from zone. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        details.close();\n        notifySuccess(`Successfully removed trigger from zone.`);\n        if (zone) this._service.replaceItem(zone);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { ZonesStateService } from './zones-state.service';\nimport { HashMap } from '../common/types';\n\n@Component({\n    selector: 'app-zones',\n    template: `\n        <div class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\">\n            <sidebar\n                heading=\"Zones\"\n                name=\"zones\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"zone\"\n                route=\"zones\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class ZonesComponent extends BaseClass implements OnInit {\n    public readonly name = 'zones';\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(details: HashMap<number>) {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n            {\n                id: 'systems',\n                name: 'Systems',\n                count: details.systems,\n                icon: { class: 'backoffice-documents' },\n            },\n            {\n                id: 'triggers',\n                name: 'Triggers',\n                count: details.triggers,\n                icon: { class: 'backoffice-stopwatch' },\n            },\n            {\n                id: 'metadata',\n                name: 'Metadata',\n                count: details.metadata,\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'children',\n                name: 'Children',\n                count: details.children,\n                icon: { class: 'backoffice-flow-tree' },\n            },\n            { id: 'history', name: 'Settings History', icon: { class: 'backoffice-clock' } },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: ZonesStateService,\n        protected _route: ActivatedRoute,\n        protected _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.counts.subscribe((details) => this.updateTabList(details))\n        );\n        this.updateTabList({});\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceZone, PlaceSystem } from '@placeos/ts-client';\n\nimport { ZonesStateService } from './zones-state.service';\n\nimport { marked } from 'marked';\n\n@Component({\n    selector: 'zone-about',\n    template: `\n        <header\n            class=\"font-medium text-lg\"\n            *ngIf=\"(systems | async)?.length\"\n            i18n=\"@@execHeader\"\n        >\n            Execute Command\n        </header>\n        <section *ngIf=\"(systems | async)?.length\" class=\"mb-4\">\n            <mat-form-field appearance=\"outline\" class=\"h-12\">\n                <mat-select\n                    [(ngModel)]=\"active_system\"\n                    placeholder=\"Select system\"\n                >\n                    <mat-option\n                        *ngFor=\"let system of systems | async\"\n                        [value]=\"system\"\n                    >\n                        {{ system.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <execute-method-field\n                *ngIf=\"active_system && active_system.id\"\n                [system]=\"active_system\"\n            ></execute-method-field>\n        </section>\n        <section class=\"space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.parent_id\">\n                <label i18n=\"@@zoneParentLabel\">Parent ID:</label>\n                <div class=\"value underline\">\n                    <a [routerLink]=\"['/zones', item?.parent_id, 'about']\">{{\n                        item?.parent_id\n                    }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@zoneCreatedAtLabel\">Created:</label>\n                <div class=\"value\">\n                    {{ item?.created_at * 1000 | dateFrom }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.updated_at\">\n                <label i18n=\"@@zoneUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">\n                    {{ item?.updated_at * 1000 | dateFrom }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.location\">\n                <label i18n=\"@@zoneLocationLabel\">Location:</label>\n                <div class=\"value\">{{ item?.location }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.code\">\n                <label i18n=\"@@zoneCodeLabel\">Code:</label>\n                <div class=\"value\">{{ item?.code }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.type\">\n                <label i18n=\"@@zoneTypeLabel\">Type:&nbsp;</label>\n                <div class=\"value\">{{ item?.type }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.count\">\n                <label i18n=\"@@zoneCountLabel\">Count:</label>\n                <div class=\"value\">{{ item?.count }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.capacity\">\n                <label i18n=\"@@zoneCapacityLabel\">Capacity:</label>\n                <div class=\"value\">{{ item?.capacity }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.map_id\">\n                <label i18n=\"@@zoneMapLabel\">Map:</label>\n                <a class=\"underline\" [href]=\"item?.map_id\">{{\n                    item?.map_id\n                }}</a>\n            </div>\n        </section>\n        <header\n            class=\"font-medium text-lg\"\n            *ngIf=\"item?.description\"\n            i18n=\"@@descriptionLabel\"\n        >\n            Description\n        </header>\n        <section\n            class=\"description\"\n            *ngIf=\"item?.description\"\n            [innerHTML]=\"parsed_description\"\n        ></section>\n        <section class=\"flex space-x-2 mt-1\" *ngIf=\"item && tag_list\">\n            <label class=\"my-1\" for=\"tags\" i18n=\"@@zoneTagsLabel\">Tags:</label>\n            <div\n                class=\"value\"\n                *ngIf=\"tag_list && tag_list.length; else empty_tag_state\"\n            >\n                <mat-chip-list name=\"tags\">\n                    <mat-chip *ngFor=\"let tag of tag_list\">{{ tag }}</mat-chip>\n                </mat-chip-list>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">\n            Settings\n        </header>\n        <section *ngIf=\"item?.settings; else load_state\">\n            <a-settings-form\n                [merge]=\"true\"\n                [id]=\"item?.id\"\n                [settings]=\"item?.settings\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@zoneLoadingLabel\">Loading zone settings...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_tag_state>\n            <p class=\"text-center py-1\" i18n=\"@@zoneTagsEmpty\">\n                &lt;No Tags&gt;\n            </p>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class ZoneAboutComponent {\n    /** List of associated systems */\n    public readonly systems = this._service.systems;\n    /** Selected system */\n    public active_system: PlaceSystem;\n\n    public get item(): PlaceZone {\n        return this._service.active_item as any;\n    }\n\n    public get parsed_description() {\n        return this.item ? marked(this.item?.description) : '';\n    }\n\n    /** List of tags associated with the zone */\n    public get tag_list(): string[] {\n        return this.item ? this.item?.tags : [];\n    }\n\n    constructor(private _service: ZonesStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ZonesStateService } from './zones-state.service';\n\n@Component({\n    selector: 'zone-systems',\n    template: `\n        <div class=\"flex\">\n            <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                <app-icon\n                    matPrefix\n                    class=\"text-lg\"\n                    className=\"backoffice-magnifying-glass\"\n                ></app-icon>\n                <input\n                    matInput\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Systems\"\n                />\n            </mat-form-field>\n        </div>\n        <div role=\"table\" *ngIf=\"(systems | async)?.length; else empty_state\">\n            <div table-head>\n                <div class=\"flex-1 p-2\" i18n=\"@@systemTableName\">Name</div>\n                <div class=\"w-28 p-2\" i18n=\"@@systemTablePanelCount\">No. Modules</div>\n                <div class=\"w-32 p-2\" i18n=\"@@systemTableCreated\">Created</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of systems | async\">\n                    <div class=\"flex-1 p-2 underline\">\n                        <a\n                            [routerLink]=\"['/systems', item.id]\"\n                            [matTooltip]=\"item.id\"\n                            matTooltipPosition=\"right\"\n                        >\n                            {{ item.name }}\n                        </a>\n                    </div>\n                    <div class=\"w-28 p-2\">{{ item.modules.length }}</div>\n                    <div class=\"w-32 p-2\">{{ item?.created_at * 1000 | dateFrom }}</div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <p i18n=\"@@systemTableEmpty\">No systems found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ZoneSystemsComponent {\n    public readonly filter$ = new BehaviorSubject<string>('');\n\n    public readonly systems = combineLatest([this.filter$, this._state.systems]).pipe(\n        map((details) => {\n            const [filter, systems] = details;\n            const search = filter.toLowerCase();\n            return !filter\n                ? systems\n                : systems.filter((sys) => sys.name.toLowerCase().includes(search));\n        })\n    );\n\n    constructor(private _state: ZonesStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ZonesStateService } from './zones-state.service';\n\n@Component({\n    selector: 'zone-triggers',\n    template: `\n        <section class=\"flex items-center mb-4 space-x-2\">\n            <button mat-button style=\"min-width: 8rem\" (click)=\"selectTrigger()\">\n                Add Trigger\n            </button>\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon matPrefix className=\"backoffice-magnifying-glass text-xl mr-2\"></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter triggers...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(triggers | async)?.length; else empty_state\"\n                >\n                    <div table-head>\n                        <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">Name</div>\n                        <div class=\"w-28 p-2\" i18n=\"@@descriptionLabel\">Added</div>\n                        <div class=\"w-32 p-2\"></div>\n                    </div>\n                    <div table-body class=\"overflow-y-auto\">\n                        <div table-row *ngFor=\"let trigger of triggers | async; let i = index\">\n                            <div flex class=\"flex-1 p-2\">\n                                <a class=\"truncate\" [routerLink]=\"['/triggers', trigger.id]\">{{\n                                    trigger.name\n                                }}</a>\n                            </div>\n                            <div desc class=\"w-28 p-2\">\n                                {{ +trigger.created_at * 1000 | dateFrom }}\n                            </div>\n                            <div class=\"w-32 p-2 items-center justify-center\">\n                                <button mat-icon-button (click)=\"deleteTrigger(trigger)\">\n                                    <app-icon className=\"backoffice-trash\"></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading triggers...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No triggers for zone</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ZoneTriggersComponent {\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** List of triggers associated with the zone */\n    public readonly triggers = combineLatest([this.filter$, this._state.triggers]).pipe(\n        map((details) => {\n            const [filter, systems] = details;\n            const search = filter.toLowerCase();\n            return !filter\n                ? systems\n                : systems.filter((sys) => sys.name.toLowerCase().includes(search));\n        })\n    );\n\n    public readonly loading = this._state.loading;\n\n    public readonly selectTrigger = () => this._state.selectTrigger();\n    public readonly deleteTrigger = (t) => this._state.removeTrigger(t);\n\n    public get item(): PlaceZone {\n        return this._state.active_item as any;\n    }\n\n    constructor(private _state: ZonesStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceZone } from '@placeos/ts-client';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ZonesStateService } from './zones-state.service';\n\n@Component({\n    selector: 'zone-children',\n    template: `\n        <div class=\"flex items-center\">\n            <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                <app-icon class=\"text-lg\" matPrefix className=\"backoffice-magnifying-glass\"></app-icon>\n                <input\n                    matInput\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Zones\"\n                    i18n-placeholder=\"@@zoneChildrenTableFilter\"\n                />\n            </mat-form-field>\n        </div>\n        <div role=\"table\" *ngIf=\"(children | async)?.length > 0; else empty_state\">\n            <div table-head>\n                <div class=\"flex-1 p-2\" i18n=\"@@zoneChildrenTableName\">Name</div>\n                <div class=\"w-3/5 p-2\" i18n=\"@@descriptionLabel\">Description</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of children | async\">\n                    <div class=\"flex-1 p-2 underline\">\n                        <a\n                            [routerLink]=\"['/zone', item.id]\"\n                            routerLinkActive=\"router-link-active\"\n                            [matTooltip]=\"item.id\"\n                        >\n                            {{ item.name }} (<span class=\"id\">{{ item.id }}</span\n                            >)\n                        </a>\n                    </div>\n                    <div class=\"w-3/5 p-2\">{{ item.description }}</div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\" i18n=\"@@zoneChildrenTableEmpty\">\n                No child zones found\n            </div>\n        </ng-template>\n    `,\n    styles: [`\n        :host {\n            padding: 1rem;\n            width: 100%;\n            height: 100%;\n        }\n    `],\n})\nexport class ZoneChildrenComponent {\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** List of triggers associated with the zone */\n    public readonly children = combineLatest([this.filter$, this._state.children]).pipe(\n        map((details) => {\n            const [filter, zones] = details;\n            const search = filter.toLowerCase();\n            return !filter ? zones : zones.filter((sys) => sys.name.toLowerCase().includes(search));\n        })\n    );\n\n    public readonly loading = this._state.loading;\n\n    public get item(): PlaceZone {\n        return this._state.active_item as any;\n    }\n\n    constructor(private _state: ZonesStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceZone } from '@placeos/ts-client';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'zone-metadata',\n    template: `\n        <div class=\"p-4\" *ngIf=\"item\">\n            <metadata-display [item]=\"item\"></metadata-display>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ZoneMetadataComponent {\n    public get item(): PlaceZone {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {}\n}\n","import { Routes } from '@angular/router';\n\nimport { ZonesComponent } from './zones.component';\nimport { ZoneAboutComponent } from './zone-about.component';\nimport { ZoneSystemsComponent } from './zone-systems.component';\nimport { ZoneTriggersComponent } from './zone-triggers.component';\nimport { ZoneChildrenComponent } from './zone-children.component';\nimport { ZoneMetadataComponent } from './zone-metadata.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: ZonesComponent,\n        children: [\n            { path: 'about', component: ZoneAboutComponent },\n            { path: 'systems', component: ZoneSystemsComponent },\n            { path: 'triggers', component: ZoneTriggersComponent },\n            { path: 'children', component: ZoneChildrenComponent },\n            { path: 'metadata', component: ZoneMetadataComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './zones.routes';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\nimport { ZonesComponent } from './zones.component';\nimport { ZoneAboutComponent } from './zone-about.component';\nimport { ZoneSystemsComponent } from './zone-systems.component';\nimport { ZoneTriggersComponent } from './zone-triggers.component';\nimport { ZoneChildrenComponent } from './zone-children.component';\nimport { ZoneMetadataComponent } from './zone-metadata.component';\n\n@NgModule({\n    declarations: [\n        ZonesComponent,\n        ZoneAboutComponent,\n        ZoneSystemsComponent,\n        ZoneTriggersComponent,\n        ZoneChildrenComponent,\n        ZoneMetadataComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppZonesModule {}\n"],"sourceRoot":"webpack:///","file":"886.563a6ca992482b32.js"}