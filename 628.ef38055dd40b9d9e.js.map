{"version":3,"file":"628.ef38055dd40b9d9e.js","mappings":"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","names":["TriggersComponent","BaseClass","constructor","_service","_dialog","super","this","show_options","extensions","extensionsForItem","active_item","name","updateTabList","tab_list","id","icon","class","count","instance_count","concat","ngOnInit","subscription","item","subscribe","loadValues","i","listTriggerInstances","toPromise","length","i0","selectors","TriggerStateService","pipe","switchMap","PlaceTrigger","of","shareReplay","editCondition","condition","template","ref","o","open","TriggerConditionModalComponent","width","height","data","trigger","JSON","parse","stringify","undefined","system","result","Promise","race","componentInstance","event","first","_","reason","afterClosed","replaceItem","metadata","editAction","action","TriggerActionModalComponent","reorderAction","type","fst","snd","details","openConfirmModal","title","content","n","list","actions","functions","mailers","moveItemInArray","loading","resp","updateTrigger","toJSON","catch","notifyError","response","message","notifySuccess","removeCondition","conditions","comparisons","time_dependents","index","findIndex","splice","err","close","removeAction","emails","removeTriggerFromSystem","removeSystemTrigger","responseText","factory","action_r29","$event","ROUTES","path","component","children","TriggerAboutComponent","querySystems","q","map","c","template_system","a","confirmReorder","previousIndex","currentIndex","$localize","i18n_22","ctx","TriggerInstancesComponent","instances","s","ExtensionOutletComponent","redirectTo","AppTriggersModule","CommonModule","FormsModule","RouterModule","SharedContentModule","DragDropModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/triggers/triggers.component.ts","./apps/backoffice/src/app/triggers/trigger-state.service.ts","./apps/backoffice/src/app/triggers/trigger-about.component.ts","./apps/backoffice/src/app/triggers/trigger-instances.component.ts","./apps/backoffice/src/app/triggers/triggers.routes.ts","./apps/backoffice/src/app/triggers/triggers.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listTriggerInstances, PlaceTrigger } from '@placeos/ts-client';\nimport { extensionsForItem } from '../common/api';\n\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\n\n@Component({\n    selector: 'app-triggers',\n    template: `\n        <div class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\">\n            <sidebar\n                heading=\"Triggers\"\n                name=\"triggers\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"trigger\"\n                route=\"triggers\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class TriggersComponent extends BaseClass {\n    /** Number of system triggers */\n    public instance_count: number;\n\n    public readonly name = 'triggers';\n\n    public readonly show_options = this._service.show_options;\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'instances',\n                name: 'Instances',\n                count: this.instance_count,\n                icon: { class: 'backoffice-documents' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: ActiveItemService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadValues(item as any);\n            })\n        );\n        this.updateTabList();\n    }\n\n    protected async loadValues(item: PlaceTrigger) {\n        if (!item) return;\n        // Get trigger count\n        this.instance_count = (\n            await listTriggerInstances(item.id).toPromise()\n        ).length;\n        this.updateTabList();\n    }\n}\n","import { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceSystem,\n    PlaceTrigger,\n    listTriggerInstances,\n    removeSystemTrigger,\n    TriggerComparison,\n    TriggerFunction,\n    TriggerMailer,\n    TriggerTimeCondition,\n    updateTrigger,\n} from '@placeos/ts-client';\nimport { Observable, of } from 'rxjs';\nimport { first, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\nimport {\n    TriggerActionModalComponent,\n    TriggerActionModalData,\n} from '../overlays/trigger-action-modal/trigger-action-modal.component';\nimport {\n    TriggerConditionData,\n    TriggerConditionModalComponent,\n} from '../overlays/trigger-condition-modal/trigger-condition-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TriggerStateService {\n    public readonly item: Observable<PlaceTrigger> = this._service.item as any;\n\n    public readonly instances: Observable<PlaceTrigger[]> = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceTrigger)) return of([]);\n            return listTriggerInstances(item.id);\n        }),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(\n        private _service: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    /**\n     * Add new condition to trigger\n     */\n    public async editCondition(\n        condition: TriggerComparison | TriggerTimeCondition = null,\n        template: PlaceSystem\n    ) {\n        if (!template) return;\n        const ref = this._dialog.open<\n            TriggerConditionModalComponent,\n            TriggerConditionData\n        >(TriggerConditionModalComponent, {\n            width: 'auto',\n            height: 'auto',\n            data: {\n                trigger: this.active_item,\n                condition: condition\n                    ? JSON.parse(JSON.stringify(condition))\n                    : undefined,\n                system: template,\n            },\n        });\n        const result: DialogEvent | null = (await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])) as any;\n        if (!result?.reason) return;\n        this._service.replaceItem(result.metadata.trigger);\n    }\n\n    /**\n     * Edit existing action on active trigger\n     * @param action Action to edit\n     */\n    public async editAction(\n        action: TriggerFunction | TriggerMailer = null,\n        template: PlaceSystem\n    ) {\n        if (!template) return;\n        const ref = this._dialog.open<\n            TriggerActionModalComponent,\n            TriggerActionModalData\n        >(TriggerActionModalComponent, {\n            data: {\n                trigger: this.active_item,\n                action,\n                system: template,\n            },\n        });\n        const result: DialogEvent | null = (await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])) as any;\n        if (!result?.reason) return;\n        this._service.replaceItem(result.metadata.trigger);\n    }\n\n    /**\n     * Re-order action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public async reorderAction(\n        type: 'function' | 'mailer',\n        fst: number,\n        snd: number\n    ): Promise<void> {\n        const details = await openConfirmModal(\n            {\n                title: `Reoreder trigger ${type} action`,\n                content: `Are you sure you want remove this trigger condition?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        const list: any[] = [\n            ...(type === 'function'\n                ? this.active_item.actions.functions\n                : this.active_item.actions.mailers),\n        ];\n        moveItemInArray(list, fst, snd);\n        const actions = {\n            functions:\n                type === 'function' ? list : this.active_item.actions.functions,\n            mailers:\n                type === 'function' ? this.active_item.actions.mailers : list,\n        };\n        details.loading('Re-ordering triggger actions...');\n        const resp = await updateTrigger(this.active_item.id, {\n            ...this.active_item.toJSON(),\n            actions,\n        })\n            .toPromise()\n            .catch((_) => _);\n        if (!(resp instanceof PlaceTrigger))\n            return notifyError(\n                `Error re-ordered trigger ${type} action. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        this._service.replaceItem(resp);\n        notifySuccess(`Successfully re-ordered trigger ${type} action.`);\n    }\n\n    public async removeCondition(\n        condition: TriggerComparison | TriggerTimeCondition\n    ) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger condition`,\n                content: `Are you sure you want remove this trigger condition?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger condition...');\n        const item = this.active_item;\n        const conditions = {\n            comparisons: [...item.conditions.comparisons],\n            time_dependents: [...item.conditions.time_dependents],\n        };\n        const index = ((condition as TriggerTimeCondition).type\n            ? item.conditions.time_dependents\n            : item.conditions.comparisons\n        ).findIndex((i) => JSON.stringify(i) === JSON.stringify(condition));\n        conditions.time_dependents.splice(index, 1);\n        ((condition as TriggerTimeCondition).type\n            ? conditions.time_dependents\n            : conditions.comparisons\n        ).splice(index, 1);\n        const resp = await updateTrigger(item.id, {\n            ...item.toJSON(),\n            conditions,\n        })\n            .toPromise()\n            .catch((err) => err);\n        details.close();\n        if (!(resp instanceof PlaceTrigger)) {\n            return notifyError(\n                `Error removing trigger condition. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        }\n        this._service.replaceItem(resp);\n        notifySuccess('Successfully removed trigger condition.');\n    }\n\n    public async removeAction(action: TriggerFunction | TriggerMailer) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger action`,\n                content: `Are you sure you want remove this trigger action?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger action...');\n        const item = this.active_item;\n        const actions = {\n            functions: [...item.actions.functions],\n            mailers: [...item.actions.mailers],\n        };\n        const index = ((action as TriggerMailer).emails\n            ? item.actions.mailers\n            : item.actions.functions\n        ).findIndex((i) => JSON.stringify(i) === JSON.stringify(action));\n        ((action as TriggerMailer).emails\n            ? actions.mailers\n            : actions.functions\n        ).splice(index, 1);\n        const resp = await updateTrigger(item.id, { ...item.toJSON(), actions })\n            .toPromise()\n            .catch((err) => err);\n        details.close();\n        if (!(resp instanceof PlaceTrigger)) {\n            return notifyError(\n                `Error removing trigger action. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        }\n        this._service.replaceItem(resp);\n        notifySuccess('Successfully removed trigger action.');\n    }\n\n    public async removeTriggerFromSystem(system: PlaceSystem) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger from system`,\n                content: `Are you sure you want remove this trigger from ${system.name}?<br>The system will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger from system...');\n        const err = await removeSystemTrigger(system.id, this.active_item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing trigger from system. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed trigger from system.');\n    }\n}\n","import { Component } from '@angular/core';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    PlaceTrigger,\n    PlaceSystem,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerFunction,\n    TriggerMailer,\n    querySystems,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { TriggerStateService } from './trigger-state.service';\n\n@Component({\n    selector: 'trigger-about',\n    template: `\n        <section class=\"space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.created_at\">\n                <label i18n=\"@@triggerCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.updated_at\">\n                <label i18n=\"@triggerUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <div class=\"flex items-center space-x-2\">\n            <label\n                for=\"driver\"\n                class=\"whitespace-nowrap\"\n                matTooltip=\"System to use for available status variables and function calls\"\n                i18n=\"@@triggerTemplateSystemLabel\"\n                >Template System:\n            </label>\n            <item-search-field\n                class=\"h-12\"\n                name=\"system\"\n                [query_fn]=\"query_fn\"\n                [(ngModel)]=\"template_system\"\n            ></item-search-field>\n        </div>\n        <header class=\"flex items-center my-4\">\n            <button\n                mat-icon-button\n                [disabled]=\"!template_system\"\n                (click)=\"editCondition()\"\n            >\n                <app-icon className=\"backoffice-plus\"></app-icon>\n            </button>\n            <div class=\"font-medium text-lg\" i18n=\"@@triggerConditionsHeader\">\n                Conditions\n            </div>\n        </header>\n        <section\n            role=\"table\"\n            *ngIf=\"\n                comparisons.length || time_dependents.length;\n                else no_conditions\n            \"\n        >\n            <div\n                table-head\n                i18n=\"@@triggerComparisonLabel\"\n                *ngIf=\"comparisons.length\"\n            >\n                <div class=\"flex-1 p-2\">Variable Comparison Condtions</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let comparison of comparisons\">\n                    <div class=\"w-12\"></div>\n                    <div class=\"flex-1 p-2\">\n                        {{ comparison.left | json }} {{ comparison.operator }}\n                        {{ comparison.right | json }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editCondition(comparison)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"removeCondition(comparison)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div\n                table-head\n                i18n=\"@@triggerTimeLabel\"\n                *ngIf=\"time_dependents.length\"\n            >\n                <div class=\"flex-1 p-2\">Time Dependent Conditions</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let time of time_dependents\">\n                    <div class=\"w-12\"></div>\n                    <div class=\"flex-1 p-2\">\n                        {{ time.type === 'at' ? 'At time' : 'CRON' }}\n                        {{ time.type === 'at' ? time.time : time.cron }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editCondition(time)\"\n                        >\n                            <app-icon className=\"backoffice-edit\"></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeCondition(time)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <header class=\"flex items-center space-x-2 my-4\">\n            <button\n                mat-icon-button\n                [disabled]=\"!template_system\"\n                (click)=\"editAction()\"\n            >\n                <app-icon className=\"backoffice-plus\"></app-icon>\n            </button>\n            <div class=\"font-medium text-lg\" i18n=\"@@triggerActionsHeader\">\n                Actions\n            </div>\n        </header>\n        <section\n            role=\"table\"\n            *ngIf=\"functions.length || mailers.length; else no_actions\"\n        >\n            <div\n                table-head\n                i18n=\"@@triggerFunctionsLabel\"\n                *ngIf=\"functions.length\"\n            >\n                <div class=\"flex-1 p-2\">Function Call Actions</div>\n            </div>\n            <div\n                table-body\n                cdkDropList\n                (cdkDropListDropped)=\"confirmReorder('function', $event)\"\n            >\n                <div table-row *ngFor=\"let action of functions\" cdkDrag>\n                    <div\n                        class=\"w-12 flex items-center justify-center\"\n                        cdkDragHandle\n                    >\n                        <app-icon\n                            [icon]=\"{ class: 'backoffice-select-arrows' }\"\n                        ></app-icon>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        {{ action.mod }}, {{ action.method }}({{\n                            action.args | json\n                        }})\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editAction(action)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeAction(action)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                    <div\n                        class=\"p-4 border-4 border-dashed border-black bg-gray-300\"\n                        *cdkDragPlaceholder\n                    ></div>\n                </div>\n            </div>\n            <div table-head i18n=\"@@triggerEmailsLabel\" *ngIf=\"mailers.length\">\n                <div class=\"flex-1 p-2\">Email Actions</div>\n            </div>\n            <div\n                table-body\n                cdkDropList\n                (cdkDropListDropped)=\"confirmReorder('mailer', $event)\"\n            >\n                <div table-row *ngFor=\"let action of mailers\" cdkDrag>\n                    <div\n                        class=\"w-12 flex items-center justify-center\"\n                        cdkDragHandle\n                    >\n                        <app-icon\n                            [icon]=\"{ class: 'backoffice-select-arrows' }\"\n                        ></app-icon>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        <span\n                            [matTooltip]=\"action.emails | formatList\"\n                            i18n=\"@@emailCountDisplay\"\n                            >{{ action.emails.length }} { action.emails.length,\n                            plural, =1 { Address } other { Addresses } }</span\n                        >&nbsp; | Body Length: {{ action.content.length }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editAction(action)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeAction(action)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                    <div\n                        class=\"p-4 border-4 border-dashed border-black bg-gray-300\"\n                        *cdkDragPlaceholder\n                    ></div>\n                </div>\n            </div>\n        </section>\n        <ng-template #no_conditions>\n            <div\n                class=\"flex flex-col items-center p-8\"\n                i18n=\"@@triggerConditionsEmpty\"\n            >\n                No condtions for trigger\n            </div>\n        </ng-template>\n        <ng-template #no_actions>\n            <div\n                class=\"flex flex-col items-center p-8\"\n                i18n=\"@@triggerActionsEmpty\"\n            >\n                No actions for trigger\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TriggerAboutComponent extends BaseClass {\n    /** System to use for conditions with systen variables and functions */\n    public template_system: PlaceSystem;\n    /** List of variable comparison trigger conditions */\n    public comparisons: TriggerComparison[] = [];\n    /** List of time dependent trigger conditions */\n    public time_dependents: TriggerTimeCondition[] = [];\n    /** List of function call trigger actions */\n    public functions: TriggerFunction[] = [];\n    /** List of email trigger actions */\n    public mailers: TriggerMailer[] = [];\n    /** Query function for systems */\n    public readonly query_fn = (_) =>\n        querySystems({ q: _ }).pipe(map((resp) => resp.data));\n\n    public readonly editCondition = (c?) =>\n        this._service.editCondition(c, this.template_system);\n    public readonly removeCondition = (c) => this._service.removeCondition(c);\n    public readonly editAction = (a?) =>\n        this._service.editAction(a, this.template_system);\n    public readonly removeAction = (a) => this._service.removeAction(a);\n\n    public get item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: TriggerStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                if (this.item && this.item.conditions) {\n                    this.comparisons = this.item.conditions.comparisons || [];\n                    this.time_dependents =\n                        this.item.conditions.time_dependents || [];\n                    this.functions = this.item.actions.functions || [];\n                    this.mailers = this.item.actions.mailers || [];\n                }\n            })\n        );\n    }\n    /**\n     * Open confirmation modal for re-ordering action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public confirmReorder(\n        type: 'function' | 'mailer',\n        event: CdkDragDrop<any[]>\n    ): void {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderAction(\n                type,\n                event.previousIndex,\n                event.currentIndex\n            );\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceTrigger } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport { TriggerStateService } from './trigger-state.service';\n\n@Component({\n    selector: 'trigger-systems',\n    template: `\n        <div role=\"table\" *ngIf=\"(instances | async)?.length; else empty_state\">\n            <div table-head>\n                <td class=\"w-12 h-10\"></td>\n                <td\n                    class=\"flex-1 h-10 flex items-center\"\n                    i18n=\"@@systemTableName\"\n                >\n                    Parent ID\n                </td>\n                <td\n                    class=\"w-32 h-10 flex items-center\"\n                    i18n=\"@@systemTableAdded\"\n                >\n                    Added\n                </td>\n                <td class=\"w-12 h-10\"></td>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of instances | async\">\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <div\n                            class=\"h-2 w-2 rounded-full bg-black\"\n                            [class.active]=\"item.bookable\"\n                        ></div>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        <a\n                            *ngIf=\"item.id\"\n                            class=\"underline\"\n                            [routerLink]=\"\n                                item.zone_id\n                                    ? ['/zones', item.zone_id]\n                                    : ['/systems', item.control_system_id]\n                            \"\n                            [matTooltip]=\"\n                                item.zone_id || item.control_system_id\n                            \"\n                        >\n                            {{\n                                item.name ||\n                                    item.zone_id ||\n                                    item.control_system_id\n                            }}\n                        </a>\n                    </div>\n                    <div class=\"w-32 p-2\">\n                        {{ +item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"deleteTrigger(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <div class=\"text\" i18n=\"@@systemTableEmpty\">\n                    No instances of trigger\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            .active {\n                background-color: var(--success) !important;\n            }\n        `,\n    ],\n})\nexport class TriggerInstancesComponent {\n    /** List of systems associated with the trigger */\n    public readonly instances = this._service.instances;\n    /** Map of systems ids to connected status */\n    public connected: HashMap<boolean> = {};\n\n    public readonly deleteTrigger = (s) =>\n        this._service.removeTriggerFromSystem(s);\n\n    public get item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: TriggerStateService) {}\n}\n","import { Routes } from '@angular/router';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about.component';\nimport { TriggerInstancesComponent } from './trigger-instances.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: TriggersComponent,\n        children: [\n            { path: 'about', component: TriggerAboutComponent },\n            { path: 'instances', component: TriggerInstancesComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './triggers.routes';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about.component';\nimport { TriggerInstancesComponent } from './trigger-instances.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        TriggersComponent,\n        TriggerAboutComponent,\n        TriggerInstancesComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule,\n    ],\n})\nexport class AppTriggersModule {}\n"]}