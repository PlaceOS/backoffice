{"version":3,"sources":["./apps/backoffice/src/app/drivers/drivers.component.ts","./apps/backoffice/src/app/drivers/driver-state.service.ts","./apps/backoffice/src/app/drivers/driver-about.component.ts","./apps/backoffice/src/app/drivers/driver-devices.component.ts","./apps/backoffice/src/app/drivers/drivers.routes.ts","./apps/backoffice/src/app/drivers/drivers.module.ts"],"names":["DriversComponent","_service","super","name","show_options","this","tab_list","active_item","id","icon","class","count","device_count","concat","extensions","subscription","item","subscribe","loadValues","updateTabList","query","offset","limit","driver_id","toPromise","total","DriverStateService","_state","_dialog","_loading","BehaviorSubject","_last_error","loading","asObservable","last_error","is_compiled","pipe","filter","d","switchMap","driver","catchError","_","err","json","next","compilation_output","console","log","retryWhen","delay","tap","modules","details","map","data","shareReplay","error","getValue","open","title","content","type","reason","close","success","catch","device","system","statusText","message","replaceItem","DriverAboutComponent","compiled","compilation_error","recompileDriver","viewErrors","viewError","DriverModulesComponent","loading_systems","filter$","systems","combineLatest","filters","search","toLowerCase","mod","includes","custom_name","removeModule","module_id","ROUTES","path","component","children","redirectTo","AppDriversModule"],"mappings":"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","file":"222.76b6dc24c3b9c7ce66f2.js","sourcesContent":["import { Component } from '@angular/core';\nimport { PlaceDriver, queryModules } from '@placeos/ts-client';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\n\n@Component({\n    selector: 'app-drivers',\n    template: `\n        <div\n            class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\"\n        >\n            <sidebar\n                heading=\"Drivers\"\n                name=\"drivers\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"driver\"\n                route=\"drivers\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class DriversComponent extends BaseClass {\n    /** Number of devices for the active system */\n    public device_count: number;\n\n    public readonly name = 'drivers';\n\n    public readonly show_options = this._service.show_options;\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n            { id: 'modules', name: 'Modules', count: this.device_count, icon: { class: 'backoffice-tablet' } },\n            { id: 'history', name: 'Settings History', icon: { class: 'backoffice-clock' } },\n\n        ].concat(this.extensions);\n    }\n\n    constructor(protected _service: ActiveItemService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription('item', this._service.item.subscribe((item) => {\n            this.loadValues(item as any);\n            this.updateTabList();\n        }));\n        this.updateTabList();\n    }\n\n    protected async loadValues(item: PlaceDriver) {\n        if (!item) return;\n        const query: any = { offset: 0, limit: 1, driver_id: item.id };\n        this.device_count = (await queryModules(query).toPromise()).total;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    isDriverCompiled,\n    PlaceDriver,\n    PlaceModule,\n    queryModules,\n    recompileDriver,\n    removeSystemModule,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport {\n    catchError,\n    delay,\n    filter,\n    map,\n    retryWhen,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DriverStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _last_error = new BehaviorSubject<HashMap>(null);\n\n    public readonly item = this._state.item;\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly last_error = this._last_error.asObservable();\n\n    public readonly is_compiled = this.item.pipe(\n        filter((d) => !!d && d instanceof PlaceDriver),\n        switchMap((driver) => isDriverCompiled(driver.id)),\n        catchError(async (_: Response) => {\n            const err = await _?.json();\n            this._last_error.next(err?.compilation_output || _);\n            console.log('Driver Error:', err);\n            if (!err?.compilation_output) throw _;\n        }),\n        retryWhen(delay(1000)),\n        tap(_ => _ ? this._last_error.next(null) : '')\n    );\n\n    public readonly modules = this.item.pipe(\n        switchMap(async (item) => {\n            this._loading.next(true);\n            const details = await queryModules({ driver_id: item.id }).toPromise();\n            this._loading.next(false);\n            return details;\n        }),\n        map((d) => d.data),\n        shareReplay()\n    );\n\n    public get active_item() {\n        return this._state.active_item;\n    }\n\n    constructor(private _state: ActiveItemService, private _dialog: MatDialog) {\n        this.item.subscribe(() => this._last_error.next(null));\n    }\n\n    public viewError() {\n        const error = this._last_error.getValue();\n        if (!error) return;\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { title: 'Driver Compilation Error', content: error },\n        });\n    }\n\n    public async recompileDriver() {\n        const details = await openConfirmModal(\n            {\n                title: `Recompile Driver`,\n                content: `<p>Are you sure you want recompile this driver?</p><p>New driver code will be loaded and device settings will be updated.</p>`,\n                icon: { type: 'icon', class: 'backoffice-cycle' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return details.close();\n        details.loading('Recompiling driver...');\n        const success = await recompileDriver(this._state.active_item.id)\n            .toPromise()\n            .catch((_) => null);\n        details.close();\n        if (!success) return notifyError('Failed to recompiled driver.');\n        notifySuccess('Successfully recompiled driver.');\n    }\n\n    public async removeModule(device: PlaceModule) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove module?',\n                content: `Remove ${device.driver_id}?<br>All associated data be deleted immediatedly.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        const system = await removeSystemModule(this.active_item.id, device.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id}. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed module.`);\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDriver } from '@placeos/ts-client';\nimport { DriverStateService } from './driver-state.service';\n\n\n@Component({\n    selector: 'driver-about',\n    template: `\n        <section class=\"mb-4 space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.default_uri\">\n                <label i18n=\"@@driverDefaultURILabel\">Default URI:</label>\n                <div class=\"value\">{{ item.default_uri }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.default_port\">\n                <label i18n=\"@@driverDefaultPortLabel\"\n                    >Default Port Number:</label\n                >\n                <div class=\"value\">{{ item.default_port }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverDetailsCompiled\">Compiled:</label>\n                <div class=\"value\">\n                    {{ (compiled | async) ? 'true' : 'false' }}\n                </div>\n                <mat-spinner\n                    diameter=\"24\"\n                    *ngIf=\"!(compiled | async)\"\n                ></mat-spinner>\n                <button\n                    mat-button\n                    *ngIf=\"compilation_error | async\"\n                    (click)=\"viewErrors()\"\n                >\n                    View Errors\n                </button>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverDetailsCommit\">Repository:</label>\n                <div class=\"value\">\n                    <a\n                        [routerLink]=\"[\n                            '/repositories',\n                            item.repository_id,\n                            'about'\n                        ]\"\n                        class=\"underline\"\n                    >\n                        {{ item.repository_id }}</a\n                    >\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverDetailsCommit\">Commit:</label>\n                <div class=\"value\">{{ item.commit }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverDetailsFileName\">File Name:</label>\n                <div class=\"value\">{{ item.file_name }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverDetailsModuleName\">Module Name:</label>\n                <div class=\"value\">{{ item?.module_name }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@driverUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <section>\n            <button\n                mat-button\n                (click)=\"recompileDriver()\"\n                i18n=\"@@driverReloadAction\"\n            >\n                Recompile Driver\n            </button>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">\n            Settings\n        </header>\n        <section *ngIf=\"item.settings; else load_state\">\n            <a-settings-form\n                [merge]=\"true\"\n                [id]=\"item.id\"\n                [settings]=\"item.settings\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@driverLoadingLabel\">Loading driver settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DriverAboutComponent {\n    public readonly compiled = this._service.is_compiled;\n    public readonly compilation_error = this._service.last_error;\n\n    public readonly recompileDriver = () => this._service.recompileDriver();\n    public readonly viewErrors = () => this._service.viewError();\n\n    public get item(): PlaceDriver {\n        return (this._service.active_item || {}) as any;\n    }\n\n    constructor(private _service: DriverStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { DriverStateService } from './driver-state.service';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { PlaceModule, PlaceSystem, querySystems } from '@placeos/ts-client';\n\n@Component({\n    selector: 'driver-devices',\n    template: `\n        <section class=\"flex items-center mb-4\">\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter triggers...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(modules | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"w-12 p-2\">State</div>\n                    <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">Name</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body class=\"overflow-y-auto\">\n                    <div\n                        table-row\n                        *ngFor=\"let module of modules | async; let i = index\"\n                    >\n                        <div class=\"w-12 p-2 flex items-center justify-center\">\n                            <i\n                                *ngIf=\"module.system\"\n                                binding\n                                [(model)]=\"module.connected\"\n                                [sys]=\"module.system.id\"\n                                [mod]=\"module\"\n                                bind=\"connected\"\n                            ></i>\n                            <div\n                                class=\"h-2 w-2 rounded-full bg-black\"\n                                [class.bg-error]=\"\n                                    module.running && !module.connected\n                                \"\n                                [class.bg-success]=\"\n                                    module.running && module.connected\n                                \"\n                            ></div>\n                        </div>\n                        <div\n                            flex\n                            class=\"flex-1 p-2 underline\"\n                            i18n=\"@@nameLabel\"\n                        >\n                            <a [routerLink]=\"['/modules', module.id]\">\n                                {{ module.custom_name || module.name }}\n                            </a>\n                        </div>\n                        <div class=\"w-24 p-2\">\n                            <button\n                                mat-icon-button\n                                matTooltip=\"View Systems\"\n                                [matMenuTriggerFor]=\"menu\"\n                                (click)=\"loadSystems(module)\"\n                            >\n                                <app-icon className=\"backoffice-eye\"></app-icon>\n                            </button>\n                            <mat-menu #menu=\"matMenu\">\n                                <div\n                                    class=\"flex items-center justify-center px-2 pb-2 opacity-70 border-b border-gray-200 text-sm\"\n                                >\n                                    {{ systems[module.id]?.length }} System(s)\n                                </div>\n                                <div\n                                    *ngIf=\"loading_systems\"\n                                    class=\"flex items-center space-x-2 p-2 text-sm\"\n                                >\n                                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                                    <span>Loading systems...</span>\n                                </div>\n                                <a\n                                    mat-menu-item\n                                    *ngFor=\"\n                                        let system of systems[module.id] || []\n                                    \"\n                                    class=\"leading-tight\"\n                                    [routerLink]=\"['/systems', system.id]\"\n                                >\n                                    <div\n                                        class=\"flex flex-col justify-center px-2 h-full\"\n                                    >\n                                        <div class=\"text-base\">\n                                            {{\n                                                system.display_name ||\n                                                    system.name\n                                            }}\n                                        </div>\n                                        <div class=\"text-xs opacity-60\">\n                                            {{ system.id }}\n                                        </div>\n                                    </div>\n                                </a>\n                            </mat-menu>\n                            <button\n                                mat-icon-button\n                                (click)=\"removeModule(module)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading modules...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No modules with driver</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 28rem;\n            }\n        `,\n    ],\n})\nexport class DriverModulesComponent extends BaseClass {\n    public loading_systems = false;\n    /** Subject holding the value of the search */\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** Whether systems are being loaded */\n    public readonly loading = this._service.loading;\n    /** Currently active driver */\n    public readonly item = this._service.item;\n    /** List of systems associated with modules */\n    public readonly systems: HashMap<PlaceSystem[]> = {};\n    /** Whether systems are being loaded */\n    /** List of modules */\n    public readonly modules = combineLatest([\n        this.filter$,\n        this._service.modules,\n    ]).pipe(\n        map((details) => {\n            const [filters, modules] = details;\n            const search = filters.toLowerCase();\n            return filters\n                ? modules.filter(\n                      (mod) =>\n                          mod.name.toLowerCase().includes(search) ||\n                          mod.custom_name.toLowerCase().includes(search)\n                  )\n                : modules;\n        })\n    );\n\n    public readonly removeModule = (d) => this._service.removeModule(d);\n\n    constructor(private _service: DriverStateService) {\n        super();\n    }\n\n    public async loadSystems(mod: PlaceModule) {\n        this.loading_systems = true;\n        const systems = await querySystems({ module_id: mod.id })\n            .pipe(map(({ data }) => data))\n            .toPromise();\n        this.systems[mod.id] = systems || [];\n        this.loading_systems = false;\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { DriversComponent } from './drivers.component';\nimport { DriverAboutComponent } from './driver-about.component';\nimport { DriverModulesComponent } from './driver-devices.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: DriversComponent,\n        children: [\n            { path: 'about', component: DriverAboutComponent },\n            { path: 'modules', component: DriverModulesComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './drivers.routes';\n\nimport { DriversComponent } from './drivers.component';\nimport { DriverAboutComponent } from './driver-about.component';\nimport { DriverModulesComponent } from './driver-devices.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        DriversComponent,\n        DriverAboutComponent,\n        DriverModulesComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppDriversModule {}\n"],"sourceRoot":"webpack:///"}