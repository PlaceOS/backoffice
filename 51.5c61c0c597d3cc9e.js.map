{"version":3,"mappings":"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","names":["UsersComponent","BaseClass","constructor","_service","super","this","show_options","extensions","extensionsForItem","active_item","name","updateTabList","details","tab_list","id","icon","class","count","e","metadata","concat","ngOnInit","subscription","item","subscribe","i0","selectors","UserAboutComponent","$localize","UserHistoryComponent","loadUserLogs","offset","UsersStateService","_dialog","BehaviorSubject","_loading","asObservable","combineLatest","all_item","_change","pipe","debounceTime","switchMap","d","__awaiter","PlaceZone","next","Promise","all","listMetadata","map","length","toPromise","catch","_","PlaceUser","of","catchError","shareReplay","setTimeout","getValue","factory","$event","ctx_r13","oxw","ctx_r17","ctx_r20","ctx_r24","ROUTES","path","component","children","_schemas","validateName","name_list","control","indexOf","value","generateForms","newMetadata","push","Math","floor","random","description","new","editMetadataDetails","field","open","MetadataDetailsModalComponent","maxWidth","data","form","form_map","deleteMetadata","ref","ConfirmModalComponent","Object","CONFIRM_METADATA","title","content","type","componentInstance","event","reason","removeMetadata","notifySuccess","filter","prop","err","notifyError","response","message","close","saveMetadata","markAllAsTouched","valid","controls","loading","updateMetadata","JSON","parse","index","findIndex","i","edited","stringify","splice","forEach","group","FormGroup","FormControl","Validators","editors","undefined","validateJSONString","schema","valueChanges","getSchema","schema_map","UserMetadataComponent","ExtensionOutletComponent","redirectTo","AppUsersModule","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule"],"sources":["./apps/backoffice/src/app/users/users.component.ts","./apps/backoffice/src/app/users/user-about.component.ts","./apps/backoffice/src/app/users/user-history.component.ts","./apps/backoffice/src/app/users/users-state.service.ts","./apps/backoffice/src/app/users/user-metadata.component.ts","./apps/backoffice/src/app/users/users.routes.ts","./apps/backoffice/src/app/users/users.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { PlaceUser } from '@placeos/ts-client';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\n\n@Component({\n    selector: 'app-users',\n    template: `\n        <div\n            class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\"\n        >\n            <sidebar\n                heading=\"Users\"\n                name=\"users\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"user\"\n                route=\"users\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class UsersComponent extends BaseClass {\n    public readonly name = 'users';\n\n    public readonly show_options = this._service.show_options;\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(details?: HashMap) {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n            {\n                id: 'metadata',\n                name: 'Metadata',\n                count: details?.metadata,\n                icon: { class: 'backoffice-gist' },\n            },\n            { id: 'history', name: 'History', icon: { class: 'backoffice-list' } }\n        ].concat(this.extensions);\n    }\n\n    constructor(protected _service: ActiveItemService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription('item', this._service.item.subscribe(() => this.updateTabList()));\n        this.updateTabList();\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceUser } from '@placeos/ts-client';\n\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'user-about',\n    template: `\n        <section class=\"mb-4 space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@userCreatedAtLabel\">Email:</label>\n                <div class=\"value\">\n                    <a [href]=\"'mailto:' + item?.email\">{{ item?.email }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@userCreatedAtLabel\">Created:</label>\n                <div class=\"value\">\n                    {{ item?.created_at * 1000 | dateFrom }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.updated_at\">\n                <label i18n=\"@userUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">\n                    {{ item?.updated_at * 1000 | dateFrom }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.authority_id\">\n                <label i18n=\"@userUpdatedAtLabel\">Authority ID:</label>\n                <div class=\"value mono\">\n                    {{ item?.authority_id }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.groups\">\n                <label class=\"my-1\" for=\"groups\" i18n=\"@@userGroupsLabel\"\n                    >User Groups:</label\n                >\n                <div\n                    class=\"value\"\n                    *ngIf=\"item.groups?.length; else empty_group_state\"\n                >\n                    <mat-chip-list name=\"groups\">\n                        <mat-chip *ngFor=\"let group of item.groups\">{{\n                            group\n                        }}</mat-chip>\n                    </mat-chip-list>\n                </div>\n            </div>\n        </section>\n        <section>\n            <div role=\"table\">\n                <div table-head>\n                    <div class=\"w-40 p-2\" i18n=\"@@techSupportRole\">\n                        User Role\n                    </div>\n                    <div class=\"flex-1 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row>\n                        <div class=\"w-40 p-2\" i18n=\"@@techSupportRole\">\n                            Tech Support\n                        </div>\n                        <div class=\"flex-1 p-2\">\n                            {{ item?.support === true }}\n                        </div>\n                    </div>\n                    <div table-row>\n                        <div class=\"w-40 p-2\" i18n=\"@@systemAdminRole\">\n                            System Admin\n                        </div>\n                        <div class=\"flex-1 p-2\">\n                            {{ item?.sys_admin === true }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #empty_group_state>\n            <div class=\"value\">No Access Groups</div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class UserAboutComponent {\n    public get item(): PlaceUser {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {}\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { PlaceUser } from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'user-history',\n    template: `\n        <div role=\"table\" *ngIf=\"logs?.length; else empty_state\">\n            <div table-head>\n                <div class=\"w-1/3\" i18n=\"@@logEventStart\">Session Start</div>\n                <div class=\"w-1/3\" i18n=\"@@logEventEnd\">Ended</div>\n                <div class=\"w-1/3\" i18n=\"@@logEventAction\">\n                    Systems Accessed\n                </div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of logs\">\n                    <div class=\"w-1/3\">\n                        {{ item.start | date: 'MMM d, y, h:mm a' }}\n                    </div>\n                    <div class=\"w-1/3\">\n                        {{ item.end | date: 'MMM d, y, h:mm a' }}\n                    </div>\n                    <div class=\"w-1/3\">\n                        <div>{{ item.systems.length }}</div>\n                        <div>View</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 text-center\" i18n=\"@@logTableEmpty\">\n                No logs found\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserHistoryComponent extends BaseClass {\n    public logs: { start: number; end: number; systems: string[] }[] = [];\n\n    public get item(): PlaceUser {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {\n        super();\n    }\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadUserLogs();\n            })\n        );\n    }\n\n    public loadUserLogs(offset: number = 0) {}\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceMetadata, PlaceUser, PlaceZone, listMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, debounceTime, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { ActiveItemService } from '../common/item.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UsersStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _change = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly item = this._service.item;\n\n    public readonly counts = combineLatest([this._service.all_item, this._change]).pipe(\n        debounceTime(300),\n        switchMap(async (d) => {\n            const [item] = d;\n            if (!(item instanceof PlaceZone)) return {};\n            this._loading.next(true);\n            const details = await Promise.all([\n                listMetadata(item.id)\n                    .pipe(map((d) => d.length))\n                    .toPromise()\n                    .catch((_) => 0),\n            ]);\n            const [metadata] = details;\n            this._loading.next(false);\n            return {\n                metadata,\n            };\n        })\n    );\n\n    public readonly metadata: Observable<PlaceMetadata[]> = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceUser)) return of([]);\n            return listMetadata(item.id);\n        }),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceZone {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService, private _dialog: MatDialog) {\n        setTimeout(() => this._change.next(!this._change.getValue()), 1000);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n    PlaceMetadata,\n    removeMetadata,\n    updateMetadata,\n    PlaceUser,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    FormGroup,\n    FormControl,\n    Validators,\n    AbstractControl,\n} from '@angular/forms';\nimport { validateJSONString } from 'apps/backoffice/src/app/common/validation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MetadataDetailsModalComponent } from 'apps/backoffice/src/app/overlays/metadata-details-modal/metadata-details-modal.component';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { SchemaStateService } from '../engine/schema-state.service';\nimport { UsersStateService } from './users-state.service';\n\n@Component({\n    selector: 'user-metadata',\n    template: `\n        <div class=\"p-4\" *ngIf=\"item\">\n            <button\n                mat-button\n                (click)=\"newMetadata()\"\n                i18n=\"@@addMetadataAction\"\n            >\n                Add new Metadata Field\n            </button>\n            <div class=\"mt-4\" *ngIf=\"metadata?.length; else empty_state\">\n                <mat-accordion>\n                    <ng-container *ngFor=\"let item of metadata\">\n                        <mat-expansion-panel\n                            [class.no-padding]=\"true\"\n                            *ngIf=\"form_map[item.name]\"\n                            [formGroup]=\"form_map[item.name]\"\n                        >\n                            <mat-expansion-panel-header>\n                                <mat-panel-title>\n                                    <div edit class=\"flex-1\">\n                                        {{\n                                            form_map[item.name].controls.name\n                                                .value\n                                        }}\n                                    </div>\n                                    <ng-container *ngIf=\"edited[item.name]\">\n                                        <button\n                                            mat-button\n                                            save\n                                            *ngIf=\"\n                                                !loading[item.name];\n                                                else load_state\n                                            \"\n                                            (click)=\"$event.stopPropagation()\"\n                                            (click)=\"saveMetadata(item)\"\n                                            i18n=\"@@saveAction\"\n                                        >\n                                            Save\n                                        </button>\n                                    </ng-container>\n                                    <button\n                                        mat-icon-button\n                                        matTooltip=\"Edit Metadata Settings\"\n                                        (click)=\"\n                                            editMetadataDetails(item);\n                                            $event.stopPropagation()\n                                        \"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-edit'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <div class=\"contents\" *ngIf=\"!item.new\">\n                                        <button\n                                            mat-icon-button\n                                            matTooltip=\"Remove Metadata\"\n                                            (click)=\"deleteMetadata(item.name)\"\n                                        >\n                                            <app-icon\n                                                [icon]=\"{\n                                                    class: 'backoffice-trash'\n                                                }\"\n                                            ></app-icon>\n                                        </button>\n                                    </div>\n                                </mat-panel-title>\n                            </mat-expansion-panel-header>\n                            <div class=\"settings\">\n                                <settings-form-field\n                                    formControlName=\"details\"\n                                    lang=\"json\"\n                                    [schema]=\"this.schema_map[item.name]\"\n                                    [readonly]=\"false\"\n                                ></settings-form-field>\n                            </div>\n                        </mat-expansion-panel>\n                    </ng-container>\n                </mat-accordion>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 text-center\" i18n=\"@@userMetadataEmpty\">\n                No user metadata found\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <mat-spinner diameter=\"32\"></mat-spinner>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [edit] app-icon {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n\n            [edit]:hover app-icon {\n                opacity: 1;\n            }\n\n            mat-panel-title {\n                display: flex;\n                align-items: center;\n                height: 1.2em;\n                overflow: visible;\n            }\n\n            mat-panel-title [save] {\n                font-size: 0.8em;\n                background: none;\n                border: none;\n                text-decoration: underline;\n                color: inherit;\n            }\n\n            mat-form-field {\n                height: 3em;\n            }\n\n            .settings {\n                width: 100%;\n            }\n\n            .contents {\n                display: flex;\n                justify-content: flex-end;\n                flex: 1;\n                min-width: 2em;\n            }\n\n            .contents button {\n                text-decoration: none;\n            }\n        `,\n    ],\n})\nexport class UserMetadataComponent extends BaseClass implements OnInit {\n    /** List of metadata associated with the user */\n    public metadata: PlaceMetadata[];\n    /** Map of form field groups to metadata fields */\n    public form_map: HashMap<FormGroup> = {};\n    /** Map of metadata fields to whether they have been edited */\n    public edited: HashMap<boolean> = {};\n    /** Map of metadata properties to whether they are saving */\n    public loading: HashMap<boolean> = {};\n    /** Map of metadata schemas to the associated metadata */\n    public schema_map: HashMap<HashMap | string> = {};\n\n    public get item(): PlaceUser {\n        return this._service.active_item as any;\n    }\n\n    private validateName(name_list: string[]) {\n        return (control: AbstractControl) => {\n            return name_list.indexOf(control.value) >= 0\n                ? { name: true }\n                : null;\n        };\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _service: UsersStateService,\n        private _schemas: SchemaStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'metadata',\n            this._service.metadata.subscribe((d) => {\n                this.metadata = d;\n                this.generateForms();\n            })\n        );\n    }\n\n    public newMetadata() {\n        this.metadata.push({\n            name: `new_field_${Math.floor(Math.random() * 999_999_999)}`,\n            description: '',\n            new: true,\n            details: {},\n        } as any);\n        this.generateForms();\n    }\n\n    public editMetadataDetails(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        this._dialog.open(MetadataDetailsModalComponent, {\n            maxWidth: '95vw',\n            data: {\n                form,\n            },\n        });\n    }\n\n    /**\n     * Delete the given metadata field\n     * @param field Name of the field to remove\n     */\n    public deleteMetadata(field: string) {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want delete the metadata property \"${field}\"?</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    removeMetadata(this.item.id, { name: field }).subscribe(\n                        () => {\n                            notifySuccess(\n                                `Successfully removed \"${field}\" metadata.`\n                            );\n                            this.metadata = this.metadata.filter(\n                                (prop) => prop.name !== field\n                            );\n                            this.generateForms();\n                        },\n                        (err) =>\n                            notifyError(\n                                `Error removing old \"${field}\" metadata. Error: ${\n                                    err.response || err.message || err\n                                }`\n                            )\n                    );\n                }\n                ref.close();\n            })\n        );\n    }\n\n    public saveMetadata(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        form.markAllAsTouched();\n        if (!form.valid)\n            return notifyError(\n                `JSON for property \"${form.controls.name.value}\" is invalid`\n            );\n        const value = form.value;\n        this.loading[field.name] = true;\n        updateMetadata(this.item.id, {\n            ...value,\n            details: JSON.parse(value.details),\n        }).subscribe(\n            (item: PlaceMetadata) => {\n                this.loading[field.name] = false;\n                const index = this.metadata.findIndex(\n                    (i) => i.name === field.name\n                );\n                this.edited[field.name] = false;\n                if (field.name !== item.name) {\n                    removeMetadata(this.item.id, field)\n                        .toPromise()\n                        .catch((err) =>\n                            notifyError(\n                                `Error removing old \"${\n                                    field.name\n                                }\" metadata. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            )\n                        );\n                }\n                if (index >= 0) {\n                    this.metadata.splice(index, 1, {\n                        ...item,\n                        new: false,\n                    } as any);\n                }\n                notifySuccess(`Saved \"${value.name}\" metadata.`);\n                this.generateForms();\n            },\n            (err) => {\n                this.loading[field.name] = false;\n                notifyError(\n                    `Error saving \"${\n                        value.name\n                    }\" metadata. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    private generateForms() {\n        delete this.form_map;\n        this.form_map = {};\n        this.metadata.forEach((group) => {\n            const details =\n                typeof group.details === 'string'\n                    ? JSON.parse(group.details)\n                    : group.details;\n            this.form_map[group.name] = new FormGroup({\n                name: new FormControl(group.name, [\n                    Validators.required,\n                    this.validateName(\n                        this.metadata\n                            .filter((i) => i.name !== group.name)\n                            .map((i) => i.name)\n                    ),\n                ]),\n                description: new FormControl(group.description),\n                editors: new FormControl(group.editors),\n                details: new FormControl(\n                    JSON.stringify(details || {}, undefined, 4),\n                    [Validators.required, validateJSONString]\n                ),\n                schema: new FormControl(group.schema),\n            });\n            this.subscription(\n                `${group.name}_changes`,\n                this.form_map[group.name].valueChanges.subscribe(\n                    () => (this.edited[group.name] = true)\n                )\n            );\n            this.subscription(\n                `${group.name}_schema`,\n                this.form_map[\n                    group.name\n                ].controls.schema.valueChanges.subscribe((_) => {\n                    let schema = this._schemas.getSchema(_);\n                    if (!schema) {\n                        try {\n                            schema = JSON.parse(_);\n                        } catch (e) {\n                            schema = {};\n                        }\n                    }\n                    this.schema_map[group.name] = schema;\n                })\n            );\n        });\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { UsersComponent } from './users.component';\nimport { UserAboutComponent } from './user-about.component';\nimport { UserHistoryComponent } from './user-history.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { UserMetadataComponent } from './user-metadata.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: UsersComponent,\n        children: [\n            { path: 'about', component: UserAboutComponent },\n            { path: 'metadata', component: UserMetadataComponent },\n            { path: 'history', component: UserHistoryComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './users.routes';\n\nimport { UsersComponent } from './users.component';\nimport { UserAboutComponent } from './user-about.component';\nimport { UserHistoryComponent } from './user-history.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { UserMetadataComponent } from './user-metadata.component';\n\n@NgModule({\n    declarations: [\n        UsersComponent,\n        UserAboutComponent,\n        UserHistoryComponent,\n        UserMetadataComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppUsersModule {}\n"],"sourceRoot":"webpack:///","file":"51.5c61c0c597d3cc9e.js"}