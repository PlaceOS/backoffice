{"version":3,"file":"18.a1592c0d4652db1d.js","mappings":"wVA8BO,IAAMA,EAAb,MAAM,MAAOA,EAsCTC,YAAoBC,EAAmCC,GAAkB,WAArDC,cAAmCA,eArC/CA,cAAW,IAAIC,KAAyB,GACxCD,iBAAc,IAAIC,IAAyB,MAEnCD,UAAOA,KAAKF,OAAOI,KAEnBF,aAAUA,KAAKG,SAASC,eAExBJ,gBAAaA,KAAKK,YAAYD,eAE9BJ,iBAAcA,KAAKE,KAAKI,MACpCC,OAAQC,KAAQA,GAAKA,aAAaC,QAClCC,OAAWC,IAAWC,SAAiBD,EAAOE,MAC9CC,OAAU,yBAAC,UAAOC,GACd,MAAMC,QAAYD,GAAGE,OAErB,GADAC,EAAKb,YAAYc,KAAKH,GAAKI,oBAAsBL,IAC5CC,GAAKI,mBAAoB,MAAML,CACvC,GAJS,wDAKVM,QAAUC,OAAM,OAChBC,OAAIR,GAAKA,EAAIf,KAAKK,YAAYc,KAAK,MAAQ,KAG/BnB,aAAUA,KAAKE,KAAKI,MAChCI,OAAS,yBAAC,UAAOR,GACb,IAAKA,EAAM,MAAO,CAAEsB,KAAM,IAC1BN,EAAKf,SAASgB,MAAK,GACnB,MAAMM,QAAgBC,SAAa,CAAEC,UAAWzB,EAAKW,KAAMe,YAC3D,SAAKzB,SAASgB,MAAK,GACZM,CACV,GANQ,wDAOTI,OAAKrB,GAAMA,EAAEgB,OACbM,UAQA9B,KAAKE,KAAK6B,UAAU,IAAM/B,KAAKK,YAAYc,KAAK,MACnD,CANUa,kBACP,OAAOhC,KAAKF,OAAOkC,WACtB,CAMMC,YACH,MAAMC,EAAQlC,KAAKK,YAAY8B,YAC1BD,GACLlC,KAAKD,QAAQqC,KAAiCC,IAA4B,CACtEb,KAAM,CAAEc,MAAO,2BAA4BC,QAASL,IAE3D,CAEYM,kBAAe,qCACxB,MAAMf,QAAgBgB,QAClB,CACIH,MAAO,mBACPC,QAAS,gIACTG,KAAM,CAAEC,KAAM,OAAQC,MAAO,qBAEjCC,EAAK9C,SAET,IAAK0B,IAAYA,EAAQqB,OAAQ,OAAOrB,EAAQsB,QAChDtB,EAAQuB,QAAQ,yBAChB,MAAMC,QAAgBT,SAAgBK,EAAK/C,OAAOkC,YAAYnB,IACzDe,YACAsB,MAAOnC,GAAM,MAElB,GADAU,EAAQsB,SACHE,EAAS,OAAOE,QAAY,iCACjCC,QAAc,kCAhBU,IAiB3B,CAEYC,aAAaC,GAAmB,qCACzC,MAAM7B,QAAgBgB,QAClB,CACIH,MAAO,iBACPC,QAAS,UAAUe,EAAO3B,iBAC1B4B,MAAO,CAAC,QAAS,0DACjBb,KAAM,CAAEC,KAAM,OAAQC,MAAO,qBAEjCY,EAAKzD,SAET,IAAK0B,IAAYA,EAAQqB,OAAQ,OACjC,MAAMW,QAAeC,SAAmBF,EAAKxB,YAAYnB,GAAIyC,EAAOzC,IAC/De,YACAsB,MAAOlC,KACJmC,QACI,yBAAyBG,EAAOzC,cAC5BG,EAAI2C,YAAc3C,EAAI4C,SAAW5C,IAF9B,GAMnBS,EAAQsB,QACJc,IACJL,EAAK1D,OAAOgE,YAAYL,IACxBL,QAAc,gCAvB2B,IAwB5C,+CA7FQxD,GAAkBmE,mDAAlBnE,EAAkBoE,QAAlBpE,EAAkB,qBAFf,SAEHA,CAAb,yECnBgBmE,iBAGC,WACGA,YAAiDA,QACjDA,iBAAmBA,SAAsBA,gCAAtBA,6DAEvBA,iBAGC,WACGA,YAEAA,QACAA,iBAAmBA,SAAuBA,gCAAvBA,0DA0CnBA,kEAIAA,qBAGIA,yDAASA,qBAAY,GAErBA,yBACJA,kCAyBZA,mBACIA,8BAKJA,8BAJQA,2BAAc,eAAdA,CAAc,mDAMlBA,kBACIA,0BACAA,yBAAyDA,kEAiBlE,IAAME,EAAb,MAAM,MAAOA,EAWTpE,YAAoBqE,mBAVJlE,cAAWA,KAAKkE,SAASC,YACzBnE,uBAAoBA,KAAKkE,SAASE,WAElCpE,qBAAkB,IAAMA,KAAKkE,SAAS1B,kBACtCxC,gBAAa,IAAMA,KAAKkE,SAASjC,WAMG,CAJzC/B,WACP,OAAQF,KAAKkE,SAASlC,aAAe,EACxC,+CATQiC,GAAoBF,mCAApBE,EAAoBI,qGArGuBC,4GAeIA,iHAIHA,0GAMAA,0GAUCA,0GAiBFA,wGAIEA,6GASzCA,mHAMkDA,qGApFTA,+GAOCA,mHA0FZA,y6BAzGvCP,qBAAqC,WAI7BA,uBAOAA,uBASAA,iBAAyC,WACrCA,WAA8CA,QAC9CA,iBAAmB,SASXA,SAAwBA,YAIpCA,kBAAyC,YACrCA,YAAmDA,QACnDA,kBAAmBA,UAAuBA,UAE9CA,kBAAyC,YACrCA,YAA4CA,QAC5CA,kBACIA,+BACJA,UAEJA,kBAAyC,YACrCA,YAA4CA,QAC5CA,kBACIA,+BACJA,YAGRA,mBAEH,WAFGA,CAEH,YAEWA,aAA8CA,QAC9CA,kBACIA,4BACJA,QACAA,mDAIAA,8CAOJA,QACAA,kBAAyC,YACrCA,aAA0CA,QAC1CA,iBAAMA,UAAiBA,UAE3BA,kBAAyC,YACrCA,aAA+CA,QAC/CA,mBAAiEA,UAAoBA,UAEzFA,mBACAA,sBAEIA,gCAASQ,mBAAiB,GAF9BR,aAOAA,YAGRA,kBACAA,mCAEAA,QACAA,6BAOAA,oEAhGaA,0CAOAA,2CAWOA,8DAOAA,4CAMWA,qDAKfA,2DAMAA,2DAUAA,+DAICA,gDAIAA,wDAQCA,8BAIkCA,yCAAyBA,iCAiBnEA,uCAAqB,uOA2B1BE,CAAb,qICrF4BF,gBAGIA,0EAAWA,oBACrC,GAGuBA,0CAJGA,2BAA4B,kBAA5BA,CAA4B,iCAuC5BA,kBAIIA,0BACAA,gBAAMA,8BAAkBA,iBADXA,oGAGjBA,gBAOC,WAPDA,CAOC,YAKWA,SAIJA,QACAA,kBACIA,SACJA,sCAbJA,qCAMQA,+CAMAA,0IAxExBA,kBAGC,YAEOA,uBAQAA,kBASJA,QACAA,8BAKIA,gBAGJA,gBACAA,kBAAsB,eAKdA,sEAASA,uBAAmB,GAE5BA,uBACJA,QACAA,6BAA0B,aAIlBA,UACJA,QACAA,0BAOAA,wBAsBJA,QACAA,sBAEIA,sEAASA,wBAAoB,GAE7BA,wBAGJA,+DA9EKA,gCASDA,mDAEC,qCAWFA,+CAGPA,sCAKQA,sCASIA,oFAGCA,yCAUxBA,mFArEDA,iBAIC,UAJDA,CAIC,WAE6BA,iBAAKA,QAC3BA,8BAAoDA,QACpDA,kBACJA,QACAA,kBACIA,4CAuFJA,gCArF2BA,uEAyF/BA,kBACIA,0BACAA,aAAGA,8BAAkBA,iBADRA,sDAKjBA,kBAAoD,OAC7CA,kCAAsBA,WAkBlC,IAAMS,GAAb,MAAM,MAAOA,UAA+BC,IA+BxC5E,YAAoBqE,GAChBQ,QADgB1E,gBA9BbA,sBAAkB,EAETA,aAAU,IAAIC,IAAwB,IAEtCD,aAAUA,KAAKkE,SAASlB,QAExBhD,UAAOA,KAAKkE,SAAShE,KAErBF,aAAkC,GAGlCA,cAAU2E,SAAc,CACpC3E,KAAK4E,QACL5E,KAAKkE,SAASW,UACfvE,MACCuB,OAAKJ,IACD,MAAOqD,EAASD,GAAWpD,EACrBsD,EAASD,EAAQE,cACvB,OAAOF,EACDD,EAAQtE,OACH0E,GACGA,EAAIC,KAAKF,cAAcG,SAASJ,IAChCE,EAAIG,YAAYJ,cAAcG,SAASJ,IAE/CF,KAIE7E,kBAAgBQ,GAAMR,KAAKkE,SAASb,aAAa7C,EAIhE,CAEY6E,YAAYJ,GAAgB,qCACrCzB,EAAK8B,iBAAkB,EACvB,MAAMC,QAAgBC,SAAa,CAAEC,UAAWR,EAAIpE,KAC/CP,MAAKuB,OAAI,EAAGL,UAAWA,IACvBI,YACL4B,EAAK+B,QAAQN,EAAIpE,IAAM0E,GAAW,GAClC/B,EAAK8B,iBAAkB,CANc,IAOxC,+CA1CQd,GAAsBT,mCAAtBS,EAAsBH,mGAxHiCC,4FAgCxCA,sHACI,kCACJ,0oDAzDpBP,qBAAwC,sBAEhCA,sBAIAA,mBAEIA,yCAAiBQ,iBAAoB,GAFzCR,YASRA,mBACIA,0CAoGJA,QACAA,2CAMAA,yEApHYA,6BAYHA,oEAAiC,kVA4HrCS,CAAb,oJCxHoBT,SACIA,2BAIgB,qBAOhBA,qBAGIA,mGAEAA,yBACJA,QACJA,gCAjBQA,8BAAiB,eAKjBA,8BAAa,kBAAbA,CAAa,wBClClC,MAAM2B,GAAiB,CAC1B,CACIC,KAAM,MACNC,UD8DR,MAAM,MAAOC,UAAyBpB,IAqClC5E,YAAsBqE,GAClBQ,QADkB1E,gBApCNA,UAAO,UAEhBA,gBAAY,EAEZA,cAAW,GAEFA,aAAU,IAAMA,KAAKkE,SAAS4B,QAgC7C,CA9BU5F,WACP,OAAOF,KAAKkE,SAASlC,WACxB,CAEU+D,iBACP,OAAOC,SAAkBhG,KAAKkE,SAASlC,YAAahC,KAAKkF,KAC5D,CACMe,gBACHjG,KAAKkG,SAAW,CACZ,CACIrF,GAAI,QACJqE,KAAM,QACNxC,KAAM,CAAEE,MAAO,gCAEnB,CACI/B,GAAI,UACJqE,KAAM,UACNiB,MAAOnG,KAAKoG,cAAgB,IAC5B1D,KAAM,CAAEE,MAAO,sBAEnB,CACI/B,GAAI,UACJqE,KAAM,mBACNxC,KAAM,CAAEE,MAAO,sBAErByD,OAAOrG,KAAK+F,WACjB,CAMMO,WAEHtG,KAAKuG,aACD,OACAvG,KAAKkE,SAAShE,KAAK6B,UAAW7B,IAC1BF,KAAKoG,aAAe,KACpBpG,KAAKiG,gBACLjG,KAAKwG,WAAWtG,EAAhB,GAGX,CAEesG,WAAWtG,GAAiB,qCACxC,IAAKA,EAAM,OACX,MAAMuG,EAAa,CAAEC,OAAQ,EAAGC,MAAO,EAAGhF,UAAWzB,EAAKW,IAC1D2C,EAAK4C,mBAAqB1E,SAAa+E,GAClCnG,MAAKuB,OAAI,EAAG+E,WAAYA,IACxBhF,YACAsB,MAAOnC,GAAM,GAClByC,EAAKyC,eAPmC,IAQ3C,+CA7DQJ,GAAgB9B,qCAAhB8B,EAAgBxB,iiCA9DrBN,iBAEC,oBACiBA,sDAAuCA,QACrDA,0BAKAA,iBAA4D,qBAA5DA,CAA4D,cAShDA,6CAAqB,CAAI,GAEzBA,sBACJA,UAEJA,iBACIA,iCAoBJA,QACAA,oBAKIA,gCAASQ,WAAS,GAElBR,wBAIJA,mBArDUA,mCAGVA,+BAMIA,+BAYeA,mDA6BXA,wHASX8B,CAAb,KC7DQgB,SAAU,CACN,CAAElB,KAAM,QAASC,UAAW3B,GAC5B,CAAE0B,KAAM,UAAWC,UAAWpB,IAC9B,CAAEmB,KAAM,aAAcC,UAAWkB,MACjC,CAAEnB,KAAM,UAAWC,UAAWmB,MAC9B,CAAEpB,KAAM,KAAMqB,WAAY,WAGlC,CAAErB,KAAM,KAAMqB,WAAY,qBCKvB,IAAMC,GAAb,MAAM,MAAOA,kDAAgB,0BAAhBA,gCANLC,KACAC,KACAC,cAAsB1B,IACtB2B,QAGKJ,CAAb","names":["DriverStateService","constructor","_state","_dialog","this","BehaviorSubject","item","_loading","asObservable","_last_error","pipe","filter","d","PlaceDriver","switchMap","driver","isDriverCompiled","id","catchError","_","err","json","r","next","compilation_output","retryWhen","delay","tap","data","details","queryModules","driver_id","toPromise","map","shareReplay","subscribe","active_item","viewError","error","getValue","open","ViewResponseModalComponent","title","content","recompileDriver","openConfirmModal","icon","type","class","t","reason","close","loading","success","catch","notifyError","notifySuccess","removeModule","device","extra","i","system","removeSystemModule","statusText","message","o","replaceItem","i0","factory","DriverAboutComponent","_service","is_compiled","last_error","selectors","$localize","ctx","DriverModulesComponent","BaseClass","super","combineLatest","filter$","modules","filters","search","toLowerCase","mod","name","includes","custom_name","loadSystems","loading_systems","systems","querySystems","module_id","ROUTES","path","component","DriversComponent","create","extensions","extensionsForItem","updateTabList","tab_list","count","device_count","concat","ngOnInit","subscription","loadValues","query","offset","limit","total","children","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppDriversModule","CommonModule","FormsModule","RouterModule","SharedContentModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/drivers/driver-state.service.ts","./apps/backoffice/src/app/drivers/driver-about.component.ts","./apps/backoffice/src/app/drivers/driver-devices.component.ts","./apps/backoffice/src/app/drivers/drivers.component.ts","./apps/backoffice/src/app/drivers/drivers.routes.ts","./apps/backoffice/src/app/drivers/drivers.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    isDriverCompiled,\n    PlaceDriver,\n    PlaceModule,\n    queryModules,\n    recompileDriver,\n    removeSystemModule,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport {\n    catchError,\n    delay,\n    filter,\n    map,\n    retryWhen,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DriverStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _last_error = new BehaviorSubject<HashMap>(null);\n\n    public readonly item = this._state.item;\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly last_error = this._last_error.asObservable();\n\n    public readonly is_compiled = this.item.pipe(\n        filter((d) => !!d && d instanceof PlaceDriver),\n        switchMap((driver) => isDriverCompiled(driver.id)),\n        catchError(async (_: Response) => {\n            const err = await _?.json();\n            this._last_error.next(err?.compilation_output || _);\n            if (!err?.compilation_output) throw _;\n        }),\n        retryWhen(delay(1000)),\n        tap(_ => _ ? this._last_error.next(null) : '')\n    );\n\n    public readonly modules = this.item.pipe(\n        switchMap(async (item) => {\n            if (!item) return { data: [] }\n            this._loading.next(true);\n            const details = await queryModules({ driver_id: item.id }).toPromise();\n            this._loading.next(false);\n            return details;\n        }),\n        map((d) => d.data),\n        shareReplay()\n    );\n\n    public get active_item() {\n        return this._state.active_item;\n    }\n\n    constructor(private _state: ActiveItemService, private _dialog: MatDialog) {\n        this.item.subscribe(() => this._last_error.next(null));\n    }\n\n    public viewError() {\n        const error = this._last_error.getValue();\n        if (!error) return;\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { title: 'Driver Compilation Error', content: error },\n        });\n    }\n\n    public async recompileDriver() {\n        const details = await openConfirmModal(\n            {\n                title: `Recompile Driver`,\n                content: `<p>Are you sure you want recompile this driver?</p><p>New driver code will be loaded and device settings will be updated.</p>`,\n                icon: { type: 'icon', class: 'backoffice-cycle' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return details.close();\n        details.loading('Recompiling driver...');\n        const success = await recompileDriver(this._state.active_item.id)\n            .toPromise()\n            .catch((_) => null);\n        details.close();\n        if (!success) return notifyError('Failed to recompiled driver.');\n        notifySuccess('Successfully recompiled driver.');\n    }\n\n    public async removeModule(device: PlaceModule) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove module?',\n                content: `Remove ${device.driver_id}?<br>`,\n                extra: ['error', 'Note that all associated data be deleted immediatedly.'],\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        const system = await removeSystemModule(this.active_item.id, device.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id}. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed module.`);\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDriver } from '@placeos/ts-client';\nimport { DriverStateService } from './driver-state.service';\n\n@Component({\n    selector: 'driver-about',\n    template: `\n        <section class=\"mb-4 flex space-x-2\">\n            <div\n                class=\"shadow rounded p-2 border border-black/10 space-y-2 min-w-[45%] flex-1\"\n            >\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.default_uri\"\n                >\n                    <label i18n=\"@@driverDefaultURILabel\">Default URI</label>\n                    <div class=\"value\">{{ item.default_uri }}</div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.default_port\"\n                >\n                    <label i18n=\"@@driverDefaultPortLabel\">\n                        Default Port\n                    </label>\n                    <div class=\"value\">{{ item.default_port }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsCommit\">Repository</label>\n                    <div class=\"value\">\n                        <a\n                            [routerLink]=\"[\n                                '/repositories',\n                                item.repository_id,\n                                'about'\n                            ]\"\n                            class=\"underline\"\n                        >\n                            {{ item.repository_id }}</a\n                        >\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsModuleName\">Module Name</label>\n                    <div class=\"value\">{{ item?.module_name }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverCreatedAtLabel\">Created</label>\n                    <div class=\"value\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverUpdatedAtLabel\">Updated</label>\n                    <div class=\"value\">\n                        {{ item.updated_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"shadow rounded p-2 border border-black/10 space-y-2 min-w-[45%] flex-1 flex flex-col\"\n        >\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsCompiled\">Compiled</label>\n                    <div class=\"value\">\n                        {{ (compiled | async) ? 'true' : 'false' }}\n                    </div>\n                    <mat-spinner\n                        diameter=\"24\"\n                        *ngIf=\"!(compiled | async)\"\n                    ></mat-spinner>\n                    <button\n                        mat-button\n                        *ngIf=\"compilation_error | async\"\n                        (click)=\"viewErrors()\"\n                    >\n                        View Errors\n                    </button>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsCommit\">Commit</label>\n                    <code>{{ item.commit }}</code>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsFileName\">File Name</label>\n                    <div class=\"font-mono text-sm truncate\" [title]=\"item.file_name\">{{ item.file_name }}</div>\n                </div>\n                <div class=\"flex-1\"></div>\n                <button\n                    mat-button\n                    (click)=\"recompileDriver()\"\n                    i18n=\"@@driverReloadAction\"\n                    class=\"w-full\"\n                >\n                    Recompile Driver\n                </button>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">\n            Settings\n        </header>\n        <section *ngIf=\"item.settings; else load_state\">\n            <a-settings-form\n                [merge]=\"true\"\n                [id]=\"item.id\"\n                [settings]=\"item.settings\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@driverLoadingLabel\">Loading driver settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            label {\n                width: 6rem;\n            }\n        `,\n    ],\n})\nexport class DriverAboutComponent {\n    public readonly compiled = this._service.is_compiled;\n    public readonly compilation_error = this._service.last_error;\n\n    public readonly recompileDriver = () => this._service.recompileDriver();\n    public readonly viewErrors = () => this._service.viewError();\n\n    public get item(): PlaceDriver {\n        return (this._service.active_item || {}) as any;\n    }\n\n    constructor(private _service: DriverStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { DriverStateService } from './driver-state.service';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { PlaceModule, PlaceSystem, querySystems } from '@placeos/ts-client';\n\n@Component({\n    selector: 'driver-devices',\n    template: `\n        <section class=\"flex items-center mb-4\">\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter Devices...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(modules | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"w-12 p-2\">State</div>\n                    <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">Name</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body class=\"overflow-y-auto\">\n                    <div\n                        table-row\n                        *ngFor=\"let module of modules | async; let i = index\"\n                    >\n                        <div class=\"w-12 p-2 flex items-center justify-center\">\n                            <i\n                                *ngIf=\"module.system\"\n                                binding\n                                [(model)]=\"module.connected\"\n                                [sys]=\"module.system.id\"\n                                [mod]=\"module\"\n                                bind=\"connected\"\n                            ></i>\n                            <div\n                                class=\"h-2 w-2 rounded-full bg-black\"\n                                [class.bg-error]=\"\n                                    module.running && !module.connected\n                                \"\n                                [class.bg-success]=\"\n                                    module.running && module.connected\n                                \"\n                            ></div>\n                        </div>\n                        <div\n                            flex\n                            class=\"flex-1 p-2 underline\"\n                            i18n=\"@@nameLabel\"\n                        >\n                            <a [routerLink]=\"['/modules', module.id]\">\n                                {{ module.custom_name || module.name }}\n                            </a>\n                        </div>\n                        <div class=\"w-24 p-2\">\n                            <button\n                                mat-icon-button\n                                matTooltip=\"View Systems\"\n                                [matMenuTriggerFor]=\"menu\"\n                                (click)=\"loadSystems(module)\"\n                            >\n                                <app-icon className=\"backoffice-eye\"></app-icon>\n                            </button>\n                            <mat-menu #menu=\"matMenu\">\n                                <div\n                                    class=\"flex items-center justify-center px-2 pb-2 opacity-70 border-b border-gray-200 text-sm\"\n                                >\n                                    {{ systems[module.id]?.length }} System(s)\n                                </div>\n                                <div\n                                    *ngIf=\"loading_systems\"\n                                    class=\"flex items-center space-x-2 p-2 text-sm\"\n                                >\n                                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                                    <span>Loading systems...</span>\n                                </div>\n                                <a\n                                    mat-menu-item\n                                    *ngFor=\"\n                                        let system of systems[module.id] || []\n                                    \"\n                                    class=\"leading-tight\"\n                                    [routerLink]=\"['/systems', system.id]\"\n                                >\n                                    <div\n                                        class=\"flex flex-col justify-center px-2 h-full\"\n                                    >\n                                        <div class=\"text-base\">\n                                            {{\n                                                system.display_name ||\n                                                    system.name\n                                            }}\n                                        </div>\n                                        <div class=\"text-xs opacity-60\">\n                                            {{ system.id }}\n                                        </div>\n                                    </div>\n                                </a>\n                            </mat-menu>\n                            <button\n                                mat-icon-button\n                                (click)=\"removeModule(module)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading modules...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No modules with driver</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 28rem;\n            }\n        `,\n    ],\n})\nexport class DriverModulesComponent extends BaseClass {\n    public loading_systems = false;\n    /** Subject holding the value of the search */\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** Whether systems are being loaded */\n    public readonly loading = this._service.loading;\n    /** Currently active driver */\n    public readonly item = this._service.item;\n    /** List of systems associated with modules */\n    public readonly systems: HashMap<PlaceSystem[]> = {};\n    /** Whether systems are being loaded */\n    /** List of modules */\n    public readonly modules = combineLatest([\n        this.filter$,\n        this._service.modules,\n    ]).pipe(\n        map((details) => {\n            const [filters, modules] = details;\n            const search = filters.toLowerCase();\n            return filters\n                ? modules.filter(\n                      (mod) =>\n                          mod.name.toLowerCase().includes(search) ||\n                          mod.custom_name.toLowerCase().includes(search)\n                  )\n                : modules;\n        })\n    );\n\n    public readonly removeModule = (d) => this._service.removeModule(d);\n\n    constructor(private _service: DriverStateService) {\n        super();\n    }\n\n    public async loadSystems(mod: PlaceModule) {\n        this.loading_systems = true;\n        const systems = await querySystems({ module_id: mod.id })\n            .pipe(map(({ data }) => data))\n            .toPromise();\n        this.systems[mod.id] = systems || [];\n        this.loading_systems = false;\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PlaceDriver, queryModules } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport { extensionsForItem } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\n\n@Component({\n    selector: 'new-drivers-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <item-sidebar\n                class=\"hidden sm:block\"\n                [route]=\"name\"\n                title=\"Drivers\"\n            ></item-sidebar>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                <item-selection\n                    class=\"z-20 sm:hidden\"\n                    [route]=\"name\"\n                    title=\"Drivers\"\n                >\n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </item-selection>\n                <div class=\"flex flex-col flex-1 h-1/2\">\n                    <ng-container *ngIf=\"item?.id\">\n                        <item-details\n                            [can_edit]=\"true\"\n                            [item]=\"item\"\n                            type=\"Driver\"\n                        ></item-details>\n                        <item-tablist\n                            [base]=\"name\"\n                            [tabs]=\"tab_list\"\n                            [scrolled]=\"scroll > 0\"\n                            class=\"z-10\"\n                        ></item-tablist>\n                        <div\n                            #el\n                            class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                            (scroll)=\"scroll = el.scrollTop\"\n                        >\n                            <router-outlet></router-outlet>\n                        </div>\n                    </ng-container>\n                </div>\n                <button\n                    class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                    matTooltip=\"New driver\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"newItem()\"\n                >\n                    <app-icon\n                        [className]=\"'backoffice-plus'\"\n                        class=\"text-3xl\"\n                    ></app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DriversComponent extends BaseClass {\n    public readonly name = 'drivers';\n\n    public open_menu = false;\n    public device_count: number;\n    public tab_list = [];\n\n    public readonly newItem = () => this._service.create();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n    public updateTabList() {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'modules',\n                name: 'Modules',\n                count: this.device_count ?? '?',\n                icon: { class: 'backoffice-tablet' },\n            },\n            {\n                id: 'history',\n                name: 'Settings History',\n                icon: { class: 'backoffice-clock' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(protected _service: ActiveItemService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        \n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.device_count = null;\n                this.updateTabList();\n                this.loadValues(item as any);\n            })\n        );\n    }\n\n    protected async loadValues(item: PlaceDriver) {\n        if (!item) return;\n        const query: any = { offset: 0, limit: 1, driver_id: item.id };\n        this.device_count = await queryModules(query)\n            .pipe(map(({ total }) => total))\n            .toPromise()\n            .catch((_) => 0);\n        this.updateTabList();\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { DriverAboutComponent } from './driver-about.component';\nimport { DriverModulesComponent } from './driver-devices.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\nimport { DriversComponent } from './drivers.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: DriversComponent,\n        children: [\n            { path: 'about', component: DriverAboutComponent },\n            { path: 'modules', component: DriverModulesComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './drivers.routes';\n\nimport { DriverAboutComponent } from './driver-about.component';\nimport { DriverModulesComponent } from './driver-devices.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { DriversComponent } from './drivers.component';\n\n@NgModule({\n    declarations: [\n        DriverAboutComponent,\n        DriverModulesComponent,\n        DriversComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppDriversModule {}\n"],"x_google_ignoreList":[]}