{"version":3,"file":"786.063505c5c2f9653b.js","mappings":"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","names":["i0","_c0","item_r3","id","icon","name","PlaceComponent","AsyncHandler","extensions","extensionsForItem","this","_service","active_item","dark_mode","_users","debug_position","_debug","position","updateTabList","tab_list","class","concat","constructor","_settings","super","open_menu","ngOnInit","title","static","t","i1","i2","i3","i4","core","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","PlaceComponent_a_5_Template","PlaceComponent_app_debug_output_10_Template","PlaceComponent_app_debug_output_11_Template","PlaceDatabase","reindex","backfill","url","apiEndpoint","post","toPromise","Yz7","factory","ɵfac","providedIn","PlaceDatabaseDetailsComponent","_engine_service","reindexing","then","err","notifyError","JSON","stringify","response","message","backfilling","PlaceDatabaseDetailsComponent_ng_container_7_Template","PlaceDatabaseDetailsComponent_ng_container_14_Template","PlaceDatabaseDetailsComponent_ng_template_15_Template","_r3","_r7","ctx_r6","changelog","backoffice_logs","ctx_r1","backend_version","_r9","ctx_r8","changelog_data","api_r11","service","commit","version","build_time","platform_version","PlaceDetailsComponent_ng_container_28_div_1_Template","ctx_r3","api_details","PlaceDetailsComponent","user","backoffice_version","VERSION","stamp","backoffice_tag","tag","backoffice_hash","hash","backoffice_build","format","time","_dialog","_cdr","loadApiDetails","loadPlatformDetails","log","open","ChangelogModalComponent","data","copy","content","copyToClipboard","notifyInfo","_this","_asyncToGenerator","details","get","catch","detectChanges","_this2","replace","fetch","text","i18n_0","$localize","PlaceDetailsComponent_button_3_Template","PlaceDetailsComponent_code_25_Template","PlaceDetailsComponent_button_26_Template","PlaceDetailsComponent_ng_container_28_Template","PlaceDetailsComponent_ng_template_29_Template","length","_r5","AdminClusterNodeComponent","points","used_memory","humanReadableByteCount","node","memory_usage","total_memory","memory_total","memory_percentage","generateCharts","ngOnChanges","changes","history","list","unshift","slice","Math","max","map","event","idx","x","y","value","viewQuery","hostname","toFixed","total_cpu","node_r1","ctx_r0","cpu_history","PlaceClusterItemComponent","cluster","cluster_nodes","edge_nodes","inputs","PlaceClusterItemComponent_ng_container_0_Template","element_r4","_r6","$implicit","ctx_r5","confirmKillProcess","cpu_usage","module_instances","PlaceClusterTaskListComponent_div_9_div_12_Template","filtered_list","PlaceClusterTaskListComponent","close","EventEmitter","column_list","filter","BehaviorSubject","_poll","process_list","pipe","loading","switchMap","queryProcesses","include_status","catchError","_","console","error","of","l","sort","a","b","tap","shareReplay","combineLatest","processes","toLowerCase","includes","next","Date","now","interval","process","ref","ConfirmModalComponent","CONFIRM_METADATA","type","subscription","componentInstance","subscribe","reason","killing","killProcess","terminateProcess","outputs","emit","PlaceClusterTaskListComponent_div_9_Template","PlaceClusterTaskListComponent_ng_template_11_Template","_c4","getValue","tmp_3_0","_r2","cluster_r7","active_cluster","_c2","PlaceClusterDetailsComponent_ng_container_1_ng_container_1_ng_container_1_Template","cluster_list","PlaceClusterDetailsComponent_ng_container_1_ng_container_1_Template","_r4","_r11","ctx_r10","PlaceClusterDetailsComponent","clusters$","startWith","queryClusters","resp","date","forEach","nodes","push","core_cpu","shift","PlaceClusterDetailsComponent_ng_container_1_Template","PlaceClusterDetailsComponent_ng_template_2_Template","PlaceClusterDetailsComponent_ng_template_4_Template","item_r4","AdminInterfacesComponent_div_0_div_7_Template","interfaces","AdminInterfacesComponent","loadInterfaces","listInterfaceRepositories","Object","keys","localeCompare","AdminInterfacesComponent_div_0_Template","AdminInterfacesComponent_ng_template_1_Template","editBroker","ctx_r7","deleteBroker","description","host","port","filters","_c5","AdminBrokersComponent_div_6_div_18_Template","brokers","AdminBrokersComponent","loadBrokers","newBroker","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","item","PlaceMQTTBroker","save","addBroker","updateBroker","openConfirmModal","removeBroker","notifySuccess","queryBrokers","AdminBrokersComponent_div_6_Template","AdminBrokersComponent_ng_template_7_Template","type_r8","type_r11","condition_r9","_r13","ExtensionModalComponent_main_4_div_27_mat_option_7_Template","ctx_r16","removeCondition","_c19","condition_ops","_c20","ExtensionModalComponent_main_4_mat_option_8_Template","ExtensionModalComponent_main_4_label_26_Template","ExtensionModalComponent_main_4_div_27_Template","_r18","ctx_r17","addCondition","form","available_types","controls","conditions","_r20","ctx_r19","submit","ctx_r2","ExtensionModalComponent","_data","_hotkey","FormGroup","FormControl","Validators","required","listen","patchValue","condition","setValue","c","markAllAsTouched","valid","metadata","MAT_DIALOG_DATA","i18n_1","ExtensionModalComponent_button_3_Template","ExtensionModalComponent_main_4_Template","ExtensionModalComponent_footer_5_Template","ExtensionModalComponent_ng_template_6_Template","domain_r7","extension_r9","editExtension","ctx_r12","removeExtension","_c1","PlaceExtensionsComponent_div_2_div_14_div_12_Template","extension_list","_r14","ctx_r13","domain","ctx_r15","setDomain","PlaceExtensionsComponent_div_2_mat_option_6_Template","PlaceExtensionsComponent_div_2_div_14_Template","domain_list","PlaceExtensionsComponent","queryDomains","r","authority","match","find","d","config","backoffice","extend","parse","undefined","first","_ref","i","updateDomain","_x","apply","arguments","_this3","_ref2","e","_x2","_this4","ext","updated","PlaceDomain","attrs","PlaceExtensionsComponent_div_2_Template","PlaceExtensionsComponent_ng_template_3_Template","PlaceExtensionsComponent_ng_template_5_Template","BookingLimitsModalComponent","_dialog_ref","tenant","booking_limits","limits","k","amount","disableClose","BookingLimitsModalComponent_button_4_Template","BookingLimitsModalComponent_main_5_Template","BookingLimitsModalComponent_footer_6_Template","BookingLimitsModalComponent_ng_template_7_Template","item_r10","key","name_map","StaffTenantModalComponent_main_5_form_35_ng_container_1_span_4_Template","StaffTenantModalComponent_main_5_form_35_ng_container_1_input_8_Template","StaffTenantModalComponent_main_5_form_35_ng_container_1_textarea_9_Template","disabled","ctx_r9","StaffTenantModalComponent_main_5_form_35_ng_container_1_Template","credentials","_r17","show_outlook","StaffTenantModalComponent_main_5_div_31_Template","StaffTenantModalComponent_main_5_form_35_Template","StaffTenantModalComponent_main_5_div_36_Template","StaffTenantModalComponent_main_5_form_37_Template","platform","delegated","_r19","ctx_r18","FIELD_NAME_MAPPING","issuer","conference_type","signing_key","sub","client_id","client_secret","scopes","user_agent","StaffTenantModalComponent","office_form","google_form","email_domain","service_account","email","fields","handleDelegation","field","disable","setValidators","enable","updateValueAndValidity","valueChanges","removeControl","addControl","app_id","app_domain","app_resource","source_location","base_path","getInvalidFields","reduce","m","outlook_config","cleanObject","put","StaffTenantModalComponent_button_4_Template","StaffTenantModalComponent_main_5_Template","StaffTenantModalComponent_footer_6_Template","StaffTenantModalComponent_ng_template_7_Template","domain_r6","item_r9","editLimits","editTenant","removeTenant","PlaceStaffAPIComponent_ng_container_9_div_1_div_9_Template","tenants","PlaceStaffAPIComponent_ng_container_9_div_1_Template","tmp_0_0","ctx_r4","PlaceStaffAPIComponent","afterClosed","action","system","del","statusText","PlaceStaffAPIComponent_mat_option_6_Template","PlaceStaffAPIComponent_ng_container_9_Template","PlaceStaffAPIComponent_ng_template_10_Template","PlaceStaffAPIComponent_ng_template_12_Template","EdgeModalComponent","edge","new_edge","updateEdge","addEdge","EdgeModalComponent_button_4_Template","EdgeModalComponent_main_5_Template","EdgeModalComponent_footer_6_Template","EdgeModalComponent_ng_template_7_Template","item_r8","_r10","edit","ctx_r11","remove","PlaceEdgeComponent_ng_container_2_div_1_div_10_Template","edges","PlaceEdgeComponent_ng_container_2_div_1_Template","copyKey","x_api_key","PlaceEdgeComponent","last_change","_clipboard","_change","_hide","_edge_list","debounceTime","queryEdges","hide","token","retrieveEdgeToken","sessionStorage","setItem","_ref3","removeEdge","removeItem","_x3","edge_data","getItem","PlaceEdgeComponent_ng_container_2_Template","PlaceEdgeComponent_div_3_Template","PlaceEdgeComponent_ng_template_5_Template","PlaceEdgeComponent_ng_template_7_Template","tmp_2_0","schema_r5","schema_copy","saveSchema","schema","AdminSchemasComponent","_state","schema_list","schemas","copySchema","active_schema","newSchema","AdminSchemasComponent_mat_option_6_Template","preventDefault","AdminSchemasComponent_div_13_Template","AdminSchemasComponent_ng_container_15_Template","AdminSchemasComponent_ng_template_16_Template","getUnixTime","dirtyDate","requiredArgs","floor","getTime","toDate","PlaceAPIKeyDetails","user_id","authority_id","permissions","created_at","updated_at","secret","scope_r13","_r15","ctx_r14","removeScope","option_r16","addScope","input","item_r19","_r21","ctx_r20","setSearch","APIKeyModalComponent_main_4_mat_chip_23_Template","_r23","ctx_r22","APIKeyModalComponent_main_4_mat_option_29_Template","ctx_r24","focusInput","stopPropagation","ctx_r26","APIKeyModalComponent_main_4_button_44_Template","APIKeyModalComponent_main_4_button_47_Template","scope_list","separators","_c3","users","tmp_12_0","_r28","ctx_r27","APIKeyModalComponent","minLength","search_str","available_scopes","sys_admin","support","ENTER","COMMA","SPACE","setTimeout","_input_el","nativeElement","focus","s","addChipItem","removeChipItem","join","APIKeyModalComponent_button_3_Template","APIKeyModalComponent_main_4_Template","APIKeyModalComponent_footer_5_Template","APIKeyModalComponent_ng_template_6_Template","APIKeyService","_search","_domain","_last_key","last_key","asObservable","active_domain","available_domains","limit","available_keys","query","query_params","fn","path","q","queryUsers","newKey","Promise","race","create","form_data","removeKey","domain_r5","tmp_1_0","scope_r11","AdminAPIKeysComponent_div_14_div_14_code_6_Template","deleteKey","AdminAPIKeysComponent_div_14_div_14_Template","key_list","AdminAPIKeysComponent","take","AdminAPIKeysComponent_mat_option_7_Template","AdminAPIKeysComponent_div_12_Template","AdminAPIKeysComponent_div_14_Template","AdminAPIKeysComponent_ng_template_16_Template","tmp_4_0","PATH","PlaceStorage","assign","ext_r3","mime_r4","StorageProviderModalComponent","ALLOWED_FILE_EXTENSIONS","ALLOWED_MIME_TYPES","storage","storage_type","bucket_name","region","access_key","access_secret","endpoint","ext_filter","mime_filter","invalid","saveStorage","updateStorage","method","update","addStorage","StorageProviderModalComponent_mat_option_46_Template","StorageProviderModalComponent_mat_option_52_Template","StorageProviderModalComponent_footer_53_Template","StorageComponent_ng_container_11_div_1_div_12_Template","storage_list","StorageComponent_ng_container_11_div_1_Template","ROUTES","component","canActivate","AuthorisedAdminGuard","children","StorageComponent","storage_data","queryStorage","auth_id","domains","removeStorage","StorageComponent_mat_option_7_Template","StorageComponent_ng_container_11_Template","StorageComponent_ng_template_12_Template","StorageComponent_ng_template_14_Template","ExtensionOutletComponent","redirectTo","AppPlaceModule","oAB","cJS","imports","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","forChild","SharedContentModule","period","scheduler","async","isNumeric","schedule","Observable","subscriber","add","dispatch","counter","state"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/admin/admin.component.ts","./apps/backoffice/src/app/common/database.service.ts","./apps/backoffice/src/app/admin/database-details.component.ts","./apps/backoffice/src/app/admin/details.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-node.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-item.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-task-list.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-details.component.ts","./apps/backoffice/src/app/admin/interfaces.component.ts","./apps/backoffice/src/app/admin/brokers.component.ts","./apps/backoffice/src/app/admin/extension-modal/extension-modal.component.html","./apps/backoffice/src/app/admin/extension-modal/extension-modal.component.ts","./apps/backoffice/src/app/admin/extensions.component.ts","./apps/backoffice/src/app/admin/booking-limits-modal.component.ts","./apps/backoffice/src/app/admin/staff-tenant-modal.component.ts","./apps/backoffice/src/app/admin/staff-api.component.ts","./apps/backoffice/src/app/admin/edge-modal.component.ts","./apps/backoffice/src/app/admin/edge.component.ts","./apps/backoffice/src/app/admin/schemas.component.ts","./node_modules/date-fns/esm/getUnixTime/index.js","./node_modules/date-fns/esm/getTime/index.js","./apps/backoffice/src/app/admin/api-keys/api-key-details.class.ts","./apps/backoffice/src/app/admin/api-keys/api-key-modal.component.ts","./apps/backoffice/src/app/admin/api-keys/api-keys.service.ts","./apps/backoffice/src/app/admin/api-keys/api-keys.component.ts","./apps/backoffice/src/app/admin/storage/storage.fn.ts","./apps/backoffice/src/app/admin/storage/storage-provider-modal.component.ts","./apps/backoffice/src/app/admin/storage/storage.component.ts","./apps/backoffice/src/app/admin/admin.routes.ts","./apps/backoffice/src/app/admin/admin.module.ts","./node_modules/rxjs/_esm2015/internal/observable/interval.js"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport { extensionsForItem } from '../common/api';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { ActiveItemService } from '../common/item.service';\nimport { SettingsService } from '../common/settings.service';\nimport { BackofficeUsersService } from '../users/users.service';\n\n@Component({\n    selector: 'app-engine',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-base-200  bg-base-100 \"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <div class=\"flex flex-col h-full flex-1 overflow-hidden w-px\">\n                <div class=\"flex flex-1 z-0 h-1/2  \">\n                    <div\n                        class=\"h-full relative sm:w-56 px-2 my-4 border-r border-base-200 z-10 pt-10 sm:pt-0\"\n                    >\n                        <a\n                            *ngFor=\"let item of tab_list\"\n                            class=\"flex items-center space-x-2 m-2 rounded h-8 px-3 hover:bg-base-200\"\n                            [routerLink]=\"['/admin', item.id]\"\n                            routerLinkActive=\"active\"\n                        >\n                            <app-icon [icon]=\"item.icon\"></app-icon>\n                            <span class=\"hidden sm:block\">{{ item.name }}</span>\n                        </a>\n                    </div>\n                    <div\n                        class=\"relative flex-1 w-1/2 h-full z-0 px-4  overflow-auto\"\n                    >\n                        <router-outlet></router-outlet>\n                    </div>\n                    <button\n                        btn\n                        icon\n                        class=\"sm:hidden mr-2 absolute top-2 left-4 z-40\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </div>\n                <app-debug-output\n                    below\n                    *ngIf=\"debug_position === 'below'\"\n                ></app-debug-output>\n            </div>\n            <app-debug-output\n                side\n                *ngIf=\"debug_position === 'side'\"\n                class=\"h-full max-w-[30rem]\"\n            ></app-debug-output>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n\n            .active {\n                background-color: var(--s) !important;\n                color: var(--sc);\n                margin-right: -1px;\n            }\n        `,\n    ],\n})\nexport class PlaceComponent extends AsyncHandler {\n    public tab_list = [];\n    public open_menu = false;\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, 'admin');\n    }\n\n    public get dark_mode() {\n        return this._users.dark_mode;\n    }\n\n    public get debug_position() {\n        return this._debug.position;\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info' } },\n            {\n                id: 'database',\n                name: 'Database',\n                icon: { class: 'backoffice-database' },\n            },\n            {\n                id: 'clusters',\n                name: 'Clusters',\n                icon: { class: 'backoffice-server' },\n            },\n            { id: 'edge', name: 'Edges', icon: { class: 'backoffice-server' } },\n            {\n                id: 'interfaces',\n                name: 'Interfaces',\n                icon: { class: 'backoffice-browser' },\n            },\n            {\n                id: 'brokers',\n                name: 'MQTT Brokers',\n                icon: { class: 'backoffice-server' },\n            },\n            {\n                id: 'staff-api',\n                name: 'Staff API',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'extensions',\n                name: 'Extensions',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'api-keys',\n                name: 'API Keys',\n                icon: { class: 'backoffice-key' },\n            },\n            {\n                id: 'schemas',\n                name: 'Custom Schemas',\n                icon: { class: 'backoffice-list' },\n            },\n            {\n                id: 'upload-storage',\n                name: 'Upload Storage',\n                icon: { class: 'backoffice-upload' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _service: ActiveItemService,\n        private _users: BackofficeUsersService,\n        private _debug: PlaceDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.title = 'Admin';\n        this.updateTabList();\n    }\n}\n","import { post, apiEndpoint } from '@placeos/ts-client';\nimport { Injectable } from '@angular/core';\n\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlaceDatabase extends AsyncHandler {\n    public reindex(backfill: boolean = true) {\n        const url = `${apiEndpoint()}/reindex${\n            backfill ? '?backfill=true' : ''\n        }`;\n        return post(url, null).toPromise();\n    }\n\n    public backfill() {\n        const url = `${apiEndpoint()}/backfill`;\n        return post(url, null).toPromise();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { PlaceDatabase } from 'apps/backoffice/src/app/common/database.service';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'app-database-details',\n    template: `\n        <div class=\"flex w-full p-4 space-x-4\">\n            <div\n                class=\"rounded p-2 border border-base-200  space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <p class=\"text-center p-2\">\n                    Re-index elasticsearch for the<br />current state of the\n                    database\n                </p>\n                <button\n                    btn\n                    class=\"w-[calc(100%-0.5rem)]\"\n                    [disabled]=\"reindexing\"\n                    (click)=\"reindex()\"\n                >\n                    <ng-container *ngIf=\"!reindexing; else spinner\">\n                        Re-index\n                    </ng-container>\n                </button>\n            </div>\n            <div\n                class=\"rounded p-2 border border-base-200  space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <p class=\"text-center p-2\">\n                    Backfill elasticsearch with the<br />current state of the\n                    database\n                </p>\n                <button\n                    btn\n                    class=\"w-[calc(100%-0.5rem)]\"\n                    [disabled]=\"backfilling\"\n                    (click)=\"backfill()\"\n                >\n                    <ng-container *ngIf=\"!backfilling; else spinner\">\n                        Backfill\n                    </ng-container>\n                </button>\n            </div>\n        </div>\n        <ng-template #spinner>\n            <div class=\"flex justify-center w-full my-1\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding-top: 1em;\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            button {\n                min-width: 10em;\n                margin: 0.25em;\n            }\n\n            mat-card {\n                margin: 0.5em;\n                text-align: center;\n            }\n        `,\n    ],\n})\nexport class PlaceDatabaseDetailsComponent {\n    /** Whether backend is reindexing the database */\n    public reindexing: boolean;\n    /** Whether backend is reindexing the database */\n    public backfilling: boolean;\n\n    constructor(private _engine_service: PlaceDatabase) {}\n\n    public reindex() {\n        this.reindexing = true;\n        this._engine_service.reindex().then(\n            () => (this.reindexing = false),\n            (err) => {\n                this.reindexing = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    public backfill() {\n        this.backfilling = true;\n        this._engine_service.backfill().then(\n            () => (this.backfilling = false),\n            (err) => {\n                this.backfilling = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n}\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { get, apiEndpoint } from '@placeos/ts-client';\n\nimport { VERSION } from '../../environments/version';\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport {\n    ChangelogModalComponent,\n    ChangelogModalData,\n} from 'apps/backoffice/src/app/overlays/changelog-modal/changelog-modal.component';\nimport { BackofficeUsersService } from 'apps/backoffice/src/app/users/users.service';\nimport {\n    notifyError,\n    notifyInfo,\n} from 'apps/backoffice/src/app/common/notifications';\n\nimport { copyToClipboard } from '../common/general';\nimport { format } from 'date-fns';\n\nexport interface PlaceServiceDetails {\n    /** Name of the service */\n    service: string;\n    /** Commit hash of the service */\n    commit: string;\n    /** Current version number of the service */\n    version: string;\n    /** Build time of the active version of the service */\n    build_time: string;\n    /** Version of the backend service platform */\n    platform_version: string;\n}\n\n@Component({\n    selector: 'app-engine-details',\n    template: `\n        <div class=\"flex items-center space-x-2\">\n            <h3 class=\"text-lg font-medium\" i18n=\"@@backoffice\">\n                Application Details (Backoffice)\n            </h3>\n            <button\n                *ngIf=\"backoffice_logs\"\n                class=\"p-2 text-xs underline\"\n                (click)=\"changelog(backoffice_logs)\"\n            >\n                View Changelog\n            </button>\n        </div>\n        <section class=\"space-y-2 mb-4 flex flex-col px-2\">\n            <div class=\"flex items-center\">\n                <label for=\"version\" class=\"w-24\" i18n=\"@@version\"\n                    >Version:</label\n                >\n                <code\n                    name=\"version\"\n                    (click)=\"copy('version', backoffice_version)\"\n                >\n                    {{ backoffice_version }}\n                </code>\n                <code\n                    name=\"tag\"\n                    class=\"ml-2\"\n                    (click)=\"copy('tag', backoffice_tag)\"\n                >\n                    {{ backoffice_tag }}\n                </code>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"hash\" class=\"w-24\" i18n=\"@@commitHash\"\n                    >Commit Hash:</label\n                >\n                <code name=\"hash\" (click)=\"copy('hash', backoffice_hash)\">\n                    {{ backoffice_hash }}\n                </code>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"build-time\" class=\"w-24\" i18n=\"@@buildTime\"\n                    >Build:</label\n                >\n                <div\n                    name=\"build-time\"\n                    class=\"text-sm\"\n                    (click)=\"copy('build time', backoffice_build)\"\n                >\n                    {{ backoffice_build }}\n                </div>\n            </div>\n        </section>\n        <div class=\"flex items-center space-x-2\">\n            <div class=\"text-lg font-medium\" i18n=\"@@apiHeader\">\n                API Services\n            </div>\n            <code *ngIf=\"backend_version\">{{ backend_version }}</code>\n            <button\n                *ngIf=\"changelog_data\"\n                class=\"p-2 text-xs underline\"\n                (click)=\"changelog(changelog_data)\"\n            >\n                View Changelog\n            </button>\n        </div>\n        <section class=\"flex flex-wrap py-2\">\n            <ng-container *ngIf=\"api_details.length > 0; else empty_state\">\n                <div\n                    class=\"bg-base-100  rounded border border-base-200  m-2 min-w-[40%] flex-1 overflow-hidden\"\n                    *ngFor=\"let api of api_details\"\n                >\n                    <h3\n                        class=\"w-full px-4 py-2 mb-1 border-b border-base-200  mono\"\n                    >\n                        {{ api.service }}\n                    </h3>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-base-200/20\"\n                    >\n                        <label class=\"w-24\">Commit Hash</label>\n                        <code>\n                            {{ api.commit | slice: 0:8 }}\n                        </code>\n                    </div>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-base-200/20\"\n                    >\n                        <label class=\"w-24\">Version</label>\n                        <code>\n                            {{ api.version }}\n                        </code>\n                    </div>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-base-200/20\"\n                    >\n                        <label class=\"w-24\">Build time</label>\n                        <div class=\"text-sm\">\n                            {{ api.build_time | date: 'MMM d, y, h:mm a' }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-base-200/20 mb-1\"\n                    >\n                        <label class=\"w-24\">Platform</label>\n                        <code>\n                            {{ api.platform_version }}\n                        </code>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #empty_state>\n            <div class=\"w-full p-24 flex flex-col items-center justify-center\">\n                <div class=\"p-4 border rounded-lg bg-base-200  opacity-60\">\n                    No API service details available.\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class PlaceDetailsComponent extends AsyncHandler implements OnInit {\n    /** Current details about the API */\n    public api_details: PlaceServiceDetails[] = [];\n    public changelog_data: string = '';\n    public backend_version = '';\n    public backoffice_logs = '';\n\n    public get user() {\n        return this._users.user;\n    }\n\n    public get backoffice_version() {\n        return VERSION?.stamp || '';\n    }\n\n    public get backoffice_tag() {\n        return VERSION?.tag || '';\n    }\n\n    public get backoffice_hash() {\n        return VERSION?.hash || '';\n    }\n\n    public get backoffice_build() {\n        return `${format(VERSION.time, 'dd MMM yyyy')} at ${format(\n            VERSION.time,\n            ' h:mma'\n        )}`;\n    }\n\n    constructor(\n        private _users: BackofficeUsersService,\n        private _dialog: MatDialog,\n        private _cdr: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadApiDetails();\n        this.loadPlatformDetails();\n    }\n\n    public changelog(log: string) {\n        this._dialog.open<ChangelogModalComponent, ChangelogModalData>(\n            ChangelogModalComponent,\n            {\n                data: { changelog: log },\n            }\n        );\n    }\n\n    public copy(name: string, content: string) {\n        copyToClipboard(content);\n        notifyInfo(`Copied ${name} to clipboard`);\n    }\n\n    public async loadApiDetails() {\n        const details = await get(`${apiEndpoint()}/cluster/versions`)\n            .toPromise()\n            .catch((err) =>\n                notifyError(\n                    `Error loading API details. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                )\n            );\n        this.api_details = (details as any) || [];\n        this._cdr.detectChanges();\n    }\n\n    public async loadPlatformDetails() {\n        const { changelog, version } = await get(`${apiEndpoint()}/platform`)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error loading API details. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                throw err;\n            });\n        this.changelog_data = changelog.replace('# Changelog\\n\\n', '');\n        this.backend_version = version;\n        this.backoffice_logs = await (\n            await fetch(\n                'https://raw.githubusercontent.com/PlaceOS/backoffice/develop/CHANGELOG.md'\n            )\n        ).text();\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { humanReadableByteCount } from '@placeos/ts-client';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { Point } from '../../common/types';\n\ninterface PlaceClusterRunCounts {\n    modules: number;\n    drivers: number;\n}\n\nexport interface PlaceClusterNode {\n    hostname: string;\n    cpu_count: number;\n    core_cpu: number;\n    total_cpu: number;\n    memory_total: number;\n    memory_usage: number;\n    core_memory: number;\n    run_count?: PlaceClusterRunCounts;\n}\n\nexport interface PlaceClusterUsageStamp {\n    id: number;\n    value: number;\n}\n\n@Component({\n    selector: 'admin-cluster-node',\n    template: `\n        <h4>{{ node?.hostname }}</h4>\n        <div class=\"mb-2 h-40 w-64\">\n            <div basic-line-graph [points]=\"points\"></div>\n        </div>\n        <div class=\"memory-utilisation\">\n            <div\n                class=\"flex items-center justify-between space-x-2 p-2 text-left\"\n            >\n                <label i18n=\"@@cluserMemoryUsed\" class=\"w-28\">\n                    Memory Used\n                </label>\n                <div class=\"value flex-1 text-right flex space-x-2\">\n                    <code>{{ used_memory }} / {{ total_memory }}</code>\n                    <code> {{ memory_percentage.toFixed(2) }}% </code>\n                </div>\n            </div>\n            <div\n                class=\"flex items-center justify-between space-x-2 bg-base-200 rounded p-2 text-left\"\n            >\n                <label i18n=\"@@clusterCpuUsage\" class=\"w-28\">CPU Usage</label>\n                <code> {{ node?.total_cpu }}% </code>\n            </div>\n        </div>\n    `,\n    styles: [],\n})\nexport class AdminClusterNodeComponent implements OnChanges, OnInit {\n    /** Node to display on the view */\n    @Input() public node: PlaceClusterNode;\n    /** Historical data for node */\n    @Input() public history: PlaceClusterUsageStamp[];\n    /** Store for the chart data object */\n    // private _chart: Chart;\n    /**  */\n    public points: Point[] = [];\n\n    public get used_memory() {\n        return humanReadableByteCount((this.node?.memory_usage || 0) * 1024);\n    }\n\n    public get total_memory() {\n        return humanReadableByteCount((this.node?.memory_total || 0) * 1024);\n    }\n\n    public get memory_percentage() {\n        return (\n            ((this.node?.memory_usage || 0) / (this.node?.memory_total || 1)) *\n            100\n        );\n    }\n\n    @ViewChild('chart', { static: true })\n    public _chart_el: ElementRef<HTMLCanvasElement>;\n\n    public ngOnInit() {\n        this.generateCharts();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.history && this.history) {\n            this.generateCharts();\n        }\n    }\n\n    public generateCharts(): void {\n        const list = [...this.history] || [];\n        while (list.length < 12) {\n            list.unshift({} as any);\n        }\n        const data = list\n            .slice(Math.max(0, list.length - 12))\n            .map((event, idx) => ({\n                x: idx,\n                y: event.value || 0,\n            }));\n        this.points = [...data];\n    }\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { PlaceCluster } from '@placeos/ts-client';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    PlaceClusterNode,\n    PlaceClusterUsageStamp,\n} from './cluster-node.component';\n\n@Component({\n    selector: 'engine-cluster-item',\n    template: `\n        <ng-container *ngFor=\"let node of cluster_nodes\">\n            <admin-cluster-node\n                [node]=\"node\"\n                [history]=\"cpu_history[node.hostname] || []\"\n            ></admin-cluster-node>\n        </ng-container>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterItemComponent implements OnChanges {\n    /** Cluster to display details for */\n    @Input() public cluster: PlaceCluster;\n    /** List of historical data for cluster's CPU usage */\n    @Input() public cpu_history: HashMap<PlaceClusterUsageStamp[]> = {};\n    /** List of nodes contained by the cluster */\n    public cluster_nodes: PlaceClusterNode[];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.cluster && this.cluster) {\n            this.cluster_nodes = [this.cluster, ...this.cluster.edge_nodes];\n            this.cpu_history = this.cpu_history || {};\n        }\n    }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceCluster,\n    PlaceProcess,\n    terminateProcess,\n    queryProcesses,\n} from '@placeos/ts-client';\n\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal.component';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { BehaviorSubject, combineLatest, interval, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    startWith,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Component({\n    selector: 'engine-cluster-task-list',\n    template: `\n        <div class=\"flex items-center mb-4\">\n            <button btn icon (click)=\"close.emit()\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'backoffice-arrow-left' }\"\n                ></app-icon>\n            </button>\n            <h3 class=\"text-lg font-medium\" i18n=\"@@clusterHeader\">\n                Cluster - {{ cluster?.hostname }}\n            </h3>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"h-12\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass\"\n                ></app-icon>\n                <input\n                    matInput\n                    [ngModel]=\"filter.getValue()\"\n                    (ngModelChange)=\"filter.next($event)\"\n                    placeholder=\"Filter processes...\"\n                />\n            </mat-form-field>\n        </div>\n        <div\n            role=\"table\"\n            class=\"h-1/2 flex-1\"\n            *ngIf=\"(filtered_list | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Name</div>\n                <div class=\"w-24 p-2\">CPU %</div>\n                <div class=\"w-24 p-2\">Memory</div>\n                <div class=\"w-24 p-2\">Instances</div>\n                <div class=\"w-12 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let element of filtered_list | async\">\n                    <div class=\"flex-1 p-2\" [title]=\"element.id\">\n                        <code\n                            class=\"truncate\"\n                            [innerHTML]=\"element.id | driverFormat\"\n                        ></code>\n                    </div>\n                    <div class=\"w-24 p-2 text-right justify-end\">\n                        {{ element.cpu_usage.toFixed(2) }}%\n                    </div>\n                    <div class=\"w-24 p-2 text-right justify-end\">\n                        {{ element.used_memory }}\n                    </div>\n                    <div class=\"w-24 p-2 text-right justify-end\">\n                        {{ element.module_instances }}\n                    </div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button btn icon (click)=\"confirmKillProcess(element)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <p i18n=\"@@processTableEmpty\">No tasks running on cluster</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterTaskListComponent extends AsyncHandler {\n    /** Cluster to display tasks details for */\n    @Input() public cluster: PlaceCluster;\n    /** Emitter for close events */\n    @Output() public close = new EventEmitter<void>();\n    /** Whether the task list is updating */\n    public loading: boolean;\n    /** ID of the process being killed */\n    public killing: string;\n\n    public column_list: string[] = [\n        'id',\n        'cpu_usage',\n        'memory_usage',\n        'module_instances',\n        'running',\n    ];\n\n    public filter = new BehaviorSubject('');\n\n    private _poll = new BehaviorSubject(0);\n\n    public readonly process_list: Observable<PlaceProcess[]> = this._poll.pipe(\n        filter(() => !this.loading),\n        switchMap(() => {\n            this.loading = true;\n            return queryProcesses(this.cluster.id, {\n                include_status: true,\n            } as any).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            );\n        }),\n        map((l) =>\n            (l || []).sort((a, b) => b.module_instances - a.module_instances)\n        ),\n        tap(() => (this.loading = false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_list = combineLatest([\n        this.filter,\n        this.process_list,\n    ]).pipe(\n        map(([filter, processes]) => {\n            return processes.filter((_) =>\n                _.id.toLowerCase().includes(filter.toLowerCase())\n            );\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), 5000);\n    }\n\n    public confirmKillProcess(process: PlaceProcess): void {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want kill the process for \"${process.id}\"?</p>\n                    <p>The process will be terminated <strong>immediately</strong>.\n                    The process may be restarted after a short while.</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm_kill',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.killing = process.id;\n                    ref.componentInstance.loading = 'Processing request...';\n                    this.killProcess(process).then(\n                        () => {\n                            this.killing = null;\n                            ref.close();\n                        },\n                        (err) => {\n                            ref.componentInstance.loading = null;\n                            this.killing = null;\n                            notifyError(\n                                `Error killing process. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            );\n                            ref.close();\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public killProcess(process: PlaceProcess) {\n        return terminateProcess(this.cluster.id, process.id).toPromise();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n    map,\n    catchError,\n    switchMap,\n    tap,\n    filter,\n    startWith,\n} from 'rxjs/operators';\n\nimport { PlaceCluster, queryClusters } from '@placeos/ts-client';\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport { PlaceClusterUsageStamp } from './cluster-node.component';\nimport { interval } from 'rxjs';\n\n@Component({\n    selector: 'engine-cluster-details',\n    template: `\n        <div class=\"flex flex-wrap overflow-auto max-h-full\">\n            <ng-container\n                *ngIf=\"cluster_list && cluster_list.length; else empty_state\"\n            >\n                <ng-container *ngIf=\"!active_cluster; else process_state\">\n                    <ng-container *ngFor=\"let cluster of cluster_list\">\n                        <mat-card class=\"m-2 text-center\">\n                            <mat-card-header>\n                                <mat-card-title clas=\"capitalize\"\n                                    >{{\n                                        cluster.hostname || 'Undefined Cluster'\n                                    }}\n                                </mat-card-title>\n                            </mat-card-header>\n                            <mat-card-content>\n                                <engine-cluster-item\n                                    [cluster]=\"cluster\"\n                                    [cpu_history]=\"\n                                        cpu_history[cluster.id] || []\n                                    \"\n                                ></engine-cluster-item>\n                            </mat-card-content>\n                            <mat-card-actions>\n                                <button\n                                    btn\n                                    matRipple\n                                    (click)=\"active_cluster = cluster\"\n                                    i18n=\"@@viewClusterProcesses\"\n                                    class=\"mx-2\"\n                                >\n                                    View Processes\n                                </button>\n                            </mat-card-actions>\n                        </mat-card>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center p-8 space-y-2\"\n            >\n                <app-icon class=\"text-3xl\">close</app-icon>\n                <div class=\"text\" i18n=\"@@clusterListEmpty\">\n                    No Cluster details to show\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #process_state>\n            <engine-cluster-task-list\n                [cluster]=\"active_cluster\"\n                (close)=\"active_cluster = null\"\n            ></engine-cluster-task-list>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterDetailsComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** List of available clusters on this instance of engine */\n    public cluster_list: PlaceCluster[] = [];\n    /** Map of clusters to CPU usage history */\n    public cpu_history: HashMap<HashMap<PlaceClusterUsageStamp[]>> = {};\n    /** Active cluster to show details for */\n    public active_cluster: PlaceCluster;\n    /** Whether cluster details are being loaded */\n    public loading: boolean;\n\n    public readonly clusters$ = interval(2000).pipe(\n        startWith(0),\n        filter(() => !this.active_cluster && !this.loading),\n        switchMap(() => {\n            this.loading = true;\n            return queryClusters({ include_status: true } as any).pipe(\n                catchError((_) => ({ data: [] } as any))\n            );\n        }),\n        map((resp: { data: any[] }) => resp.data),\n        map((list) => {\n            this.cluster_list = list || [];\n            const date = Date.now();\n            this.cluster_list.forEach((cluster) => {\n                if (!this.cpu_history[cluster.id]) {\n                    this.cpu_history[cluster.id] = {};\n                }\n                const nodes = [cluster, ...cluster.edge_nodes] as any;\n                for (const node of nodes) {\n                    if (!this.cpu_history[cluster.id][node.hostname]) {\n                        this.cpu_history[cluster.id][node.hostname] = [];\n                    }\n                    this.cpu_history[cluster.id][node.hostname].push({\n                        id: date,\n                        value: node.core_cpu,\n                    });\n                    if (\n                        this.cpu_history[cluster.id][node.hostname].length > 120\n                    ) {\n                        this.cpu_history[cluster.id][node.hostname].shift();\n                    }\n                }\n            });\n        }),\n        tap(() => (this.loading = false))\n    );\n\n    public ngOnInit(): void {\n        this.subscription('load_cluster', this.clusters$.subscribe());\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { listInterfaceRepositories } from '@placeos/ts-client';\n\nimport { Identity } from 'apps/backoffice/src/app/common/types';\n\n@Component({\n    selector: 'app-interfaces',\n    template: `\n        <div\n            role=\"table\"\n            class=\"pt-4\"\n            *ngIf=\"interfaces && interfaces.length; else load_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Repository</div>\n                <div class=\"w-[20rem] p-2\">Commit Hash</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of interfaces\">\n                    <div class=\"flex-1 p-2\">{{ item.id }}</div>\n                    <div class=\"w-[20rem] p-2\">\n                        <code>\n                            {{ item.name || '~No Commit Hash~' }}\n                        </code>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <app-icon class=\"mb-4\" className=\"backoffice-cross\"></app-icon>\n                <p>No interfaces</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AdminInterfacesComponent implements OnInit {\n    /** List of interfaces */\n    public interfaces: Identity[] = [];\n\n    ngOnInit() {\n        this.loadInterfaces();\n    }\n\n    private async loadInterfaces() {\n        const interfaces = await listInterfaceRepositories().toPromise();\n        this.interfaces = Object.keys(interfaces).map((id) => ({\n            id,\n            name: interfaces[id],\n        }));\n        this.interfaces.sort((a, b) => `${a.id}`?.localeCompare(`${b.id}`));\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {\n    PlaceMQTTBroker,\n    updateBroker,\n    addBroker,\n    queryBrokers,\n    removeBroker,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ItemCreateUpdateModalComponent } from 'apps/backoffice/src/app/overlays/item-modal/item-modal.component';\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { openConfirmModal } from 'apps/backoffice/src/app/common/general';\n\n@Component({\n    selector: 'app-brokers',\n    template: `\n        <button btn class=\"my-4\" (click)=\"newBroker()\">\n            <div class=\"flex items-center\">\n                <app-icon className=\"backoffice-plus\"></app-icon>\n                <div class=\"text\">Add Broker</div>\n            </div>\n        </button>\n        <div class=\"overflow-auto\">\n            <div\n                role=\"table\"\n                *ngIf=\"brokers && brokers.length; else load_state\"\n                class=\"min-w-[52rem]\"\n            >\n                <div table-head>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"w-24 p-2\">Auth Type</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-32 p-2 truncate\">Host</div>\n                    <div class=\"w-16 p-2\">Port</div>\n                    <div class=\"w-16 p-2\">TLS</div>\n                    <div class=\"w-32 p-2\">Filters</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of brokers\">\n                        <div class=\"w-32 p-2\">{{ item.name }}</div>\n                        <div class=\"w-24 p-2\">\n                            { item.auth_type, select, 0 { Certificate }, 2 {\n                            User Password }, other { No Auth }}\n                        </div>\n                        <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.host }}</div>\n                        <div class=\"w-16 p-2\">{{ item.port }}</div>\n                        <div class=\"w-16 p-2\">\n                            { item.tls, select, true { Yes }, false { No } }\n                        </div>\n                        <div class=\"w-32 p-2\">{{ item.filters | json }}</div>\n                        <div class=\"w-24 p-2 flex items-center\">\n                            <button btn icon (click)=\"editBroker(item)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button btn icon (click)=\"deleteBroker(item)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No Brokers</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n            }\n        `,\n    ],\n})\nexport class AdminBrokersComponent extends AsyncHandler implements OnInit {\n    public brokers: PlaceMQTTBroker[] = [];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loadBrokers();\n    }\n\n    public newBroker(): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new PlaceMQTTBroker(),\n                name: 'Broker',\n                save: (item) => addBroker(item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public editBroker(item: PlaceMQTTBroker): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Broker',\n                save: (item) => updateBroker(item.id, item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public async deleteBroker(item: PlaceMQTTBroker): Promise<void> {\n        if (item) {\n            const details = await openConfirmModal(\n                {\n                    title: `Delete MQTT Broker`,\n                    content: `<p>Are you sure you want delete this boker?</p><p>The broker will be deleted <strong>immediately.</strong></p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n                this._dialog\n            );\n            if (!details) return;\n            details.loading('Deleting broker...');\n            const err = await removeBroker(item.id)\n                .toPromise()\n                .catch((_) => _);\n            details.close();\n            if (err)\n                return notifyError(\n                    `Error deleting broker. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            notifySuccess(`Successfully deleted broker \"${item.name}\".`);\n            this.loadBrokers();\n        }\n    }\n\n    private async loadBrokers() {\n        const brokers = await queryBrokers()\n            .pipe(map((resp) => resp.data))\n            .toPromise();\n        this.brokers = brokers;\n    }\n}\n","<header>\n    <h3>{{ item ? 'Edit' : 'New' }} Extension</h3>\n    <button btn icon mat-dialog-close *ngIf=\"!loading\">\n        <app-icon\n            [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"\n        ></app-icon>\n    </button>\n</header>\n<main\n    class=\"max-h-[65vh] overflow-auto p-4\"\n    *ngIf=\"!loading; else load_state\"\n    [formGroup]=\"form\"\n>\n    <div class=\"fieldset\">\n        <div class=\"field\">\n            <label for=\"type\" i18n=\"@@typeLabel\">Type<span>*</span>: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select formControlName=\"type\">\n                    <mat-option\n                        *ngFor=\"let type of available_types\"\n                        [value]=\"type\"\n                    >\n                        <span class=\"capitalize\">{{ type }}</span>\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"field\">\n            <label for=\"name\" i18n=\"@@nameLabel\">Name<span>*</span>: </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"name\"\n                    placeholder=\"Extension Display Name\"\n                    i18n-placeholder=\"@@extensionNamePlaceholder\"\n                    formControlName=\"name\"\n                />\n                <mat-error i18n=\"@@nameError\"\n                    >A valid name is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n    </div>\n    <div class=\"field\">\n        <label for=\"url\" i18n=\"@@urlLabel\">URL<span>*</span>: </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"url\"\n                placeholder=\"Extension URL\"\n                i18n-placeholder=\"@@extensionUrlPlaceholder\"\n                formControlName=\"url\"\n            />\n            <mat-error i18n=\"@@urlError\">A valid URL is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"w-full\">\n        <label *ngIf=\"form.controls.conditions.value?.length\">Conditions</label>\n        <div\n            class=\"fieldset\"\n            *ngFor=\"let condition of form.controls.conditions.value\"\n        >\n            <div class=\"field\">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"url\"\n                        [(ngModel)]=\"condition[0]\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        placeholder=\"Condition Field\"\n                        i18n-placeholder=\"@@conditionPlaceholder\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        [(ngModel)]=\"condition[1]\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        placeholder=\"Operation\"\n                    >\n                        <mat-option\n                            *ngFor=\"let type of condition_ops\"\n                            [value]=\"type\"\n                        >\n                            <span class=\"capitalize\">{{ type }}</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"value\"\n                        [disabled]=\"\n                            condition[1] === 'truthy' ||\n                            condition[1] === 'falsy'\n                        \"\n                        [(ngModel)]=\"condition[2]\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        placeholder=\"Condition Value\"\n                        i18n-placeholder=\"@@conditionValuePlaceholder\"\n                    />\n                </mat-form-field>\n            </div>\n            <button btn icon (click)=\"removeCondition(condition)\">\n                <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n            </button>\n        </div>\n        <button btn class=\"w-full\" (click)=\"addCondition()\">\n            Add Condition\n        </button>\n    </div>\n</main>\n<footer\n    class=\"border-t border-base-200 flex items-center justify-end space-x-2 p-4\"\n    *ngIf=\"!loading\"\n>\n    <button btn class=\"w-32 inverse\" mat-dialog-close>Cancel</button>\n    <button btn class=\"w-32\" type=\"submit\" (click)=\"submit()\">\n        {{ item ? 'Save' : 'Add' }} [S]\n    </button>\n</footer>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport { HotkeysService } from 'apps/backoffice/src/app/common/hotkeys.service';\nimport { DialogEvent } from 'apps/backoffice/src/app/common/types';\n\nimport { BackofficeExtension } from '../extensions.component';\n\n@Component({\n    selector: 'extension-modal',\n    templateUrl: './extension-modal.component.html',\n    styleUrls: ['./extension-modal.component.scss'],\n})\nexport class ExtensionModalComponent extends AsyncHandler implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly available_types = [\n        'admin',\n        'systems',\n        'modules',\n        'zones',\n        'drivers',\n        'repositories',\n        'triggers',\n        'users',\n        'domains',\n    ];\n    public readonly condition_ops = ['includes', 'equals', 'truthy', 'falsy'];\n    public readonly item = this._data.item;\n    public loading = false;\n    public form = new FormGroup({\n        type: new FormControl('systems', [Validators.required]),\n        name: new FormControl('', [Validators.required]),\n        url: new FormControl('', [Validators.required]),\n        conditions: new FormControl([]),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { item: BackofficeExtension },\n        private _hotkey: HotkeysService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'save',\n            this._hotkey.listen(['KeyS'], () => this.submit())\n        );\n        this.form.patchValue(this.item);\n    }\n\n    public addCondition() {\n        const conditions = this.form.controls.conditions.value;\n        conditions.push(['', '', '']);\n    }\n\n    public removeCondition(condition: [string, string, any]) {\n        this.form.controls.conditions.setValue(\n            this.form.controls.conditions.value.filter((c) => c !== condition)\n        );\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        const value = this.form.value;\n        value.conditions = value.conditions.filter((c) => c[0] && c[1]);\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceDomain,\n    authority,\n    queryDomains,\n    updateDomain,\n} from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { ApplicationIcon } from 'apps/backoffice/src/app/common/types';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n} from 'apps/backoffice/src/app/overlays/confirm-modal.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\n\nexport interface BackofficeExtension {\n    /** Section of backoffice to extend */\n    type:\n        | 'admin'\n        | 'systems'\n        | 'modules'\n        | 'zones'\n        | 'drivers'\n        | 'repositories'\n        | 'triggers'\n        | 'users'\n        | 'domains';\n    /** Display name of the extension */\n    name: string;\n    /** URL to the application to embed */\n    url: string;\n    /** Conditions for showing the extension */\n    conditions: [string, string, any][];\n    /** Icon to display next to the name */\n    icon: ApplicationIcon;\n}\n\n@Component({\n    selector: '[app-extensions]',\n    template: `\n        <h2 class=\"text-lg font-medium mb-4 mt-4\">Backoffice extensions</h2>\n        <div *ngIf=\"!loading; else load_state\">\n            <div class=\"flex items-center space-x-2 mb-4\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"domain\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <button btn (click)=\"editExtension()\">Add Extension</button>\n            </div>\n            <div\n                class=\"bg-info my-4 p-4 flex items-center rounded shadow space-x-4 text-sm text-info-content\"\n            >\n                <p>\n                    <strong>Note:</strong> Backoffice requires a full page\n                    refresh for extension changes and additions to apply\n                </p>\n            </div>\n            <div role=\"table\" *ngIf=\"extension_list.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-24 p-2\">Type</div>\n                    <div class=\"w-40 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">URL</div>\n                    <div class=\"w-28 p-2\">Conditions</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let extension of extension_list\">\n                        <div class=\"w-24 p-2 capitalize\">\n                            {{ extension.type }}\n                        </div>\n                        <div class=\"w-40 p-2\">{{ extension.name }}</div>\n                        <div class=\"flex-1 p-2\">{{ extension.url }}</div>\n                        <div class=\"w-28 p-2\">\n                            {{ extension.conditions.length }}\n                        </div>\n                        <div class=\"w-24 flex items-center justify-center\">\n                            <button btn icon (click)=\"editExtension(extension)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                btn\n                                icon\n                                (click)=\"removeExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                </div>\n                <div class=\"text\">{{ loading }}</div>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"info-block\">\n                <app-icon class=\"text-3xl\">close</app-icon>\n                <p>No extensions configured for this domain</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceExtensionsComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public domain: PlaceDomain;\n    /** List of extension available on the current domain */\n    public extension_list: BackofficeExtension[] = [];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        const domain = authority();\n        if (!this.domain_list?.length) return;\n        const match = this.domain_list.find((d) => d.id === domain.id);\n        if (match) this.setDomain(match);\n        this.loading = '';\n    }\n\n    public setDomain(domain: PlaceDomain) {\n        this.domain = domain;\n        const config = this.domain.config?.backoffice?.extend || {};\n        const extensions: BackofficeExtension[] = [];\n        for (const type in config) {\n            if (!config[type]) {\n                continue;\n            }\n            for (const name in config[type]) {\n                if (!config[type][name]) {\n                    continue;\n                }\n                extensions.push({\n                    ...config[type][name],\n                    name,\n                    type,\n                });\n            }\n        }\n        this.extension_list = extensions;\n        this.extension_list.sort(\n            (a, b) =>\n                a.type.localeCompare(b.type) || a.name.localeCompare(b.name)\n        );\n    }\n\n    public editExtension(item?: BackofficeExtension) {\n        const ref = this._dialog.open(ExtensionModalComponent, {\n            data: { item: item ? JSON.parse(JSON.stringify(item)) : undefined },\n        });\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (event) => {\n                ref.componentInstance.loading = true;\n                if (item) {\n                    this.extension_list = this.extension_list.filter(\n                        (i) => i !== item\n                    );\n                }\n                this.extension_list.push(event.metadata);\n                await this.updateDomain();\n                ref.componentInstance.loading = false;\n                ref.close();\n            });\n    }\n\n    public async removeExtension(item: BackofficeExtension) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                data: {\n                    title: 'Remove extension',\n                    content: `Are you sure you want to remove the extension \"${item.name}\" from ${item.type}?`,\n                    icon: { class: 'backoffice-trash' },\n                },\n            }\n        );\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (_) => {\n                ref.componentInstance.loading = 'Removing extension...';\n                this.extension_list = this.extension_list.filter(\n                    (i) => i !== item\n                );\n                await this.updateDomain().catch((e) =>\n                    notifyError(`Error removing extension: ${e}`)\n                );\n                ref.componentInstance.loading = '';\n                ref.close();\n            });\n    }\n\n    public async updateDomain() {\n        const extensions = {};\n        for (const ext of this.extension_list) {\n            if (!extensions[ext.type]) {\n                extensions[ext.type] = {};\n            }\n            const data = { ...ext };\n            delete data.type;\n            delete data.name;\n            extensions[ext.type][ext.name] = data;\n        }\n        const updated = new PlaceDomain({\n            ...this.domain,\n            config: {\n                ...this.domain.config,\n                backoffice: {\n                    ...(this.domain.config.backoffice || {}),\n                    extend: extensions,\n                },\n            },\n        });\n        const domain = await updateDomain(this.domain.id, updated).toPromise();\n        this.setDomain(domain);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { post } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { StaffTenantModalData } from './staff-tenant-modal.component';\n\n@Component({\n    selector: 'booking-limits-modal',\n    template: ` <header>\n            <h3>Edit Tenant Booking Limits</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" btn icon mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto w-[512px] max-w-[100vw]\"\n        >\n            <div class=\"flex flex-col\">\n                <object-list-field\n                    formControlName=\"booking_limits\"\n                    [fields]=\"['type', 'amount']\"\n                ></object-list-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-base-200 flex justify-center\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving booking limits for Staff API tenant...</p>\n            </main>\n        </ng-template>`,\n    styles: [``],\n})\nexport class BookingLimitsModalComponent {\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public form = new FormGroup({\n        booking_limits: new FormControl<{ type: string; amount: string }[]>([]),\n    });\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<BookingLimitsModalComponent>\n    ) {\n        const limits = this.tenant?.booking_limits || {};\n        this.form.patchValue({\n            booking_limits: Object.keys(limits).map((k) => ({\n                type: k,\n                amount: `${limits[k]}`,\n            })),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const limits: { type: string; amount: string }[] =\n            this.form.value.booking_limits || [];\n        const booking_limits = {};\n        for (const { type, amount } of limits) {\n            booking_limits[type] = +amount || 0;\n        }\n        const call = post(\n            `/api/staff/v1/tenants/${this.tenant.id}/limits`,\n            booking_limits\n        );\n        const resp = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!resp) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close({ ...this.tenant, booking_limits: resp });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { cleanObject, PlaceDomain, post, put } from '@placeos/ts-client';\nimport { getInvalidFields } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent, HashMap } from '../common/types';\nimport { PlaceTenant } from './staff-api.component';\n\nconst FIELD_NAME_MAPPING: HashMap<string> = {\n    issuer: 'Service Account Email',\n    conference_type: 'Conference Type',\n    signing_key: 'Private Key',\n    sub: 'Service User',\n    client_id: 'Client ID',\n    client_secret: 'Client Secret',\n    domain: 'Domain',\n    scopes: 'Scopes',\n    user_agent: 'User Agent',\n};\n\nexport interface StaffTenantModalData {\n    tenant?: PlaceTenant;\n    domain?: PlaceDomain;\n}\n\n@Component({\n    selector: 'staff-tenant-modal',\n    template: `\n        <header>\n            <h3>{{ tenant ? 'Edit' : 'New' }} Tenant</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" btn icon mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto p-4\"\n        >\n            <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label>Name<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"Tenant Name\"\n                        />\n                        <mat-error>A tenant name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label>Platform<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"platform\">\n                            <mat-option value=\"google\">Google</mat-option>\n                            <mat-option value=\"office365\">Office365</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label>Email Domain:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        formControlName=\"email_domain\"\n                        placeholder=\"Domain of user's email for this tenant\"\n                    />\n                    <mat-error>A domain is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div\n                class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\"\n                *ngIf=\"\n                    form.value.platform !== 'google' && !form.value.delegated\n                \"\n            >\n                <div class=\"flex flex-col flex-1\">\n                    <label>Service Account:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"service_account\"\n                            placeholder=\"Service Account\"\n                        />\n                        <mat-error>\n                            Service account should be a valid email address\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex items-center mb-4\">\n                <mat-checkbox formControlName=\"delegated\">\n                    Delegated\n                </mat-checkbox>\n            </div>\n            <form *ngIf=\"credentials\" [formGroup]=\"credentials\">\n                <ng-container\n                    *ngFor=\"let item of credentials.controls | keyvalue\"\n                >\n                    <div\n                        class=\"flex flex-col\"\n                        [class.hidden]=\"item.value?.disabled\"\n                    >\n                        <label class=\"capitalize\">\n                            {{ name_map[item.key] || item.key }}\n                            <span\n                                *ngIf=\"\n                                    item.key !== 'conference_type' &&\n                                    !form.value.id\n                                \"\n                                >*</span\n                            >:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <ng-container [ngSwitch]=\"item.key\">\n                                <input\n                                    matInput\n                                    *ngSwitchDefault\n                                    [formControlName]=\"item.key\"\n                                    [placeholder]=\"\n                                        name_map[item.key] || item.key\n                                    \"\n                                />\n                                <textarea\n                                    matInput\n                                    *ngSwitchCase=\"'signing_key'\"\n                                    [formControlName]=\"item.key\"\n                                    [placeholder]=\"\n                                        name_map[item.key] || item.key\n                                    \"\n                                ></textarea>\n                            </ng-container>\n                            <mat-error>A {{ item.key }} is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </ng-container>\n            </form>\n            <div\n                class=\"flex items-center mb-4\"\n                *ngIf=\"form.value.platform === 'office365'\"\n            >\n                <mat-checkbox\n                    [(ngModel)]=\"show_outlook\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Configure Outlook Plugin\n                </mat-checkbox>\n            </div>\n            <form\n                *ngIf=\"show_outlook && form.get('outlook_config')\"\n                formGroupName=\"outlook_config\"\n            >\n                <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook App ID<span>*</span>:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"app_id\"\n                                placeholder=\"Application ID\"\n                            />\n                            <mat-error>An application ID is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook App Domain:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"app_domain\"\n                                placeholder=\"Application Domain\"\n                            />\n                            <mat-error>\n                                An application domain is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook App Resource:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"app_resource\"\n                                placeholder=\"Application ID\"\n                            />\n                            <mat-error>\n                                An application resource is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook Source Location:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"source_location\"\n                                placeholder=\"Source Location\"\n                            />\n                            <mat-error>A source location is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook Base Path:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"base_path\"\n                                placeholder=\"outlook\"\n                            />\n                            <mat-error>\n                                Base path to the application root folder is\n                                required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </form>\n            <div class=\"flex flex-col space-y-2\">\n                <label>Booking Limits</label>\n                <object-list-field\n                    formControlName=\"booking_limits\"\n                    [fields]=\"['type', 'amount']\"\n                ></object-list-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-base-200 flex justify-center\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving staff API tenant...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class StaffTenantModalComponent implements OnInit {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public show_outlook = false;\n\n    public form = new FormGroup({\n        id: new FormControl(this.tenant?.id || ''),\n        domain: new FormControl(\n            this.domain?.domain || this.tenant?.domain || 'localhost'\n        ),\n        name: new FormControl(this.tenant?.name || '', [Validators.required]),\n        email_domain: new FormControl(this.tenant?.email_domain || ''),\n        delegated: new FormControl(this.tenant?.delegated ?? false),\n        platform: new FormControl(this.tenant?.platform || 'google', [\n            Validators.required,\n        ]),\n        service_account: new FormControl(this.tenant?.service_account, [\n            Validators.email,\n        ]),\n        booking_limits: new FormControl([]),\n        credentials:\n            this.tenant?.platform === 'office365'\n                ? this.office_form\n                : this.google_form,\n    });\n\n    public loading = false;\n\n    public readonly name_map = FIELD_NAME_MAPPING;\n\n    public get office_form() {\n        return new FormGroup({\n            tenant: new FormControl('', [Validators.required]),\n            client_id: new FormControl('', [Validators.required]),\n            client_secret: new FormControl('', [Validators.required]),\n            conference_type: new FormControl(''),\n        });\n    }\n\n    public get google_form() {\n        return new FormGroup({\n            issuer: new FormControl('', [Validators.required]),\n            signing_key: new FormControl('', [Validators.required]),\n            scopes: new FormControl('', [Validators.required]),\n            domain: new FormControl('', [Validators.required]),\n            sub: new FormControl('', [Validators.required]),\n            user_agent: new FormControl('PlaceOS', [Validators.required]),\n            conference_type: new FormControl(''),\n        });\n    }\n\n    public get credentials(): FormGroup {\n        return this.form?.controls.credentials as any;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<StaffTenantModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        const limits = this.tenant?.booking_limits || {};\n        const fields = [\n            'tenant',\n            'client_id',\n            'client_secret',\n            'issuer',\n            'signing_key',\n            'scopes',\n            'sub',\n            'domain',\n            'user_agent',\n        ];\n        const handleDelegation = (delegated) => {\n            if (delegated) {\n                for (const field of fields) {\n                    this.form.get('credentials')?.get(field)?.disable();\n                    this.form.get('credentials')?.get(field)?.setValidators([]);\n                }\n            } else {\n                const id = this.form.value.id;\n                for (const field of fields) {\n                    this.form.get('credentials')?.get(field)?.enable();\n                    this.form\n                        .get('credentials')\n                        ?.get(field)\n                        ?.setValidators(id ? [] : [Validators.required]);\n                }\n            }\n            this.form.updateValueAndValidity();\n        };\n        this.form.controls.platform.valueChanges.subscribe((platform) => {\n            const credentials = this.form.value.credentials;\n            this.form.removeControl('credentials');\n            this.form.addControl(\n                'credentials',\n                platform === 'office365' ? this.office_form : this.google_form\n            );\n            if (platform === 'office365') {\n                (this.form as any).addControl(\n                    'outlook_config',\n                    new FormGroup({\n                        app_id: new FormControl(''),\n                        app_domain: new FormControl(''),\n                        app_resource: new FormControl(''),\n                        source_location: new FormControl(''),\n                        base_path: new FormControl(''),\n                    })\n                );\n            } else {\n                (this.form as any).removeControl('outlook_config');\n            }\n            handleDelegation(this.form.value.delegated);\n            this.form.patchValue({ credentials });\n        });\n        handleDelegation(this.form.value.delegated);\n        this.form.controls.delegated.valueChanges.subscribe(handleDelegation);\n        this.form.patchValue({\n            ...(this.tenant || {}),\n            domain: this.tenant?.domain || this._data.domain?.domain,\n            booking_limits: Object.keys(limits).map((k) => ({\n                type: k,\n                amount: limits[k],\n            })),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return notifyError(\n                `Some fields are invalid. [${getInvalidFields(this.form)}]`\n            );\n        }\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const limits: { type: string; amount: string }[] =\n            this.form.value.booking_limits || [];\n        const booking_limits = limits.reduce((m, { type, amount }) => {\n            m[type] = +amount;\n            return m;\n        }, {});\n        const value = this.form.value;\n        if (!value.credentials.conference_type)\n            delete value.credentials.conference_type;\n        if (!this.show_outlook) {\n            delete (value as any).outlook_config;\n        } else {\n            for (const key in (value as any).outlook_config) {\n                if ((value as any).outlook_config[key] == null) {\n                    delete (value as any).outlook_config[key];\n                }\n            }\n        }\n        for (const key in (value as any).credentials) {\n            if ((value as any).credentials[key] == null) {\n                delete (value as any).credentials[key];\n            }\n        }\n        if (!Object.keys(value.credentials).length) {\n            delete value.credentials;\n        }\n        const data = cleanObject(\n            {\n                ...(this.tenant || {}),\n                ...value,\n                booking_limits,\n            },\n            ['', null, undefined]\n        );\n        const call = this.tenant?.id\n            ? put(`/api/staff/v1/tenants/${this.tenant.id}`, data)\n            : post('/api/staff/v1/tenants', data);\n        const tenant = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!tenant) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    authority,\n    del,\n    get,\n    PlaceDomain,\n    queryDomains,\n} from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { BookingLimitsModalComponent } from './booking-limits-modal.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\n\nexport interface PlaceTenant {\n    id: string;\n    name: string;\n    domain: string;\n    email_domain: string;\n    platform: string;\n    delegated?: boolean;\n    service_account?: string;\n    booking_limits: Record<string, number>;\n    credentials?: HashMap<string>;\n}\n\n@Component({\n    selector: 'staff-api',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <label for=\"type\">Domain: </label>\n            <mat-form-field class=\"h-12\" appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [ngModel]=\"domain | async\"\n                    (ngModelChange)=\"domain.next($event)\"\n                    placeholder=\"Select Domain...\"\n                >\n                    <mat-option\n                        *ngFor=\"let domain of domain_list\"\n                        [value]=\"domain\"\n                    >\n                        {{ domain.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button btn (click)=\"editTenant()\">Add Tenant</button>\n        </div>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"w-full\"\n                *ngIf=\"(tenants | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"w-1/2 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Platform</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of tenants | async\">\n                        <div class=\"w-1/2 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">\n                            {{ item.platform }}\n                        </div>\n                        <div class=\"w-24 p-2 truncate\">\n                            <button\n                                btn\n                                class=\"clear underline\"\n                                (click)=\"editLimits(item)\"\n                            >\n                                Edit Limits\n                            </button>\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button\n                                btn\n                                icon\n                                class=\"h-10 w-10\"\n                                (click)=\"editTenant(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-edit\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                btn\n                                icon\n                                class=\"h-10 w-10\"\n                                (click)=\"removeTenant(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No tenants for selected domain</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceStaffAPIComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public readonly domain = new BehaviorSubject<PlaceDomain>(null);\n\n    public readonly tenants = this.domain.pipe(\n        switchMap(() => {\n            this.loading = 'Loading tenants for domain...';\n            return get('/api/staff/v1/tenants');\n        }),\n        catchError((_) => []),\n        map((tenants) => {\n            this.loading = '';\n            return tenants.filter(\n                (t) => t.domain === this.domain.getValue().domain\n            );\n        }),\n        shareReplay()\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        const domain = authority();\n        if (!this.domain_list?.length) return;\n        const match = this.domain_list.find((d) => d.id === domain.id);\n        if (match) this.domain.next(match);\n        this.loading = '';\n    }\n\n    public editTenant(tenant?: PlaceTenant) {\n        const ref = this._dialog.open(StaffTenantModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe((_) =>\n            this.domain.next(this.domain.getValue())\n        );\n    }\n\n    public editLimits(tenant: PlaceTenant) {\n        const ref = this._dialog.open(BookingLimitsModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe((_) =>\n            this.domain.next(this.domain.getValue())\n        );\n    }\n\n    public async removeTenant(tenant: PlaceTenant) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove tenant?',\n                content: `Remove <strong>${tenant.name}</strong> from this domain?<br>\n                <p style=\"text-align: left; width: 100%;\">This will remove all related:</p><br>\n                <ul style=\"list-style: disc;text-align: left;padding-left: 2rem\">\n                <li>bookings (such as desk bookings)</li>\n                <li>event metadata (such as catering)</li>\n                <li>guest information</li>\n                <li>survey data</li>\n                </ul>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n                action: 'Delete',\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        details.loading('Removing tenant from domain...');\n        const system = await del(`/api/staff/v1/tenants/${tenant.id}`)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${tenant.id} from domain. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                return true;\n            });\n        details.close();\n        if (system) return;\n        notifySuccess(`Successfully removed tenant from domain.`);\n        this.domain.next(this.domain.getValue());\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { addEdge, PlaceEdge, updateEdge } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\n\nexport interface EdgeModalData {\n    edge: PlaceEdge;\n}\n\n@Component({\n    selector: 'edge-modal',\n    template: `\n        <header>\n            <h3>{{ edge ? 'Edit' : 'New' }} Edge</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" btn icon mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading && form; else load_state\"\n            class=\"overflow-auto p-4\"\n        >\n            <div class=\"flex flex-col flex-1\">\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        formControlName=\"name\"\n                        placeholder=\"Edge Name\"\n                    />\n                    <mat-error>A edge name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        formControlName=\"description\"\n                        placeholder=\"Edge description...\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-base-200 flex justify-center\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving edge...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class EdgeModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly edge = this._data.edge;\n\n    public form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n    });\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EdgeModalData,\n        private _dialog_ref: MatDialogRef<EdgeModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form.patchValue(this.edge);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const edge = { ...this.edge, ...this.form.value };\n        const method = edge.id ? updateEdge(edge.id, edge) : addEdge(edge);\n        const new_edge = await method.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!new_edge) return notifyError('Error adding new edge.');\n        edge.id\n            ? notifySuccess('Successfully updated edge.')\n            : notifySuccess(\n                  'Successfully added new edge. Please make sure to save the API key as you will not be able to view it again in the future.'\n              );\n        this._dialog_ref.close(new_edge);\n    }\n}\n","import { Clipboard } from '@angular/cdk/clipboard';\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceEdge,\n    queryEdges,\n    removeEdge,\n    retrieveEdgeToken,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { copyToClipboard, openConfirmModal } from '../common/general';\nimport {\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n} from '../common/notifications';\nimport { EdgeModalComponent } from './edge-modal.component';\n\n@Component({\n    selector: '[admin-edge]',\n    template: `\n        <button btn class=\"w-full sm:w-40 my-4\" (click)=\"edit()\">\n            Add New Edge\n        </button>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                table\n                class=\"w-full min-w-[52rem]\"\n                *ngIf=\"(edges | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"w-32 p-2\">ID</div>\n                    <div class=\"w-40 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of edges | async\">\n                        <div class=\"w-32 p-2 truncate text-xs font-mono\">\n                            {{ item.id }}\n                        </div>\n                        <div class=\"w-40 p-2 truncate text-sm\">\n                            {{ item.name }}\n                        </div>\n                        <div class=\"flex-1 w-1/4 p-2 truncate text-xs\">\n                            {{ item.description }}\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button\n                                btn\n                                icon\n                                class=\"h-10 w-10\"\n                                (click)=\"edit(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-edit\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                btn\n                                icon\n                                class=\"h-10 w-10\"\n                                (click)=\"remove(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <div\n            *ngIf=\"(last_change | async)?.x_api_key\"\n            (click)=\"copyKey(item.x_api_key)\"\n            matRipple\n            [matTooltip]=\"'Copy API Key for ' + item.name\"\n            class=\"absolute flex rounded cursor-pointer items-center right-4 top-4 bg-base-100  shadow border border-base-200  max-w-[calc(100%-11rem)] overflow-hidden\"\n        >\n            <div\n                class=\"p-2 flex-1 w-1/2 flex h-full items-center border-r border-base-200  \"\n            >\n                <code class=\"flex-1 truncate\">{{ item.x_api_key }}</code>\n            </div>\n            <button btn icon class=\"rounded-none\">\n                <app-icon className=\"backoffice-copy\"></app-icon>\n            </button>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No edges</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                min-height: 10rem;\n            }\n        `,\n    ],\n})\nexport class PlaceEdgeComponent {\n    public loading: string = '';\n\n    private _change = new BehaviorSubject<number>(0);\n    private _hide = new BehaviorSubject<string>('');\n    public last_change = new BehaviorSubject<PlaceEdge>(null);\n\n    public get item() {\n        return this.last_change.getValue();\n    }\n\n    private _edge_list: Observable<PlaceEdge[]> = this._change.pipe(\n        debounceTime(300),\n        switchMap((_) => {\n            this.loading = 'Loading Edges...';\n            return queryEdges();\n        }),\n        catchError((_) => of({})),\n        map((details?: { data: PlaceEdge[] }) => {\n            this.loading = '';\n            return (details?.data || []).sort((a, b) =>\n                a.id?.localeCompare(b.id)\n            );\n        }),\n        shareReplay()\n    );\n\n    public readonly edges = combineLatest([this._edge_list, this._hide]).pipe(\n        debounceTime(500),\n        map(([list, hide]) => {\n            if (!hide) return list;\n            const edges = list.filter((_) => _.id !== hide);\n            return edges.sort((a, b) => a.id?.localeCompare(b.id));\n        })\n    );\n\n    public readonly token = async (edge: PlaceEdge) => {\n        const details = await retrieveEdgeToken(edge.id).toPromise();\n        copyToClipboard(details.token);\n        notifyInfo(`Token copied to clickboard.`);\n    };\n\n    public readonly edit = async (edge?: PlaceEdge) => {\n        const ref = this._dialog.open(EdgeModalComponent, { data: { edge } });\n        ref.afterClosed().subscribe((_) => {\n            sessionStorage.setItem('BACKOFFICE.last_edge', JSON.stringify(_));\n            this.last_change.next(_);\n            this._change.next(Date.now());\n        });\n    };\n\n    public readonly remove = async (i: PlaceEdge) => {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove edge?',\n                content: `Remove <strong>${i.name}</strong>?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Removing edge...');\n        const err = await removeEdge(i.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing edge. Error: ${\n                    err.statusText || err.message || err\n                }`\n            );\n        sessionStorage.removeItem('BACKOFFICE.last_edge');\n        this.last_change.next(null);\n        notifySuccess('Successfully removed Edge.');\n        this._hide.next(i.id);\n    };\n\n    constructor(private _dialog: MatDialog, private _clipboard: Clipboard) {}\n\n    public ngOnInit() {\n        const edge_data = sessionStorage.getItem('BACKOFFICE.last_edge');\n        try {\n            this.last_change.next(JSON.parse(edge_data) || null);\n        } catch {}\n    }\n\n    public copyKey(key: string) {\n        if (key && this._clipboard.copy(key)) {\n            notifySuccess('Edge API Key copied to clipboard.');\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { randomInt } from '../common/general';\nimport { JsonSchema, SchemaStateService } from './schema-state.service';\n\n@Component({\n    selector: 'admin-schemas',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"active_schema\"\n                        (ngModelChange)=\"copySchema()\"\n                        placeholder=\"Select Schema...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let schema of schema_list | async\"\n                            [value]=\"schema\"\n                        >\n                            {{ schema.name }}\n                        </mat-option>\n                        <mat-option\n                            (click)=\"newSchema(); $event.preventDefault()\"\n                        >\n                            <span class=\"italic font-sans\">New Schema</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button btn class=\"mt-6\" (click)=\"newSchema()\">Add Schema</button>\n        </div>\n        <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"schema_copy\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema Name: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <input matInput [(ngModel)]=\"schema_copy.name\" />\n                </mat-form-field>\n            </div>\n            <button btn class=\"mt-6\" (click)=\"saveSchema()\">Save Schema</button>\n        </div>\n        <div class=\"relative flex-1 h-1/2\">\n            <ng-container *ngIf=\"schema_copy; else empty_state\">\n                <settings-form-field\n                    [(ngModel)]=\"schema_copy.schema\"\n                    lang=\"json\"\n                    [readonly]=\"false\"\n                ></settings-form-field>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"absolute inset-0 flex items-center justify-center\">\n                <p class=\"p-8\">Select a schema to edit</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 1rem;\n                right: 1rem;\n                bottom: 0;\n                display: flex;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class AdminSchemasComponent {\n    public active_schema: JsonSchema;\n    public schema_copy: JsonSchema;\n\n    public readonly schema_list = this._state.schemas.pipe(shareReplay(1));\n    constructor(private _state: SchemaStateService) {}\n\n    public copySchema() {\n        if (!this.active_schema) return;\n        this.schema_copy = JSON.parse(JSON.stringify(this.active_schema));\n    }\n\n    public async newSchema() {\n        this.active_schema = {\n            name: 'New Schema',\n            schema: '{}',\n        };\n        this.copySchema();\n    }\n\n    public saveSchema() {\n        this._state.saveSchema(this.schema_copy);\n        this.active_schema = null;\n        this.schema_copy = null;\n    }\n}\n","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import { getUnixTime } from 'date-fns';\n\nexport class PlaceAPIKeyDetails {\n    public readonly id: string;\n    public readonly name: string;\n    public readonly user_id: string;\n    public readonly authority_id: string;\n    public readonly description: string;\n    public readonly scopes: string[];\n    public readonly permissions: null | 'user' | 'support' | 'admin';\n    public readonly created_at: number;\n    public readonly updated_at: number;\n    public readonly secret?: string;\n    public readonly x_api_key?: string;\n\n    constructor(_data: Partial<PlaceAPIKeyDetails>) {\n        this.id = _data.id || '';\n        this.name = _data.name || '';\n        this.user_id = _data.user_id || '';\n        this.authority_id = _data.authority_id || '';\n        this.description = _data.description || '';\n        this.permissions = _data.permissions || 'user';\n        this.created_at = _data.created_at || getUnixTime(new Date());\n        this.updated_at = _data.updated_at || getUnixTime(new Date());\n        this.secret = _data.secret;\n        this.x_api_key = _data.x_api_key || '';\n        this.scopes = _data.scopes || [];\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { addChipItem, removeChipItem } from '../../common/forms';\nimport { getInvalidFields } from '../../common/general';\nimport { notifyError } from '../../common/notifications';\nimport { DialogEvent } from '../../common/types';\nimport { APIKeyService } from './api-keys.service';\n\n@Component({\n    selector: 'api-key-modal',\n    template: `\n        <header class=\"h-12 flex items-center justify-between p-4\">\n            <h2>New API Key</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            class=\"w-[32rem] max-w-[calc(100vw-2rem)] p-4\"\n            *ngIf=\"!loading && form; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Name<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                        matInput\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Description</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        name=\"description\"\n                        formControlName=\"description\"\n                        placeholder=\"Description\"\n                        matInput\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"scope\">Scopes<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Scopes\">\n                        <mat-chip\n                            *ngFor=\"let scope of scope_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeScope(scope)\"\n                        >\n                            {{ scope }}\n                            <app-icon\n                                matChipRemove\n                                class=\"\"\n                                className=\"backoffice-cross\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            matInput\n                            placeholder=\"Scopes...\"\n                            i18n-placeholder=\"@@apiScopePlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addScope($event)\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-chip-grid>\n                    <mat-error>At least one scope is required</mat-error>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let option of scopes | async\"\n                            (click)=\"addScope({ input: {}, value: option })\"\n                        >\n                            {{ option }}\n                        </mat-option>\n                    </mat-autocomplete>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"user\">User<span>*</span></label>\n                <an-action-field\n                    [matMenuTriggerFor]=\"menu\"\n                    yPosition=\"below\"\n                    class=\"mb-8\"\n                    (click)=\"focusInput()\"\n                >\n                    <div [class.opacity-30]=\"!form.value.user?.id\">\n                        {{ form.value.user?.name || 'Select user' }}\n                    </div>\n                </an-action-field>\n                <mat-menu #menu=\"matMenu\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"px-2 no-subtext\"\n                        (click)=\"\n                            $event.preventDefault(); $event.stopPropagation()\n                        \"\n                    >\n                        <input\n                            matInput\n                            #input\n                            ngModel\n                            (ngModelChange)=\"setSearch($event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Search users...\"\n                        />\n                    </mat-form-field>\n                    <button\n                        mat-menu-item\n                        *ngFor=\"let item of users | async | slice: 0:10\"\n                        (click)=\"\n                            form.patchValue({ user: item, user_id: item.id });\n                            setSearch('')\n                        \"\n                        [class.text-secondary]=\"form.value.user?.id === item.id\"\n                    >\n                        {{ item.name }}\n                    </button>\n                    <button\n                        mat-menu-item\n                        [disabled]=\"true\"\n                        *ngIf=\"!(users | async)?.length\"\n                        class=\"text-center\"\n                    >\n                        No results\n                    </button>\n                </mat-menu>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"permissions\">Permissions</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"permissions\"\n                        formControlName=\"permissions\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option [value]=\"null\">None</mat-option>\n                        <mat-option value=\"user\">User</mat-option>\n                        <mat-option value=\"support\">Support</mat-option>\n                        <mat-option value=\"admin\">Admin</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-4 flex items-center justify-center border-t border-base-200 /20\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 w-[24rem] h-64\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class APIKeyModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        user: new FormControl(null),\n        user_id: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        scopes: new FormControl(\n            [],\n            [Validators.required, Validators.minLength(1)]\n        ),\n        permissions: new FormControl(''),\n    });\n    public loading: string;\n    public readonly search_str = new BehaviorSubject('');\n    public readonly scopes = this._service.available_scopes;\n\n    @ViewChild('input') public _input_el: ElementRef<HTMLInputElement>;\n\n    public readonly users = combineLatest([\n        this._service.users,\n        this.form.valueChanges,\n    ]).pipe(\n        map(([users, { permissions }]) => {\n            if (permissions === 'admin')\n                return users.filter((_) => _.sys_admin);\n            if (permissions === 'support')\n                return users.filter((_) => _.support || _.sys_admin);\n            return users.sort((a, b) => a.name?.localeCompare(b.name));\n        })\n    );\n\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public readonly focusInput = () =>\n        setTimeout(() => this._input_el?.nativeElement?.focus(), 100);\n    public readonly setSearch = (s) => this._service.setSearch(s);\n\n    public readonly addScope = (e) =>\n        addChipItem(this.form.controls.scopes as any, e);\n    public readonly removeScope = (i) =>\n        removeChipItem(this.form.controls.scopes as any, i);\n\n    constructor(private _service: APIKeyService) {\n        setTimeout(() => this.form.patchValue({ permissions: null }), 100);\n    }\n\n    public get scope_list(): string[] {\n        return this.form.controls.scopes.value;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = { ...this.form.value };\n        delete data.user;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    create,\n    get,\n    PlaceDomain,\n    PlaceUser,\n    query,\n    queryDomains,\n    queryUsers,\n    remove,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../../common/general';\nimport { notifyError, notifySuccess } from '../../common/notifications';\nimport { PlaceAPIKeyDetails } from './api-key-details.class';\nimport { APIKeyModalComponent } from './api-key-modal.component';\n\n@Injectable()\nexport class APIKeyService {\n    private _search = new BehaviorSubject<string>('');\n    private _domain = new BehaviorSubject<PlaceDomain>(null);\n    private _last_key = new BehaviorSubject<PlaceAPIKeyDetails>(null);\n    private _change = new BehaviorSubject<number>(0);\n\n    public readonly last_key = this._last_key.asObservable();\n    public readonly active_domain = this._domain.asObservable();\n\n    public readonly available_domains = queryDomains({ limit: 500 }).pipe(\n        map((_) => _.data),\n        shareReplay(1)\n    );\n\n    public readonly available_scopes: Observable<string[]> = get('/api/engine/v2/scopes').pipe(\n        map(_ => _ as any),\n        shareReplay(1)\n    );\n\n    public readonly available_keys = combineLatest([\n        this._domain,\n        this._change,\n    ]).pipe(\n        switchMap(([domain]) => {\n            return domain\n                ? query({\n                      query_params: { authority_id: domain.id },\n                      fn: (d) => new PlaceAPIKeyDetails(d),\n                      path: 'api_keys',\n                  }).pipe(map((_) => _.data as PlaceAPIKeyDetails[]))\n                : of([] as PlaceAPIKeyDetails[]);\n        }),\n        shareReplay(1)\n    );\n\n    public readonly users = combineLatest([\n        this._domain,\n        this._search,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(([domain, q]) => {\n            return domain\n                ? queryUsers({ authority_id: domain.id, q }).pipe(\n                      map((_) => _.data as PlaceUser[])\n                  )\n                : of([] as PlaceUser[]);\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public setDomain(domain: PlaceDomain) {\n        this._domain.next(domain);\n    }\n\n    public setSearch(s: string) {\n        this._search.next(s);\n    }\n\n    public async newKey() {\n        const ref = this._dialog.open(APIKeyModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Creating new API key...';\n        const domain = this._domain.getValue();\n        const key = await create({\n            query_params: {},\n            fn: (d) => new PlaceAPIKeyDetails(d),\n            path: 'api_keys',\n            form_data: {\n                ...details.metadata,\n                authority_id: domain.id,\n            },\n        })\n            .toPromise()\n            .catch((_) => {\n                ref.close();\n                notifyError(_);\n                throw _;\n            });\n        this._last_key.next(key as any);\n        this._change.next(Date.now());\n        notifySuccess('Successfully created new API key.');\n        ref.close();\n    }\n\n    public async removeKey(key: PlaceAPIKeyDetails) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove API Key',\n                content: `Are you sure you wish to remove this API key?\n                    Removing this key may result in applications using this key to stop working.`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Removing API key...');\n        await remove({\n            id: key.id,\n            query_params: {},\n            path: 'api_keys',\n        }).toPromise();\n        details.close();\n        notifySuccess('Successfully removed API key.');\n    }\n}\n","import { Component } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { take } from 'rxjs/operators';\nimport { APIKeyService } from './api-keys.service';\nimport { notifyInfo } from '../../common/notifications';\nimport { authority } from '@placeos/ts-client';\n\n@Component({\n    selector: 'admin-api-keys',\n    template: `\n        <div class=\"flex items-start space-x-2 my-4\">\n            <div class=\"flex flex-col space-y-1\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [ngModel]=\"domain | async\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list | async\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button\n                btn\n                class=\"mt-8 min-w-[8rem]\"\n                [disabled]=\"!(domain | async)\"\n                (click)=\"newKey()\"\n            >\n                Add API Key\n            </button>\n            <div\n                *ngIf=\"last_key | async\"\n                class=\"rounded shadow border border-base-200 min-w-[24rem]\"\n            >\n                <div class=\"border-b px-2 pb-1 bg-base-200 !w-full\">\n                    <label class=\"p-0 m-0\">\n                        Last API Key Details ({{\n                            (last_key | async)?.name || 'Unanamed API Key'\n                        }})\n                    </label>\n                </div>\n                <div class=\"p-2\">\n                    <div\n                        class=\"select-all text-xs opacity-60 mono break-words cursor-pointer\"\n                        (click)=\"copyKey()\"\n                    >\n                        {{ (last_key | async)?.x_api_key }}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div\n            role=\"table\"\n            class=\"min-w-[60rem]\"\n            *ngIf=\"(key_list | async)?.length; else load_state\"\n        >\n            <div table-head>\n                <div class=\"w-48 p-2\">Name</div>\n                <div class=\"flex-1 p-2\">Description</div>\n                <div class=\"w-32 p-2 truncate\">Scopes</div>\n                <div class=\"w-28 p-2\">Permissions</div>\n                <div class=\"w-32 p-2\">Created</div>\n                <div class=\"w-16 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of key_list | async\">\n                    <div class=\"w-48 p-2 truncate text-sm\" [title]=\"item.name\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"flex-1 p-2 text-xs\">{{ item.description }}</div>\n                    <div class=\"w-32 p-2 truncate flex items-center flex-wrap\">\n                        <code *ngFor=\"let scope of item.scopes\" class=\"m-1\">\n                            {{ scope }}\n                        </code>\n                    </div>\n                    <div class=\"w-28 p-2\">{{ item.permissions || 'None' }}</div>\n                    <div class=\"w-32 p-2\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-16 p-2 flex items-center\">\n                        <button btn icon (click)=\"deleteKey(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"info-block\">\n                <app-icon class=\"text-3xl\">close</app-icon>\n                <p>No API keys configured for this domain</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AdminAPIKeysComponent {\n    public readonly domain = this._service.active_domain;\n    public readonly domain_list = this._service.available_domains;\n    public readonly key_list = this._service.available_keys;\n    public readonly last_key = this._service.last_key;\n\n    public readonly setDomain = (d) => this._service.setDomain(d);\n    public readonly newKey = () => this._service.newKey();\n    public readonly deleteKey = (k) => this._service.removeKey(k);\n\n    constructor(\n        private _service: APIKeyService,\n        private _clipboard: Clipboard\n    ) {}\n\n    public async ngOnInit() {\n        const domain = authority();\n        const domain_list = await this.domain_list.pipe(take(1)).toPromise();\n        if (!domain_list?.length) return;\n        const match = domain_list.find((d) => d.id === domain.id);\n        if (match) this.setDomain(match);\n    }\n\n    public async copyKey() {\n        const key = await this.last_key.pipe(take(1)).toPromise();\n        if (!key?.x_api_key) return;\n        this._clipboard.copy(key.x_api_key);\n        notifyInfo('Copied API key to clipboard.');\n    }\n}\n","import {\n    cleanObject,\n    create,\n    query,\n    remove,\n    show,\n    update,\n} from '@placeos/ts-client';\n\nconst PATH = 'storages';\n\nexport class PlaceStorage {\n    /** ID of the storage */\n    public readonly id: string;\n    /** ID of the authority the storage is under */\n    public readonly authority_id: string;\n    /** Type of the storage */\n    public readonly storage_type: string;\n    /** Name of the storage */\n    public readonly bucket_name: string;\n    /** Region of the storage */\n    public readonly region: string;\n    /** Access key for the storage */\n    public readonly access_key: string;\n    /** Access secret for the storage */\n    public readonly access_secret: string;\n    /** Endpoint for the storage */\n    public readonly endpoint: string;\n    /** File type extensions to filter out */\n    public readonly ext_filter: string[];\n    /** File MIME type extensions to filter out */\n    public readonly mime_filter: string[];\n\n    constructor(item: Partial<PlaceStorage> = {}) {\n        Object.assign(this, item);\n    }\n}\n\n/** Convert raw server data to an storage object */\nfunction process(item: Partial<PlaceStorage>) {\n    return new PlaceStorage(item);\n}\n\nexport interface StorageQueryParameters {\n    /** ID of the authority the storage is under */\n    auth_id?: string;\n    /** Filter results based on a simple query string */\n    q?: string;\n    /** Number of results to return */\n    limit?: number;\n    /** Number of results to skip */\n    offset?: number;\n}\n\n/**\n * Query the available systems\n * @param query_params Query parameters to add the to request URL\n */\nexport function queryStorage(query_params: StorageQueryParameters = {}) {\n    return query({ query_params, fn: process, path: PATH });\n}\n\n/**\n * Get the data for a system\n * @param id ID of the system to retrieve\n * @param query_params Query parameters to add the to request URL\n */\nexport function showStorage(\n    id: string,\n    query_params: StorageQueryParameters = {}\n) {\n    return show({ id, query_params, fn: process, path: PATH });\n}\n\n/**\n * Update the storage in the database\n * @param id ID of the storage\n * @param form_data New values for the storage\n * @param query_params Query parameters to add the to request URL\n * @param method HTTP verb to use on request. Defaults to `patch`\n */\nexport function updateStorage(\n    id: string,\n    form_data: Partial<PlaceStorage>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return update({\n        id,\n        form_data,\n        query_params: {},\n        method,\n        fn: process,\n        path: PATH,\n    });\n}\n\n/**\n * Save the item to the database will overrite existing item if `id` is set\n * @param item New storage data\n * @returns New storage object\n */\nexport function saveStorage(item: PlaceStorage) {\n    const data = cleanObject(item, ['', undefined, null]);\n    return item.id ? updateStorage(item.id, data, 'put') : addStorage(data);\n}\n\n/**\n * Add a new storage to the database\n * @param form_data Storage data\n * @param query_params Query parameters to add the to request URL\n */\nexport function addStorage(form_data: Partial<PlaceStorage>) {\n    return create({ form_data, query_params: {}, fn: process, path: PATH });\n}\n\n/**\n * Remove an storage from the database\n * @param id ID of the storage\n * @param query_params Query parameters to add the to request URL\n */\nexport function removeStorage(\n    id: string,\n    query_params: Record<string, any> = {}\n) {\n    return remove({ id, query_params, path: PATH });\n}\n","import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { PlaceStorage, saveStorage } from './storage.fn';\nimport { notifyError, notifySuccess } from '../../common/notifications';\n\n@Component({\n    selector: 'storage-provider-modal',\n    template: `\n        <header>\n            <h2>{{ storage?.id ? 'Edit' : 'New' }} Storage Provider</h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon className=\"backoffice-close\"></app-icon>\n            </button>\n        </header>\n        <form [formGroup]=\"form\" class=\"max-h-[65vh] overflow-auto px-4 py-2\">\n            <!-- <div class=\"flex flex-col \">\n                <label for=\"storage-type\">Storage Type</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"storage-type\"\n                        formControlName=\"storage_type\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option value=\"s3\">Amazon S3</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div> -->\n            <div class=\"flex space-x-2\">\n                <div class=\"flex-1 flex flex-col \">\n                    <label for=\"bucket-name\">Bucket Name</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"bucket-name\"\n                            formControlName=\"bucket_name\"\n                            placeholder=\"Bucket Name\"\n                        />\n                        <mat-error>Bucket Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex flex-col \">\n                    <label for=\"region\">Region</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"region\"\n                            formControlName=\"region\"\n                            placeholder=\"Region\"\n                        />\n                        <mat-error>Region is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex space-x-2\">\n                <div class=\"flex-1 flex flex-col\">\n                    <label for=\"access-key\">Access Key</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"access-key\"\n                            formControlName=\"access_key\"\n                            placeholder=\"Access Key\"\n                        />\n                        <mat-error>Access Key is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex flex-col\">\n                    <label for=\"access-secret\">Access Secret</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"access-secret\"\n                            formControlName=\"access_secret\"\n                            placeholder=\"Access Secret\"\n                        />\n                        <mat-error>Access Secret is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"endpoint\">Endpoint</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"endpoint\"\n                        formControlName=\"endpoint\"\n                        placeholder=\"Endpoint\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"extensions\">Allowed File Extensions</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"extensions\"\n                        formControlName=\"ext_filter\"\n                        placeholder=\"Allow all File Extensions\"\n                        [multiple]=\"true\"\n                    >\n                        <mat-option\n                            *ngFor=\"let ext of ALLOWED_FILE_EXTENSIONS\"\n                            [value]=\"ext\"\n                        >\n                            {{ ext }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col \">\n                <label for=\"mime-types\">Allowed File MIME types</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"mime-types\"\n                        formControlName=\"mime_filter\"\n                        placeholder=\"Allow all MIME Types\"\n                        [multiple]=\"true\"\n                    >\n                        <mat-option\n                            *ngFor=\"let mime of ALLOWED_MIME_TYPES\"\n                            [value]=\"mime\"\n                        >\n                            {{ mime }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n        <footer\n            class=\"flex items-center justify-end space-x-2 px-4 py-2 border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple mat-dialog-close class=\"inverse w-32\">\n                Cancel\n            </button>\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class StorageProviderModalComponent {\n    public readonly ALLOWED_FILE_EXTENSIONS = [\n        'png',\n        'webp',\n        'bmp',\n        'jpg',\n        'jpeg',\n        'gif',\n        'svg',\n        'txt',\n        'csv',\n        'tsv',\n        'pdf',\n        'tif',\n        'tiff',\n        'mp3',\n        'ogg',\n        'rar',\n        'zip',\n        'mp4',\n        'webm',\n    ].sort((a, b) => a.localeCompare(b));\n\n    public readonly ALLOWED_MIME_TYPES = [\n        'image/png',\n        'image/webp',\n        'image/bmp',\n        'image/jpeg',\n        'image/gif',\n        'image/svg+xml',\n        'text/plain',\n        'text/csv',\n        'application/pdf',\n        'image/tiff',\n        'audio/mpeg',\n        'audio/ogg',\n        'application/vnd.rar',\n        'application/zip',\n        'video/mp4',\n        'video/webm',\n    ].sort((a, b) => a.localeCompare(b));\n    public readonly storage = this._data.item;\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data.item?.id || ''),\n        authority_id: new FormControl(this._data.domain || ''),\n        storage_type: new FormControl(this._data.item?.storage_type || 's3', [\n            Validators.required,\n        ]),\n        bucket_name: new FormControl(this._data.item?.bucket_name || '', [\n            Validators.required,\n        ]),\n        region: new FormControl(this._data.item?.region || '', [\n            Validators.required,\n        ]),\n        access_key: new FormControl(this._data.item?.access_key || '', [\n            Validators.required,\n        ]),\n        access_secret: new FormControl(this._data.item?.access_secret || '', [\n            Validators.required,\n        ]),\n        endpoint: new FormControl(this._data.item?.endpoint || ''),\n        ext_filter: new FormControl(this._data.item?.ext_filter || []),\n        mime_filter: new FormControl(this._data.item?.mime_filter || []),\n    });\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: { item?: PlaceStorage; domain?: string },\n        private _dialog_ref: MatDialogRef<StorageProviderModalComponent>\n    ) {}\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (this.form.invalid) return;\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        await saveStorage(this.form.value as PlaceStorage)\n            .toPromise()\n            .catch((e) => {\n                notifyError('Failed to save Storage Provider.');\n                this.loading = false;\n                this._dialog_ref.disableClose = false;\n                throw e;\n            });\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        notifySuccess('Successfully saved Storage Provider.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain, queryDomains } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { PlaceStorage, queryStorage, removeStorage } from './storage.fn';\nimport { MatDialog } from '@angular/material/dialog';\nimport { StorageProviderModalComponent } from './storage-provider-modal.component';\nimport { openConfirmModal } from '../../common/general';\n\n@Component({\n    selector: 'app-storage',\n    template: `\n        <div class=\"flex items-center justify-between space-x-2 my-4\">\n            <div class=\"flex flex-col space-y-2\">\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <mat-select\n                        name=\"type\"\n                        [ngModel]=\"domain | async\"\n                        (ngModelChange)=\"domain.next($event)\"\n                        placeholder=\"All Domains\"\n                    >\n                        <mat-option [value]=\"{}\">All Domains</mat-option>\n                        <mat-option\n                            *ngFor=\"let domain of domain_list | async\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button btn matRipple (click)=\"edit()\">Add Storage Provider</button>\n        </div>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"w-full min-w-[40rem]\"\n                *ngIf=\"(storage_list | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"flex-1 p-2\">Domain</div>\n                    <div class=\"w-32 p-2\">Store Type</div>\n                    <div class=\"w-28 p-2 h-10\">Region</div>\n                    <div class=\"w-28 p-2 h-10\">Updated</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of storage_list | async\">\n                        <div class=\"flex-1 p-2 truncate\">\n                            <a\n                                class=\"underline\"\n                                [routerLink]=\"[\n                                    '/domains',\n                                    item.authority_id || '_',\n                                    'about'\n                                ]\"\n                            >\n                                {{\n                                    item.domain?.name ||\n                                        item.authority_id ||\n                                        '[DEFAULT]'\n                                }}\n                            </a>\n                        </div>\n                        <div class=\"w-32 p-2 truncate text-xs\">\n                            <code>{{ item.storage_type }}</code>\n                        </div>\n                        <div class=\"w-28 p-2 h-12 text-xs\">\n                            <code>{{ item.region }}</code>\n                        </div>\n                        <div class=\"w-28 p-2 h-12\">\n                            {{ item.updated_at * 1000 | dateFrom }}\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button\n                                btn\n                                icon\n                                class=\"h-10 w-10\"\n                                (click)=\"edit(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-edit\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                btn\n                                icon\n                                class=\"h-10 w-10\"\n                                (click)=\"remove(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                class=\"flex flex-col items-center justify-center opacity-30 p-8\"\n            >\n                <p>\n                    No storage providers for\n                    {{ domain.getValue() ? 'selected' : 'any' }} domain\n                </p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StorageComponent {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list = queryDomains().pipe(\n        map((_) => _.data),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /** Currently active domain */\n    public readonly domain = new BehaviorSubject<PlaceDomain>(null);\n\n    public readonly storage_data = this.domain.pipe(\n        switchMap((_) => {\n            this.loading = 'Loading Storage Providers...';\n            return queryStorage({ auth_id: _?.id });\n        }),\n        map(({ data }) => data),\n        catchError((_) => []),\n        tap((_) => (this.loading = '')),\n        shareReplay(1)\n    );\n\n    public readonly storage_list = combineLatest([\n        this.domain_list,\n        this.storage_data,\n    ]).pipe(\n        map(([domains, storage]) => {\n            if (!domains || !storage) return [];\n            return storage.map((_) => ({\n                ..._,\n                domain: domains.find((d) => d.id === _.authority_id),\n            }));\n        })\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public edit(item?: PlaceStorage) {\n        const ref = this._dialog.open(StorageProviderModalComponent, {\n            data: { item, domain: this.domain.getValue()?.id },\n        });\n        ref.afterClosed().subscribe(() =>\n            this.domain.next(this.domain.getValue())\n        );\n    }\n\n    public async remove(item: PlaceStorage) {\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove Storage Provider',\n                content: `Are you sure you want to remove the storage provider for ${item.storage_type} ${item.bucket_name}?`,\n                icon: { content: 'delete_forever' },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Removing Storage Provider');\n        await removeStorage(item.id).toPromise();\n        this.domain.next(this.domain.getValue());\n        resp.close();\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { AuthorisedAdminGuard } from 'apps/backoffice/src/app/ui/guards/authorised-admin.guard';\n\nimport { PlaceComponent } from './admin.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\nimport { StorageComponent } from './storage/storage.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        component: PlaceComponent,\n        canActivate: [AuthorisedAdminGuard],\n        children: [\n            { path: 'about', component: PlaceDetailsComponent },\n            { path: 'database', component: PlaceDatabaseDetailsComponent },\n            { path: 'clusters', component: PlaceClusterDetailsComponent },\n            { path: 'interfaces', component: AdminInterfacesComponent },\n            { path: 'brokers', component: AdminBrokersComponent },\n            { path: 'edge', component: PlaceEdgeComponent },\n            { path: 'edge/:id', component: PlaceEdgeComponent },\n            { path: 'extensions', component: PlaceExtensionsComponent },\n            { path: 'staff-api', component: PlaceStaffAPIComponent },\n            { path: 'schemas', component: AdminSchemasComponent },\n            { path: 'api-keys', component: AdminAPIKeysComponent },\n            { path: 'upload-storage', component: StorageComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './admin.routes';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\nimport { PlaceComponent } from './admin.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { PlaceClusterItemComponent } from './cluster-details/cluster-item.component';\nimport { PlaceClusterTaskListComponent } from './cluster-details/cluster-task-list.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { EdgeModalComponent } from './edge-modal.component';\nimport { AdminClusterNodeComponent } from './cluster-details/cluster-node.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\nimport { APIKeyModalComponent } from './api-keys/api-key-modal.component';\nimport { APIKeyService } from './api-keys/api-keys.service';\nimport { BookingLimitsModalComponent } from './booking-limits-modal.component';\nimport { StorageComponent } from './storage/storage.component';\nimport { StorageProviderModalComponent } from './storage/storage-provider-modal.component';\n\n@NgModule({\n    declarations: [\n        PlaceComponent,\n        PlaceDatabaseDetailsComponent,\n        PlaceDetailsComponent,\n        PlaceClusterDetailsComponent,\n        PlaceClusterItemComponent,\n        PlaceClusterTaskListComponent,\n        PlaceExtensionsComponent,\n        AdminInterfacesComponent,\n        AdminBrokersComponent,\n        ExtensionModalComponent,\n        PlaceStaffAPIComponent,\n        StaffTenantModalComponent,\n        PlaceEdgeComponent,\n        EdgeModalComponent,\n        AdminClusterNodeComponent,\n        AdminSchemasComponent,\n        AdminAPIKeysComponent,\n        APIKeyModalComponent,\n        BookingLimitsModalComponent,\n        StorageComponent,\n        StorageProviderModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n    providers: [APIKeyService],\n})\nexport class AppPlaceModule {}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n"],"x_google_ignoreList":[19,20,30]}