{"version":3,"file":"210.b2bf9d810391851f.js","mappings":"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","names":["RepositoriesStateService","constructor","_state","_dialog","this","BehaviorSubject","_loading","asObservable","item","active_item$","pipe","switchMap","PlaceRepository","repo_type","PlaceRepositoryType","next","listRepositoryDrivers","id","limit","of","catchError","_","map","filter","i","listRepositoryCommits","count","details","commit","active_item","pullLatestCommit","pullRepositoryChanges","e","toPromise","catch","err","notifyError","JSON","stringify","response","message","repo","showRepository","replaceItem","newDriver","driver","o","open","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","data","PlaceDriver","name","module_name","repository_id","file_name","save","addDriver","i0","factory","RepositoryAboutComponent","BaseClass","_service","super","local_url","type","location","origin","folder_name","hash","repo_uri","uri","replace","ngOnInit","subscription","subscribe","pulling","selectors","$localize","i18n_5","ctx","RepositoryDriversComponent","driver_list","d","ROUTES","path","component","RepositoriesComponent","_item","create","extensions","extensionsForItem","updateTabList","tab_list","driver_count","icon","class","concat","list","length","children","ExtensionOutletComponent","redirectTo","AppRepositoriesModule","CommonModule","FormsModule","RouterModule","SharedContentModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/repositories/repositories-state.service.ts","./apps/backoffice/src/app/repositories/repository-about.component.ts","./apps/backoffice/src/app/repositories/repository-drivers.component.ts","./apps/backoffice/src/app/repositories/repositories.component.ts","./apps/backoffice/src/app/repositories/repositories.routes.ts","./apps/backoffice/src/app/repositories/repositories.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addDriver,\n    listRepositoryCommits,\n    listRepositoryDrivers,\n    PlaceDriver,\n    PlaceRepository,\n    PlaceRepositoryType,\n    pullRepositoryChanges,\n    showRepository,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    share,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError } from '../common/notifications';\nimport {\n    CreateEditModalData,\n    ItemCreateUpdateModalComponent,\n} from '../overlays/item-modal/item-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RepositoriesStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n    /** Active module */\n    public readonly item = this._state.item;\n    /** List of available drivers for repository */\n    public readonly driver_list = this._state.active_item$.pipe(\n        switchMap((item: PlaceRepository) => {\n            if (\n                !(item instanceof PlaceRepository) ||\n                item.repo_type === PlaceRepositoryType.Interface\n            )\n                return of(null);\n            this._loading.next(true);\n            return listRepositoryDrivers(item.id, { limit: 2000 });\n        }),\n        catchError((_) => []),\n        map((_) => {\n            this._loading.next(false);\n            return _;\n        })\n    );\n    /** Get latest commit for the active repository */\n    public readonly commit = this._state.active_item$.pipe(\n        filter((i) => i instanceof PlaceRepository),\n        switchMap((item) =>\n            listRepositoryCommits(item.id, { count: 1 } as any)\n        ),\n        catchError((_) => []),\n        map((details) => details[0]?.commit || 'HEAD')\n    );\n\n    public get active_item(): PlaceRepository {\n        return this._state.active_item as any;\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async pullLatestCommit() {\n        const commit: any = await pullRepositoryChanges(this.active_item.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error pulling latest commit. Error: ${JSON.stringify(\n                        err.response || err.message || 'Pull timed out'\n                    )}`\n                );\n            });\n        if (!commit) return;\n        const repo = await showRepository(this.active_item.id).toPromise();\n        this._state.replaceItem(repo);\n    }\n\n    public async newDriver(driver: string) {\n        this._dialog.open<ItemCreateUpdateModalComponent, CreateEditModalData>(\n            ItemCreateUpdateModalComponent,\n            {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: new PlaceDriver({\n                        name: '',\n                        module_name: '',\n                        repository_id: this.active_item.id,\n                        file_name: driver,\n                    }),\n                    name: 'Driver',\n                    save: (item) => addDriver(item),\n                },\n            }\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceRepositoryType } from '@placeos/ts-client';\nimport { BaseClass } from '../common/base.class';\nimport { RepositoriesStateService } from './repositories-state.service';\n\n@Component({\n    selector: 'repository-about',\n    template: `\n        <section class=\"mb-4 text-center flex space-x-2\">\n            <div\n                class=\"rounded p-2 border border-gray-200 dark:border-neutral-500 space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@descriptionLabel\">Description:</label>\n                    <div class=\"value select-all\">\n                        {{ item.description || 'No description' }}\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoTypeLabel\">Type:</label>\n                    <div class=\"value\" i18n=\"@@driverListEmpty\">\n                        { item.type, select, interface { Interface Repository }\n                        driver { Driver Repository }, other { =Unknown=} }\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoFolderNameLabel\">Folder name:</label>\n                    <div\n                        class=\"value select-all\"\n                        [class.underline]=\"item.type === 'interface'\"\n                        [class.pointer-events-none]=\"item.type !== 'interface'\"\n                    >\n                        <a [href]=\"local_url\" target=\"_blank\">{{\n                            item.folder_name || 'No folder set'\n                        }}</a>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoCreatedAtLabel\">Created:</label>\n                    <div class=\"value\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoUpdatedAtLabel\">Updated:</label>\n                    <div class=\"value\">\n                        {{ item.updated_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"rounded p-2 border border-gray-200 dark:border-neutral-500 space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoUriLabel\">Repository URI:</label>\n                    <div class=\"value underline select-all\">\n                        <a [href]=\"item.uri | safe: 'url'\" target=\"_blank\">{{\n                            repo_uri || 'No URI set'\n                        }}</a>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoBranchLabel\">Branch:</label>\n                    <code class=\"text-xs\">\n                        {{ item.branch || 'master' }}\n                    </code>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@repoCommitHashLabel\" class=\"whitespace-nowrap\">Commit hash:</label>\n                    <code class=\"text-xs truncate\">\n                        {{ item.commit_hash || 'No Commit hash set' }}\n                        <span\n                            class=\"select-text mono\"\n                            *ngIf=\"commit && commit !== item.commit_hash\"\n                        >\n                            ({{ commit }})\n                        </span>\n                    </code>\n                </div>\n                <div class=\"flex-1\"></div>\n                <button\n                    mat-button\n                    class=\"w-full\"\n                    [disabled]=\"pulling\"\n                    (click)=\"pullLatestCommit()\"\n                >\n                    <ng-container\n                        *ngIf=\"!pulling; else spinner\"\n                        i18n=\"@@repoPullAction\"\n                    >\n                        Pull latest commit\n                    </ng-container>\n                </button>\n            </div>\n        </section>\n        <ng-template #spinner>\n            <mat-spinner diameter=\"32\"></mat-spinner>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            .mono {\n                font-family: var(--mono-font);\n            }\n\n            label {\n                width: 6rem;\n                text-align: left;\n            }\n        `,\n    ],\n})\nexport class RepositoryAboutComponent extends BaseClass {\n    /** Whether the latest commit is being pulled on the server */\n    public pulling: boolean;\n\n    public commit = '';\n\n    public get item(): any {\n        return this._service.active_item as any;\n    }\n\n    public get local_url() {\n        return this.item.type === PlaceRepositoryType.Interface\n            ? `${location.origin}/${this.item.folder_name}/`\n            : `${location.hash}`;\n    }\n\n    public get repo_uri() {\n        return this.item?.uri.replace(/\\/[a-zA-Z0-9\\-\\.:]*@/, '/...@');\n    }\n\n    constructor(private _service: RepositoriesStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.commit = '';\n        this.subscription(\n            'commit',\n            this._service.commit.subscribe((_) => (this.commit = _))\n        );\n    }\n\n    /**\n     * Send request to server to pull the latest commit for the active repository\n     */\n    public async pullLatestCommit() {\n        this.pulling = true;\n        await this._service.pullLatestCommit();\n        this.pulling = false;\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceRepository } from '@placeos/ts-client';\n\nimport { RepositoriesStateService } from './repositories-state.service';\n\n@Component({\n    selector: 'repository-drivers',\n    template: `\n        <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@repoDriverHeader\">Available Drivers</h3>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(driver_list | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <td class=\"flex-1 p-2\" i18n=\"@@driverListname\">Name</td>\n                    <td class=\"w-12 p-2 h-10\"></td>\n                </div>\n                <div body class=\"overflow-y-auto\">\n                    <div table-row *ngFor=\"let item of driver_list | async\">\n                        <div class=\"flex-1 p-2\" [innerHTML]=\"item | driverFormat\"></div>\n                        <div class=\"w-12 flex justify-center\">\n                            <button mat-icon-button (click)=\"newDriver(item)\">\n                                <app-icon className=\"backoffice-plus\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <p i18n=\"@@driverListEmpty\">No drivers for repository</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@driverListLoading\">Loading driver list...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class RepositoryDriversComponent {\n    /** Whether driver list is loading */\n    public loading: boolean;\n    /** List of drivers available in the repository */\n    public readonly driver_list = this._service.driver_list;\n\n    public get item(): PlaceRepository {\n        return this._service.active_item as any;\n    }\n\n    public readonly newDriver = (d) => this._service.newDriver(d);\n\n    constructor(private _service: RepositoriesStateService) { }\n}\n","import { Component } from '@angular/core';\nimport { extensionsForItem } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\nimport { RepositoriesStateService } from './repositories-state.service';\n\n@Component({\n    selector: 'new-repositories-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <item-sidebar class=\"hidden sm:block\" [route]=\"name\" title=\"Repositories\"></item-sidebar>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                <item-selection class=\"z-20 sm:hidden\" [route]=\"name\" title=\"Repositories\">\n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </item-selection>\n                <div class=\"flex flex-col flex-1 h-1/2\">\n                    <ng-container *ngIf=\"item?.id\">\n                        <item-details\n                            [can_edit]=\"true\"\n                            [item]=\"item\"\n                            type=\"Repository\"\n                        ></item-details>\n                        <item-tablist\n                            [base]=\"name\"\n                            [tabs]=\"tab_list\"\n                            [scrolled]=\"scroll > 0\"\n                            class=\"z-10\"\n                        ></item-tablist>\n                        <div\n                            #el\n                            class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                            (scroll)=\"scroll = el.scrollTop\"\n                        >\n                            <router-outlet></router-outlet>\n                        </div>\n                    </ng-container>\n                </div>\n                <button\n                    class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                    matTooltip=\"New repository\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"newItem()\"\n                >\n                    <app-icon\n                        [className]=\"'backoffice-plus'\"\n                        class=\"text-3xl\"\n                    ></app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class RepositoriesComponent extends BaseClass {\n    public readonly name = 'repositories';\n\n    public open_menu = false;\n    public driver_count = 0;\n    public tab_list = [];\n\n    public readonly newItem = () => this._item.create();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = (\n            this.driver_count < 0 || !this.driver_count\n                ? [\n                      {\n                          id: 'about',\n                          name: 'About',\n                          icon: { class: 'backoffice-info-with-circle' },\n                      },\n                  ]\n                : [\n                      {\n                          id: 'about',\n                          name: 'About',\n                          icon: { class: 'backoffice-info-with-circle' },\n                      },\n                      {\n                          id: 'drivers',\n                          name: 'Drivers',\n                          count: this.driver_count,\n                          icon: { class: 'backoffice-documents' },\n                      },\n                  ]\n        ).concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: RepositoriesStateService,\n        protected _item: ActiveItemService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.subscription(\n            'item',\n            this._service.driver_list.subscribe((list) => {\n                this.driver_count = list ? list.length : -1;\n                this.updateTabList();\n            })\n        );\n        this.updateTabList();\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { RepositoryAboutComponent } from './repository-about.component';\nimport { RepositoryDriversComponent } from './repository-drivers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { RepositoriesComponent } from './repositories.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: RepositoriesComponent,\n        children: [\n            { path: 'about', component: RepositoryAboutComponent },\n            { path: 'drivers', component: RepositoryDriversComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './repositories.routes';\n\nimport { RepositoryAboutComponent } from './repository-about.component';\nimport { RepositoryDriversComponent } from './repository-drivers.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { RepositoriesComponent } from './repositories.component';\n\n@NgModule({\n    declarations: [\n        RepositoryAboutComponent,\n        RepositoryDriversComponent,\n        RepositoriesComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppRepositoriesModule {}\n"],"x_google_ignoreList":[]}