{"version":3,"sources":["./apps/backoffice/src/app/engine/engine.component.ts","./apps/backoffice/src/app/common/database.service.ts","./apps/backoffice/src/app/engine/database-details.component.ts","./apps/backoffice/src/app/engine/details.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-node.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-item.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-task-list.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-details.component.ts","./apps/backoffice/src/app/engine/interfaces.component.ts","./apps/backoffice/src/app/engine/brokers.component.ts","./apps/backoffice/src/app/engine/extension-modal/extension-modal.component.html","./apps/backoffice/src/app/engine/extension-modal/extension-modal.component.ts","./apps/backoffice/src/app/engine/extensions.component.ts","./apps/backoffice/src/app/engine/staff-tenant-modal.component.ts","./apps/backoffice/src/app/engine/staff-api.component.ts","./apps/backoffice/src/app/engine/edge-modal.component.ts","./apps/backoffice/src/app/engine/edge.component.ts","./apps/backoffice/src/app/engine/schemas.component.ts","./node_modules/date-fns/esm/getTime/index.js","./node_modules/date-fns/esm/getUnixTime/index.js","./apps/backoffice/src/app/engine/api-keys/api-key-details.class.ts","./apps/backoffice/src/app/engine/api-keys/api-key-modal.component.ts","./apps/backoffice/src/app/engine/api-keys/api-keys.service.ts","./apps/backoffice/src/app/engine/api-keys/api-keys.component.ts","./apps/backoffice/src/app/engine/engine.routes.ts","./apps/backoffice/src/app/engine/engine.module.ts","./node_modules/rxjs/_esm2015/internal/observable/interval.js"],"names":["PlaceComponent","_settings","_service","_users","super","tab_list","this","active_item","dark_mode","id","name","icon","class","concat","extensions","title","updateTabList","PlaceDatabase","backfill","url","toPromise","PlaceDatabaseDetailsComponent","_engine_service","reindexing","reindex","then","err","JSON","stringify","response","message","backfilling","PlaceDetailsComponent","_dialog","api_details","build_time","format","user","loadApiDetails","log","open","data","changelog","content","details","copy","AdminClusterNodeComponent","points","node","memory_usage","memory_total","generateCharts","changes","history","list","length","unshift","slice","Math","max","map","event","idx","x","y","value","PlaceClusterItemComponent","cpu_history","cluster","cluster_nodes","edge_nodes","PlaceClusterTaskListComponent","close","process_list","column_list","loadProcesses","interval","process","ref","type","subscription","componentInstance","subscribe","reason","killing","loading","killProcess","include_status","PlaceClusterDetailsComponent","cluster_list","clusters$","pipe","filter","active_cluster","tap","switchMap","resp","catchError","_","date","valueOf","forEach","nodes","hostname","push","core_cpu","shift","AdminInterfacesComponent","interfaces","loadInterfaces","Object","keys","AdminBrokersComponent","brokers","loadBrokers","height","width","maxHeight","maxWidth","item","save","catch","newBroker","ExtensionModalComponent","_data","_hotkey","available_types","condition_ops","listen","submit","form","conditions","controls","condition","setValue","c","markAllAsTouched","valid","emit","metadata","PlaceExtensionsComponent","extension_list","domain_list","r","setDomain","domain","config","backoffice","extend","sort","a","b","localeCompare","parse","undefined","first","i","updateDomain","e","ext","updated","FIELD_NAME_MAPPING","issuer","signing_key","sub","client_id","client_secret","scopes","user_agent","StaffTenantModalComponent","_dialog_ref","tenant","name_map","credentials","issue","platform","office_form","google_form","valueChanges","removeControl","addControl","disableClose","call","PlaceStaffAPIComponent","BehaviorSubject","tenants","console","t","getValue","shareReplay","next","afterClosed","system","statusText","editTenant","EdgeModalComponent","edge","description","method","new_edge","PlaceEdgeComponent","_change","edges","of","token","edit","remove","AdminSchemasComponent","_state","schema_list","schemas","active_schema","schema_copy","schema","copySchema","saveSchema","newSchema","$event","preventDefault","getTime","dirtyDate","requiredArgs","arguments","toDate","timestamp","getUnixTime","floor","PlaceAPIKeyDetails","user_id","authority_id","permissions","created_at","Date","updated_at","x_api_key","APIKeyModalComponent","users","combineLatest","sys_admin","support","separators","addScope","removeScope","setTimeout","patchValue","APIKeyService","_domain","_last_key","last_key","asObservable","active_domain","available_domains","limit","available_keys","query_params","fn","d","path","sessionStorage","getItem","Promise","race","key","form_data","setItem","now","ROUTES","component","canActivate","children","AdminAPIKeysComponent","key_list","newKey","redirectTo","AppPlaceModule","period","scheduler","schedule","subscriber","add","dispatch","counter","state"],"mappings":"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","file":"912.1c2fd0b7f4fb6675ce22.js","sourcesContent":["import { Component } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { ActiveItemService } from '../common/item.service';\nimport { SettingsService } from '../common/settings.service';\nimport { BackofficeUsersService } from '../users/users.service';\n\n@Component({\n    selector: 'app-engine',\n    template: `\n        <div\n            class=\"h-16 p-4 text-2xl bg-white border-b border-gray-400 border-opacity-30 shadow z-10 dark:text-white dark:bg-greyer\"\n        >\n            PlaceOS Admin\n        </div>\n        <div class=\"flex flex-1 z-0 h-1/2 dark:text-white\">\n            <div\n                class=\"relative w-64 h-full bg-white border-r border-gray-400 border-opacity-30 shadow z-10 dark:bg-greyer\"\n            >\n                <a\n                    *ngFor=\"let item of tab_list\"\n                    class=\"flex items-center space-x-2 my-2 rounded-l-2xl h-8 px-3 ml-3 hover:bg-primary hover:bg-opacity-25\"\n                    [routerLink]=\"['/admin', item.id]\"\n                    routerLinkActive=\"active\"\n                >\n                    <app-icon [icon]=\"item.icon\"></app-icon>\n                    <span>{{ item.name }}</span>\n                </a>\n            </div>\n            <div\n                class=\"relative flex-1 w-1/2 h-full z-0 bg-white px-4 dark:text-white dark:bg-grey\"\n            >\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n        <!-- <item-display class=\"w-full h-full\" name=\"Admin\" route=\"admin\" [has_change]=\"false\" [tabs]=\"tab_list\">\n        </item-display> -->\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n\n            .active {\n                background-color: #c2185b !important;\n                color: #fff;\n                margin-right: -1px;\n            }\n        `,\n    ],\n})\nexport class PlaceComponent extends BaseClass {\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, 'admin');\n    }\n\n    public get dark_mode() {\n        return this._users.dark_mode;\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info' } },\n            {\n                id: 'database',\n                name: 'Database',\n                icon: { class: 'backoffice-database' },\n            },\n            {\n                id: 'clusters',\n                name: 'Clusters',\n                icon: { class: 'backoffice-server' },\n            },\n            { id: 'edge', name: 'Edges', icon: { class: 'backoffice-server' } },\n            {\n                id: 'interfaces',\n                name: 'Interfaces',\n                icon: { class: 'backoffice-browser' },\n            },\n            {\n                id: 'brokers',\n                name: 'MQTT Brokers',\n                icon: { class: 'backoffice-server' },\n            },\n            {\n                id: 'staff-api',\n                name: 'Staff API',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'extensions',\n                name: 'Extensions',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'api-keys',\n                name: 'API Keys',\n                icon: { class: 'backoffice-key' },\n            },\n            {\n                id: 'schemas',\n                name: 'Custom Schemas',\n                icon: { class: 'backoffice-list' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _service: ActiveItemService,\n        private _users: BackofficeUsersService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.title = 'Admin';\n        this.updateTabList();\n    }\n}\n","import { post, apiEndpoint } from '@placeos/ts-client';\nimport { Injectable } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlaceDatabase extends BaseClass {\n    public reindex(backfill: boolean = true) {\n        const url = `${apiEndpoint()}/reindex${\n            backfill ? '?backfill=true' : ''\n        }`;\n        return post(url, null).toPromise();\n    }\n\n    public backfill() {\n        const url = `${apiEndpoint()}/backfill`;\n        return post(url, null).toPromise();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { PlaceDatabase } from 'apps/backoffice/src/app/common/database.service';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'app-database-details',\n    template: `\n        <mat-card>\n            <mat-card-content>\n                Re-index elasticsearch for the\n                <br />current state of the database\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button [disabled]=\"reindexing\" (click)=\"reindex()\">\n                    <ng-container *ngIf=\"!reindexing; else spinner\"\n                        >Re-index</ng-container\n                    >\n                </button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card>\n            <mat-card-content>\n                Backfill elasticsearch with the<br />\n                current state of the database\n            </mat-card-content>\n            <mat-card-actions>\n                <button\n                    mat-button\n                    [disabled]=\"backfilling\"\n                    (click)=\"backfill()\"\n                >\n                    <ng-container *ngIf=\"!backfilling; else spinner\"\n                        >Backfill</ng-container\n                    >\n                </button>\n            </mat-card-actions>\n        </mat-card>\n        <ng-template #spinner>\n            <div class=\"flex justify-center w-full my-1\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            button {\n                min-width: 10em;\n                margin: 0.25em;\n            }\n\n            mat-card {\n                margin: 0.5em;\n                text-align: center;\n            }\n        `,\n    ],\n})\nexport class PlaceDatabaseDetailsComponent {\n    /** Whether backend is reindexing the database */\n    public reindexing: boolean;\n    /** Whether backend is reindexing the database */\n    public backfilling: boolean;\n\n    constructor(private _engine_service: PlaceDatabase) {}\n\n    public reindex() {\n        this.reindexing = true;\n        this._engine_service.reindex().then(\n            () => (this.reindexing = false),\n            (err) => {\n                this.reindexing = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    public backfill() {\n        this.backfilling = true;\n        this._engine_service.backfill().then(\n            () => (this.backfilling = false),\n            (err) => {\n                this.backfilling = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { get, apiEndpoint } from '@placeos/ts-client';\n\nimport { VERSION } from '../../environments/version';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ChangelogModalComponent,\n    ChangelogModalData,\n} from 'apps/backoffice/src/app/overlays/changelog-modal/changelog-modal.component';\nimport { BackofficeUsersService } from 'apps/backoffice/src/app/users/users.service';\nimport {\n    notifyError,\n    notifyInfo,\n} from 'apps/backoffice/src/app/common/notifications';\n\nimport * as dayjs from 'dayjs';\nimport { copyToClipboard } from '../common/general';\n\nexport interface PlaceAPIDetails {\n    /** Display name for the application */\n    readonly app: string;\n    /** Semantic version of the API */\n    readonly version: string;\n    /** Build time of the current version of the API */\n    readonly build_time: number;\n    /** Commit hash of the current version of the API */\n    readonly commit: string;\n}\n\n@Component({\n    selector: 'app-engine-details',\n    template: `\n        <h3 class=\"text-lg font-medium\" i18n=\"@@backoffice\">Backoffice</h3>\n        <section class=\"space-y-2 mb-4\">\n            <div class=\"flex flex-col\">\n                <label for=\"version\" i18n=\"@@version\">Version:</label>\n                <div\n                    name=\"version\"\n                    class=\"select-all\"\n                    (click)=\"copy('version', backoffice_version)\"\n                >\n                    {{ backoffice_version }}\n                </div>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"hash\" i18n=\"@@commitHash\">Commit Hash:</label>\n                <div\n                    name=\"hash\"\n                    class=\"select-all\"\n                    (click)=\"copy('hash', backoffice_hash)\"\n                >\n                    {{ backoffice_hash }}\n                </div>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"build-time\" i18n=\"@@buildTime\">Build:</label>\n                <div\n                    name=\"build-time\"\n                    class=\"select-all\"\n                    (click)=\"copy('build time', backoffice_build)\"\n                >\n                    {{ backoffice_build }}\n                </div>\n            </div>\n        </section>\n        <h3 class=\"text-lg font-medium\" i18n=\"@@apiHeader\">API</h3>\n        <section class=\"space-y-2\">\n            <div class=\"flex flex-col\">\n                <label for=\"version\" i18n=\"@@apiName\">Application Name:</label>\n                <div\n                    class=\"select-all\"\n                    (click)=\"copy('app name', api_details?.app)\"\n                >\n                    {{ api_details?.app }}\n                </div>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"version\" i18n=\"@@version\">Version:</label>\n                <div\n                    class=\"select-all\"\n                    (click)=\"copy('app version', api_details?.version)\"\n                >\n                    {{ api_details?.version }}\n                </div>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"version\" i18n=\"@@buildTime\">Build:</label>\n                <div\n                    class=\"select-all\"\n                    (click)=\"copy('app build time', api_build)\"\n                >\n                    {{ api_build }}\n                </div>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"version\" i18n=\"@@commitHash\">Commit Hash:</label>\n                <div\n                    class=\"select-all\"\n                    (click)=\"copy('app commit', api_details?.commit || 'HEAD')\"\n                >\n                    {{ api_details?.commit || 'HEAD' }}\n                </div>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceDetailsComponent extends BaseClass implements OnInit {\n    /** Current details about the API */\n    public api_details: PlaceAPIDetails;\n\n    public get api_build(): string {\n        if (!this.api_details || !this.api_details.build_time) {\n            return 'Unknown';\n        }\n        return dayjs(this.api_details.build_time).format(\n            'DD MMM YYYY [at] h:mma'\n        );\n    }\n\n    public get user() {\n        return this._users.user;\n    }\n\n    public get backoffice_version() {\n        return VERSION?.tag || '';\n    }\n\n    public get backoffice_hash() {\n        return VERSION?.hash || '';\n    }\n\n    public get backoffice_build() {\n        const build = dayjs(VERSION.time);\n        return build.format('DD MMM YYYY [at] h:mma');\n    }\n\n    constructor(\n        private _users: BackofficeUsersService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadApiDetails();\n    }\n\n    public changelog(log: string) {\n        this._dialog.open<ChangelogModalComponent, ChangelogModalData>(\n            ChangelogModalComponent,\n            {\n                data: { changelog: log },\n            }\n        );\n    }\n\n    public copy(name: string, content: string) {\n        copyToClipboard(content);\n        notifyInfo(`Copied ${name} to clipboard`);\n    }\n\n    public loadApiDetails(): void {\n        get(`${apiEndpoint()}/version`)\n            .toPromise()\n            .then(\n                (details) => (this.api_details = details as any),\n                (err) =>\n                    notifyError(\n                        `Error loading API details. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { humanReadableByteCount } from '@placeos/ts-client';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { Point } from '../../common/types';\n\ninterface PlaceClusterRunCounts {\n    modules: number;\n    drivers: number;\n}\n\nexport interface PlaceClusterNode {\n    hostname: string;\n    cpu_count: number;\n    core_cpu: number;\n    total_cpu: number;\n    memory_total: number;\n    memory_usage: number;\n    core_memory: number;\n    run_count?: PlaceClusterRunCounts;\n}\n\nexport interface PlaceClusterUsageStamp {\n    id: number;\n    value: number;\n}\n\n@Component({\n    selector: 'admin-cluster-node',\n    template: `\n        <h4>{{ node?.hostname }}</h4>\n        <div class=\"mb-2 h-40 w-64\">\n            <div basic-line-graph [points]=\"points\"></div>\n        </div>\n        <div class=\"memory-utilisation\">\n            <div class=\"flex items-center space-x-2 p-2\">\n                <label i18n=\"@@cluserMemoryUsed\">Memory Used</label>\n                <div class=\"value\">\n                    {{ used_memory }} / {{ total_memory }} ({{\n                        memory_percentage.toFixed(2)\n                    }}%)\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 bg-black bg-opacity-5 rounded p-2\"\n            >\n                <label i18n=\"@@clusterCpuUsage\">CPU Usage</label>\n                <div class=\"value\">{{ node?.total_cpu }}%</div>\n            </div>\n        </div>\n    `,\n    styles: [],\n})\nexport class AdminClusterNodeComponent implements OnChanges, OnInit {\n    /** Node to display on the view */\n    @Input() public node: PlaceClusterNode;\n    /** Historical data for node */\n    @Input() public history: PlaceClusterUsageStamp[];\n    /** Store for the chart data object */\n    // private _chart: Chart;\n    /**  */\n    public points: Point[] = [];\n\n    public get used_memory() {\n        return humanReadableByteCount((this.node?.memory_usage || 0) * 1024);\n    }\n\n    public get total_memory() {\n        return humanReadableByteCount((this.node?.memory_total || 0) * 1024);\n    }\n\n    public get memory_percentage() {\n        return (\n            ((this.node?.memory_usage || 0) / (this.node?.memory_total || 1)) *\n            100\n        );\n    }\n\n    @ViewChild('chart', { static: true })\n    public _chart_el: ElementRef<HTMLCanvasElement>;\n\n    public ngOnInit() {\n        this.generateCharts();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.history && this.history) {\n            this.generateCharts();\n        }\n    }\n\n    public generateCharts(): void {\n        const list = [...this.history] || [];\n        while (list.length < 12) {\n            list.unshift({} as any);\n        }\n        const data = list\n            .slice(Math.max(0, list.length - 12))\n            .map((event, idx) => ({\n                x: idx,\n                y: event.value || 0,\n            }));\n        this.points = [...data];\n    }\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { PlaceCluster } from '@placeos/ts-client';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    PlaceClusterNode,\n    PlaceClusterUsageStamp,\n} from './cluster-node.component';\n\n@Component({\n    selector: 'engine-cluster-item',\n    template: `\n        <ng-container *ngFor=\"let node of cluster_nodes\">\n            <admin-cluster-node\n                [node]=\"node\"\n                [history]=\"cpu_history[node.hostname] || []\"\n            ></admin-cluster-node>\n        </ng-container>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterItemComponent implements OnChanges {\n    /** Cluster to display details for */\n    @Input() public cluster: PlaceCluster;\n    /** List of historical data for cluster's CPU usage */\n    @Input() public cpu_history: HashMap<PlaceClusterUsageStamp[]> = {};\n    /** List of nodes contained by the cluster */\n    public cluster_nodes: PlaceClusterNode[];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.cluster && this.cluster) {\n            this.cluster_nodes = [this.cluster, ...this.cluster.edge_nodes];\n            this.cpu_history = this.cpu_history || {};\n        }\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceCluster,\n    PlaceProcess,\n    terminateProcess,\n    queryProcesses,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'engine-cluster-task-list',\n    template: `\n        <div class=\"flex items-center mb-4\">\n            <button mat-icon-button (click)=\"close.emit()\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'backoffice-arrow-left' }\"\n                ></app-icon>\n            </button>\n            <h3 class=\"text-lg font-medium\" i18n=\"@@clusterHeader\">\n                Cluster - {{ cluster?.hostname }}\n            </h3>\n        </div>\n        <div role=\"table\" class=\"h-1/2 flex-1\">\n            <div table-head>\n                <div class=\"flex-1 p-2\">Name</div>\n                <div class=\"w-24 p-2\">CPU %</div>\n                <div class=\"w-24 p-2\">Memory</div>\n                <div class=\"w-24 p-2\">Instances</div>\n                <div class=\"w-12 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let element of process_list\">\n                    <div\n                        class=\"flex-1 p-2\"\n                        [innerHTML]=\"element.id | driverFormat\"\n                    ></div>\n                    <div class=\"w-24 p-2\">\n                        {{ element.cpu_usage.toFixed(2) }}%\n                    </div>\n                    <div class=\"w-24 p-2\">{{ element.used_memory }}</div>\n                    <div class=\"w-24 p-2\">{{ element.module_instances }}</div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            (click)=\"confirmKillProcess(element)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div\n            class=\"flex flex-col items-center p-8\"\n            *ngIf=\"!process_list || !process_list.length\"\n        >\n            <p i18n=\"@@processTableEmpty\">No tasks running on cluster</p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterTaskListComponent extends BaseClass implements OnInit {\n    /** Cluster to display tasks details for */\n    @Input() public cluster: PlaceCluster;\n    /** Emitter for close events */\n    @Output() public close = new EventEmitter<void>();\n    /** List of processes running in the cluster */\n    public process_list: PlaceProcess[] = [];\n    /** Whether the task list is updating */\n    public loading: boolean;\n    /** ID of the process being killed */\n    public killing: string;\n\n    public column_list: string[] = [\n        'id',\n        'cpu_usage',\n        'memory_usage',\n        'module_instances',\n        'running',\n    ];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadProcesses();\n        this.interval('load_tasks', () => this.loadProcesses(), 2000);\n    }\n\n    public confirmKillProcess(process: PlaceProcess): void {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want kill the process for \"${process.id}\"?</p>\n                    <p>The process will be terminated <strong>immediately</strong>.\n                    The process may be restarted after a short while.</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm_kill',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.killing = process.id;\n                    ref.componentInstance.loading = 'Processing request...';\n                    this.killProcess(process).then(\n                        () => {\n                            this.killing = null;\n                            ref.close();\n                        },\n                        (err) => {\n                            ref.componentInstance.loading = null;\n                            this.killing = null;\n                            notifyError(\n                                `Error killing process. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            );\n                            ref.close();\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public killProcess(process: PlaceProcess) {\n        return terminateProcess(this.cluster.id, process.id).toPromise();\n    }\n\n    private loadProcesses(): void {\n        this.loading = true;\n        queryProcesses(this.cluster.id, {\n            include_status: true,\n        } as any).subscribe((list) => {\n            this.process_list = list || [];\n            this.loading = false;\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { map, catchError, switchMap, tap, filter } from 'rxjs/operators';\n\nimport { PlaceCluster, queryClusters } from '@placeos/ts-client';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport * as dayjs from 'dayjs';\nimport { PlaceClusterUsageStamp } from './cluster-node.component';\nimport { interval } from 'rxjs';\n\n@Component({\n    selector: 'engine-cluster-details',\n    template: `\n        <ng-container\n            *ngIf=\"cluster_list && cluster_list.length; else empty_state\"\n        >\n            <ng-container *ngIf=\"!active_cluster; else process_state\">\n                <ng-container *ngFor=\"let cluster of cluster_list\">\n                    <mat-card class=\"m-2 text-center\">\n                        <mat-card-header>\n                            <mat-card-title clas=\"capitalize\"\n                                >{{ cluster.hostname || 'Undefined Cluster' }}\n                            </mat-card-title>\n                        </mat-card-header>\n                        <mat-card-content>\n                            <engine-cluster-item\n                                [cluster]=\"cluster\"\n                                [cpu_history]=\"cpu_history[cluster.id] || []\"\n                            ></engine-cluster-item>\n                        </mat-card-content>\n                        <mat-card-actions>\n                            <button\n                                mat-button\n                                (click)=\"active_cluster = cluster\"\n                                i18n=\"@@viewClusterProcesses\"\n                            >\n                                View Processes\n                            </button>\n                        </mat-card-actions>\n                    </mat-card>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center p-8 space-y-2\"\n            >\n                <app-icon\n                    class=\"text-3xl\"\n                    [icon]=\"{ class: 'backoffice-cross' }\"\n                ></app-icon>\n                <div class=\"text\" i18n=\"@@clusterListEmpty\">\n                    No Cluster details to show\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #process_state>\n            <engine-cluster-task-list\n                [cluster]=\"active_cluster\"\n                (close)=\"active_cluster = null\"\n            ></engine-cluster-task-list>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterDetailsComponent extends BaseClass implements OnInit {\n    /** List of available clusters on this instance of engine */\n    public cluster_list: PlaceCluster[] = [];\n    /** Map of clusters to CPU usage history */\n    public cpu_history: HashMap<HashMap<PlaceClusterUsageStamp[]>> = {};\n    /** Active cluster to show details for */\n    public active_cluster: PlaceCluster;\n    /** Whether cluster details are being loaded */\n    public loading: boolean;\n\n    public readonly clusters$ = interval(2000).pipe(\n        filter(() => !this.active_cluster),\n        tap(() => (this.loading = true)),\n        switchMap(() => queryClusters({ include_status: true } as any)),\n        map((resp) => resp.data),\n        catchError((_) => []),\n        map((list) => {\n            this.cluster_list = list || [];\n            const date = dayjs().valueOf();\n            this.cluster_list.forEach((cluster) => {\n                if (!this.cpu_history[cluster.id]) {\n                    this.cpu_history[cluster.id] = {};\n                }\n                const nodes = [cluster, ...cluster.edge_nodes] as any;\n                for (const node of nodes) {\n                    if (!this.cpu_history[cluster.id][node.hostname]) {\n                        this.cpu_history[cluster.id][node.hostname] = [];\n                    }\n                    this.cpu_history[cluster.id][node.hostname].push({\n                        id: date,\n                        value: node.core_cpu,\n                    });\n                    if (\n                        this.cpu_history[cluster.id][node.hostname].length > 120\n                    ) {\n                        this.cpu_history[cluster.id][node.hostname].shift();\n                    }\n                }\n            });\n        }),\n        tap(() => (this.loading = false))\n    );\n\n    public ngOnInit(): void {\n        this.subscription('load_cluster', this.clusters$.subscribe());\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { listInterfaceRepositories } from '@placeos/ts-client';\n\nimport { Identity } from 'apps/backoffice/src/app/common/types';\n\n@Component({\n    selector: 'app-interfaces',\n    template: `\n        <div\n            role=\"table\"\n            *ngIf=\"interfaces && interfaces.length; else load_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Repository</div>\n                <div class=\"w-32 p-2\">Commit Hash</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of interfaces\">\n                    <div class=\"flex-1 p-2\">{{ item.id }}</div>\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <app-icon class=\"mb-4\" className=\"backoffice-cross\"></app-icon>\n                <p>No interfaces</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AdminInterfacesComponent implements OnInit {\n    /** List of interfaces */\n    public interfaces: Identity[] = [];\n\n    ngOnInit() {\n        this.loadInterfaces();\n    }\n\n    private async loadInterfaces() {\n        const interfaces = await listInterfaceRepositories().toPromise();\n        this.interfaces = Object.keys(interfaces).map((id) => ({\n            id,\n            name: interfaces[id],\n        }));\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {\n    PlaceMQTTBroker,\n    updateBroker,\n    addBroker,\n    queryBrokers,\n    removeBroker,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ItemCreateUpdateModalComponent } from 'apps/backoffice/src/app/overlays/item-modal/item-modal.component';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { openConfirmModal } from 'apps/backoffice/src/app/common/general';\n\n@Component({\n    selector: 'app-brokers',\n    template: `\n        <button mat-button class=\"my-4\" (click)=\"newBroker()\">\n            <div class=\"flex items-center\">\n                <app-icon className=\"backoffice-plus\"></app-icon>\n                <div class=\"text\">Add Broker</div>\n            </div>\n        </button>\n        <div role=\"table\" *ngIf=\"brokers && brokers.length; else load_state\">\n            <div table-head>\n                <div class=\"w-32 p-2\">Name</div>\n                <div class=\"w-24 p-2\">Auth Type</div>\n                <div class=\"flex-1 p-2\">Description</div>\n                <div class=\"w-32 p-2 truncate\">Host</div>\n                <div class=\"w-16 p-2\">Port</div>\n                <div class=\"w-16 p-2\">TLS</div>\n                <div class=\"w-32 p-2\">Filters</div>\n                <div class=\"w-24 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of brokers\">\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                    <div class=\"w-24 p-2\">\n                        { item.auth_type, select, 0 { Certificate }, 2 { User\n                        Password }, other { No Auth }}\n                    </div>\n                    <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                    <div class=\"w-32 p-2 truncate\">{{ item.host }}</div>\n                    <div class=\"w-16 p-2\">{{ item.port }}</div>\n                    <div class=\"w-16 p-2\">\n                        { item.tls, select, true { Yes }, false { No } }\n                    </div>\n                    <div class=\"w-32 p-2\">{{ item.filters | json }}</div>\n                    <div class=\"w-24 p-2 flex items-center\">\n                        <button mat-icon-button (click)=\"editBroker(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"deleteBroker(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No Brokers</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n            }\n        `,\n    ],\n})\nexport class AdminBrokersComponent extends BaseClass implements OnInit {\n    public brokers: PlaceMQTTBroker[] = [];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loadBrokers();\n    }\n\n    public newBroker(): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new PlaceMQTTBroker(),\n                name: 'Broker',\n                save: (item) => addBroker(item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public editBroker(item: PlaceMQTTBroker): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Broker',\n                save: (item) => updateBroker(item.id, item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public async deleteBroker(item: PlaceMQTTBroker): Promise<void> {\n        if (item) {\n            const details = await openConfirmModal(\n                {\n                    title: `Delete MQTT Broker`,\n                    content: `<p>Are you sure you want delete this boker?</p><p>The broker will be deleted <strong>immediately.</strong></p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n                this._dialog\n            );\n            if (!details) return;\n            details.loading('Deleting broker...');\n            const err = await removeBroker(item.id)\n                .toPromise()\n                .catch((_) => _);\n            details.close();\n            if (err)\n                return notifyError(\n                    `Error deleting broker. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            notifySuccess(`Successfully deleted broker \"${item.name}\".`);\n            this.loadBrokers();\n        }\n    }\n\n    private async loadBrokers() {\n        const brokers = await queryBrokers()\n            .pipe(map((resp) => resp.data))\n            .toPromise();\n        this.brokers = brokers;\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ item ? 'Edit' : 'New' }} Extension</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"form && !loading; else load_state\" [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\">\n                <label for=\"type\" i18n=\"@@typeLabel\">Type<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select formControlName=\"type\">\n                        <mat-option *ngFor=\"let type of available_types\" [value]=\"type\">\n                            <span class=\"capitalize\">{{ type }}</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"name\" i18n=\"@@nameLabel\">Name<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Extension Display Name\"\n                        i18n-placeholder=\"@@extensionNamePlaceholder\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error i18n=\"@@nameError\">A valid name is required</mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\">\n            <label for=\"url\" i18n=\"@@urlLabel\">URL<span>*</span>: </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"url\"\n                    placeholder=\"Extension URL\"\n                    i18n-placeholder=\"@@extensionUrlPlaceholder\"\n                    formControlName=\"url\"\n                />\n                <mat-error i18n=\"@@urlError\">A valid URL is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"w-full\">\n            <label *ngIf=\"form.controls.conditions.value?.length\">Conditions</label>\n            <div class=\"fieldset\" *ngFor=\"let condition of form.controls.conditions.value\">\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"url\"\n                            [(ngModel)]=\"condition[0]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Field\"\n                            i18n-placeholder=\"@@conditionPlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [(ngModel)]=\"condition[1]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Operation\"\n                        >\n                            <mat-option *ngFor=\"let type of condition_ops\" [value]=\"type\">\n                                <span class=\"capitalize\">{{ type }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"value\"\n                            [disabled]=\"condition[1] === 'truthy' || condition[1] === 'falsy'\"\n                            [(ngModel)]=\"condition[2]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Value\"\n                            i18n-placeholder=\"@@conditionValuePlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button mat-icon-button (click)=\"removeCondition(condition)\">\n                    <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                </button>\n            </div>\n            <button mat-button class=\"w-full\" (click)=\"addCondition()\">Add Condition</button>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (click)=\"submit()\">{{ item ? 'Save' : 'Add' }} [S]</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HotkeysService } from 'apps/backoffice/src/app/common/hotkeys.service';\nimport { DialogEvent } from 'apps/backoffice/src/app/common/types';\n\nimport { BackofficeExtension } from '../extensions.component';\n\n@Component({\n    selector: 'extension-modal',\n    templateUrl: './extension-modal.component.html',\n    styleUrls: ['./extension-modal.component.scss'],\n})\nexport class ExtensionModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly available_types = [\n        'admin',\n        'systems',\n        'modules',\n        'zones',\n        'drivers',\n        'repositories',\n        'triggers',\n        'users',\n        'domains',\n    ];\n    public readonly condition_ops = ['includes', 'equals', 'truthy', 'falsy'];\n    public readonly item = this._data.item;\n    public loading = false;\n    public form: FormGroup;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { item: BackofficeExtension },\n        private _hotkey: HotkeysService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'save',\n            this._hotkey.listen(['KeyS'], () => this.submit())\n        );\n        this.form = new FormGroup({\n            type: new FormControl(this.item?.type || 'systems', [\n                Validators.required,\n            ]),\n            name: new FormControl(this.item?.name || '', [Validators.required]),\n            url: new FormControl(this.item?.url || '', [Validators.required]),\n            conditions: new FormControl(this.item?.conditions || []),\n        });\n    }\n\n    public addCondition() {\n        const conditions = this.form.controls.conditions.value;\n        conditions.push(['', '', '']);\n    }\n\n    public removeCondition(condition: [string, string, any]) {\n        this.form.controls.conditions.setValue(\n            this.form.controls.conditions.value.filter((c) => c !== condition)\n        );\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        const value = this.form.value;\n        value.conditions = value.conditions.filter((c) => c[0] && c[1]);\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceDomain, queryDomains, updateDomain } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { ApplicationIcon } from 'apps/backoffice/src/app/common/types';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\n\nexport interface BackofficeExtension {\n    /** Section of backoffice to extend */\n    type:\n        | 'admin'\n        | 'systems'\n        | 'modules'\n        | 'zones'\n        | 'drivers'\n        | 'repositories'\n        | 'triggers'\n        | 'users'\n        | 'domains';\n    /** Display name of the extension */\n    name: string;\n    /** URL to the application to embed */\n    url: string;\n    /** Conditions for showing the extension */\n    conditions: [string, string, any][];\n    /** Icon to display next to the name */\n    icon: ApplicationIcon;\n}\n\n@Component({\n    selector: '[app-extensions]',\n    template: `\n        <h2 class=\"text-lg font-medium mb-4\">Backoffice extensions</h2>\n        <div *ngIf=\"!loading; else load_state\">\n            <div class=\"flex items-center space-x-2 mb-4\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"domain\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <button mat-button (click)=\"editExtension()\">\n                    Add Extension\n                </button>\n            </div>\n            <div role=\"table\">\n                <div table-head>\n                    <div class=\"w-24 p-2\">Type</div>\n                    <div class=\"w-40 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">URL</div>\n                    <div class=\"w-28 p-2\">Conditions</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let extension of extension_list\">\n                        <div class=\"w-24 p-2 capitalize\">\n                            {{ extension.type }}\n                        </div>\n                        <div class=\"w-40 p-2\">{{ extension.name }}</div>\n                        <div class=\"flex-1 p-2\">{{ extension.url }}</div>\n                        <div class=\"w-28 p-2\">\n                            {{ extension.conditions.length }}\n                        </div>\n                        <div class=\"w-24 flex items-center justify-center\">\n                            <button\n                                mat-icon-button\n                                (click)=\"editExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"removeExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                </div>\n                <div class=\"text\">{{ loading }}</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceExtensionsComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public domain: PlaceDomain;\n    /** List of extension available on the current domain */\n    public extension_list: BackofficeExtension[] = [];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.setDomain(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public setDomain(domain: PlaceDomain) {\n        this.domain = domain;\n        const config = this.domain.config?.backoffice?.extend || {};\n        const extensions: BackofficeExtension[] = [];\n        for (const type in config) {\n            if (!config[type]) {\n                continue;\n            }\n            for (const name in config[type]) {\n                if (!config[type][name]) {\n                    continue;\n                }\n                extensions.push({\n                    ...config[type][name],\n                    name,\n                    type,\n                });\n            }\n        }\n        this.extension_list = extensions;\n        this.extension_list.sort(\n            (a, b) =>\n                a.type.localeCompare(b.type) || a.name.localeCompare(b.name)\n        );\n    }\n\n    public editExtension(item?: BackofficeExtension) {\n        const ref = this._dialog.open(ExtensionModalComponent, {\n            data: { item: item ? JSON.parse(JSON.stringify(item)) : undefined },\n        });\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (event) => {\n                ref.componentInstance.loading = true;\n                if (item) {\n                    this.extension_list = this.extension_list.filter(\n                        (i) => i !== item\n                    );\n                }\n                this.extension_list.push(event.metadata);\n                await this.updateDomain();\n                ref.componentInstance.loading = false;\n                ref.close();\n            });\n    }\n\n    public async removeExtension(item: BackofficeExtension) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                data: {\n                    title: 'Remove extension',\n                    content: `Are you sure you want to remove the extension \"${item.name}\" from ${item.type}?`,\n                    icon: { class: 'backoffice-trash' },\n                },\n            }\n        );\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (_) => {\n                ref.componentInstance.loading = 'Removing extension...';\n                this.extension_list = this.extension_list.filter(\n                    (i) => i !== item\n                );\n                await this.updateDomain().catch((e) =>\n                    notifyError(`Error removing extension: ${e}`)\n                );\n                ref.componentInstance.loading = '';\n                ref.close();\n            });\n    }\n\n    public async updateDomain() {\n        const extensions = {};\n        for (const ext of this.extension_list) {\n            if (!extensions[ext.type]) {\n                extensions[ext.type] = {};\n            }\n            const data = { ...ext };\n            delete data.type;\n            delete data.name;\n            extensions[ext.type][ext.name] = data;\n        }\n        const updated = new PlaceDomain({\n            ...this.domain,\n            config: {\n                ...this.domain.config,\n                backoffice: {\n                    ...(this.domain.config.backoffice || {}),\n                    extend: extensions,\n                },\n            },\n        });\n        const domain = await updateDomain(this.domain.id, updated).toPromise();\n        this.setDomain(domain);\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { PlaceDomain, post, put } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent, HashMap } from '../common/types';\nimport { PlaceTenant } from './staff-api.component';\n\nconst FIELD_NAME_MAPPING: HashMap<string> = {\n    issuer: 'Service Account Email',\n    signing_key: 'Private Key',\n    sub: 'Service User',\n    client_id: 'Client ID',\n    client_secret: 'Client Secret',\n    domain: 'Domain',\n    scopes: 'Scopes',\n    user_agent: 'User Agent',\n};\n\nexport interface StaffTenantModalData {\n    tenant?: PlaceTenant;\n    domain?: PlaceDomain;\n}\n\n@Component({\n    selector: 'staff-tenant-modal',\n    template: `\n        <header>\n            <h3>{{ tenant ? 'Edit' : 'New' }} Tenant</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main [formGroup]=\"form\" *ngIf=\"!loading; else load_state\" class=\"overflow-auto\">\n            <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label>Name<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input matInput formControlName=\"name\" placeholder=\"Tenant Name\" />\n                        <mat-error>A tenant name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label>Platform<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"platform\">\n                            <mat-option value=\"google\">Google</mat-option>\n                            <mat-option value=\"office365\">Office365</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <form *ngIf=\"credentials\" [formGroup]=\"credentials\">\n                <div class=\"flex flex-col\" *ngFor=\"let item of credentials.controls | keyvalue\">\n                    <label class=\"capitalize\"\n                        >{{ name_map[item.key] || item.key }}<span>*</span>:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <ng-container [ngSwitch]=\"item.key\">\n                            <input\n                                matInput\n                                *ngSwitchDefault\n                                [formControlName]=\"item.key\"\n                                [placeholder]=\"name_map[item.key] || item.key\"\n                            />\n                            <textarea\n                                matInput\n                                *ngSwitchCase=\"'signing_key'\"\n                                [formControlName]=\"item.key\"\n                                [placeholder]=\"name_map[item.key] || item.key\"\n                            ></textarea>\n                        </ng-container>\n                        <mat-error>A {{ item.key }} is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </form>\n        </main>\n        <footer *ngIf=\"!loading\" class=\"p-2 border-t border-gray-200 flex justify-center\">\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving staff API tenant...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class StaffTenantModalComponent implements OnInit {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public form: FormGroup;\n\n    public loading = false;\n\n    public readonly name_map = FIELD_NAME_MAPPING;\n\n    public get office_form() {\n        return new FormGroup({\n            tenant: new FormControl(this.tenant?.credentials?.tenant || '', [Validators.required]),\n            client_id: new FormControl(this.tenant?.credentials?.client_id || '', [\n                Validators.required,\n            ]),\n            client_secret: new FormControl(this.tenant?.credentials?.client_secret || '', [\n                Validators.required,\n            ]),\n        });\n    }\n\n    public get google_form() {\n        return new FormGroup({\n            issuer: new FormControl(this.tenant?.credentials?.issue || '', [Validators.required]),\n            signing_key: new FormControl(this.tenant?.credentials?.signing_key || '', [\n                Validators.required,\n            ]),\n            scopes: new FormControl(this.tenant?.credentials?.scopes || '', [Validators.required]),\n            domain: new FormControl(\n                this.tenant?.credentials?.domain || this._data.domain?.domain || '',\n                [Validators.required]\n            ),\n            sub: new FormControl(this.tenant?.credentials?.sub || '', [Validators.required]),\n            user_agent: new FormControl(this.tenant?.credentials?.user_agent || 'PlaceOS', [\n                Validators.required,\n            ]),\n        });\n    }\n\n    public get credentials(): FormGroup {\n        return this.form?.controls.credentials as any;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<StaffTenantModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            domain: new FormControl(this.domain?.domain || this.tenant.domain || 'localhost'),\n            name: new FormControl(this.tenant?.name || '', [Validators.required]),\n            platform: new FormControl(this.tenant?.platform || 'google', [Validators.required]),\n            credentials:\n                this.tenant?.platform === 'office365' ? this.office_form : this.google_form,\n        });\n        this.form.controls.platform.valueChanges.subscribe((platform) => {\n            this.form.removeControl('credentials');\n            this.form.addControl(\n                'credentials',\n                platform === 'office365' ? this.office_form : this.google_form\n            );\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const call = this.tenant?.id\n            ? put(`/api/staff/v1/tenants/${this.tenant.id}`, {\n                  ...(this.tenant || {}),\n                  ...this.form.value,\n              })\n            : post('/api/staff/v1/tenants', { ...(this.tenant || {}), ...this.form.value });\n        const tenant = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!tenant) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { del, get, PlaceDomain, queryDomains } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\n\nexport interface PlaceTenant {\n    id: string;\n    name: string;\n    domain: string;\n    platform: string;\n    credentials?: HashMap<string>\n}\n\n@Component({\n    selector: 'staff-api',\n    template: `\n        <div class=\"flex items-center space-x-2 mb-4\">\n            <label for=\"type\">Domain: </label>\n            <mat-form-field class=\"h-12\" appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [ngModel]=\"domain | async\"\n                    (ngModelChange)=\"domain.next($event)\"\n                    placeholder=\"Select Domain...\"\n                >\n                    <mat-option *ngFor=\"let domain of domain_list\" [value]=\"domain\">\n                        {{ domain.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button mat-button (click)=\"editTenant()\">Add Tenant</button>\n        </div>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div class=\"w-full\" *ngIf=\"(tenants | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-1/2 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Platform</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of tenants | async\">\n                        <div class=\"w-1/2 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">{{ item.platform }}</div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"editTenant(item)\">\n                                <app-icon className=\"backoffice-edit\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"removeTenant(item)\">\n                                <app-icon className=\"backoffice-trash\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No tenants for selected domain</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                height: 100%;\n                width: 100%;\n                padding: 1rem;\n            }\n        `,\n    ],\n})\nexport class PlaceStaffAPIComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public readonly domain = new BehaviorSubject<PlaceDomain>(null);\n\n    public readonly tenants = this.domain.pipe(\n        switchMap(() => {\n            this.loading = 'Loading tenants for domain...';\n            return get('/api/staff/v1/tenants');\n        }),\n        catchError((_) => []),\n        map((tenants) => {\n            console.log('No Error');\n            this.loading = '';\n            return tenants.filter((t) => t.domain === this.domain.getValue().domain);\n        }),\n        shareReplay()\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.domain.next(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public editTenant(tenant?: PlaceTenant) {\n        const ref = this._dialog.open(StaffTenantModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe(_ => this.domain.next(this.domain.getValue()));\n    }\n\n    public async removeTenant(tenant: PlaceTenant) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove tenant?',\n                content: `Remove <strong>${tenant.name}</strong> from this domain?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        details.loading('Removing tenant from domain...');\n        const system = await del(`/api/staff/v1/tenants/${tenant.id}`)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${tenant.id} from domain. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        notifySuccess(`Successfully removed tenant from domain.`);\n        this.domain.next(this.domain.getValue());\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { addEdge, PlaceEdge, updateEdge } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\n\nexport interface EdgeModalData {\n    edge: PlaceEdge;\n}\n\n@Component({\n    selector: 'edge-modal',\n    template: `\n        <header>\n            <h3>{{ edge ? 'Edit' : 'New' }} Edge</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main [formGroup]=\"form\" *ngIf=\"!loading && form; else load_state\" class=\"overflow-auto\">\n            <div class=\"flex flex-col flex-1\">\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"name\" placeholder=\"Edge Name\" />\n                    <mat-error>A edge name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea matInput formControlName=\"description\" placeholder=\"Edge description...\"></textarea>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer *ngIf=\"!loading\" class=\"p-2 border-t border-gray-200 flex justify-center\">\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving edge...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class EdgeModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly edge = this._data.edge;\n\n    public form: FormGroup;\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EdgeModalData,\n        private _dialog_ref: MatDialogRef<EdgeModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            name: new FormControl(this.edge?.name || '', [Validators.required]),\n            description: new FormControl(this.edge?.description || ''),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const edge = { ...this.edge, ...this.form.value };\n        const method = edge.id ? updateEdge(edge.id, edge) : addEdge(edge);\n        const new_edge = await method.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!new_edge) return notifyError('Error adding new edge.');\n        notifySuccess('Successfully added new edge.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceEdge, queryEdges, removeEdge, retrieveEdgeToken } from '@placeos/ts-client';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { copyToClipboard, openConfirmModal } from '../common/general';\nimport { notifyError, notifyInfo, notifySuccess } from '../common/notifications';\nimport { EdgeModalComponent } from './edge-modal.component';\n\n\n@Component({\n    selector: '[admin-edge]',\n    template: `\n        <button mat-button class=\"w-full sm:w-32 mb-4\" (click)=\"edit()\">Add New Edge</button>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div class=\"w-full\" *ngIf=\"(edges | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-32 p-2\">id</div>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">description</div>\n                    <div class=\"w-32 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of edges | async\">\n                        <div class=\"w-32 p-2 truncate\">{{ item.id }}</div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">{{ item.description }}</div>\n                        <div class=\"w-32 px-2 flex items-center justify-end \">\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"token(item)\">\n                                <app-icon className=\"backoffice-key\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"edit(item)\">\n                                <app-icon className=\"backoffice-edit\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"remove(item)\">\n                                <app-icon className=\"backoffice-trash\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No edges</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n                min-height: 10rem;\n            }\n        `,\n    ],\n})\nexport class PlaceEdgeComponent {\n    public loading: string = '';\n\n    private _change = new BehaviorSubject<boolean>(false);\n\n    public readonly edges: Observable<PlaceEdge[]> = this._change.pipe(\n        switchMap((_) => {\n            this.loading = 'Loading Edges...';\n            return queryEdges();\n        }),\n        catchError((_) => of({})),\n        map((details: any) => {\n            this.loading = '';\n            return details?.data || [];\n        }),\n        shareReplay()\n    );\n\n    public readonly token = async (edge: PlaceEdge) => {\n        const details = await retrieveEdgeToken(edge.id).toPromise();\n        copyToClipboard(details.token)\n        notifyInfo(`Token copied to clickboard.`);\n    };\n\n    public readonly edit = async (edge?: PlaceEdge) =>\n        this._dialog.open(EdgeModalComponent, { data: { edge } });\n\n    public readonly remove = async (i: PlaceEdge) => {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove edge?',\n                content: `Remove <strong>${i.name}</strong>?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Removing edge...');\n        const err = await removeEdge(i.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing edge. Error: ${err.statusText || err.message || err}`\n            );\n        notifySuccess('Successfully removed Edge.');\n        this._change.next(!this._change.getValue());\n    };\n\n    constructor(private _dialog: MatDialog) {}\n}\n","import { Component } from '@angular/core';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { randomInt } from '../common/general';\nimport { JsonSchema, SchemaStateService } from './schema-state.service';\n\n@Component({\n    selector: 'admin-schemas',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"active_schema\"\n                        (ngModelChange)=\"copySchema()\"\n                        placeholder=\"Select Schema...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let schema of schema_list | async\"\n                            [value]=\"schema\"\n                        >\n                            {{ schema.name }}\n                        </mat-option>\n                        <mat-option\n                            (click)=\"newSchema(); $event.preventDefault()\"\n                        >\n                            <span class=\"italic font-sans\">New Schema</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"newSchema()\">\n                Add Schema\n            </button>\n        </div>\n        <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"schema_copy\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema Name: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <input matInput [(ngModel)]=\"schema_copy.name\" />\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"saveSchema()\">\n                Save Schema\n            </button>\n        </div>\n        <div class=\"relative flex-1 h-1/2\">\n            <ng-container *ngIf=\"schema_copy; else empty_state\">\n                <settings-form-field\n                    [(ngModel)]=\"schema_copy.schema\"\n                    lang=\"json\"\n                    [readonly]=\"false\"\n                ></settings-form-field>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"absolute inset-0 flex items-center justify-center\">\n                <p class=\"p-8\">Select a schema to edit</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 1rem;\n                right: 1rem;\n                bottom: 0;\n                display: flex;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class AdminSchemasComponent {\n    public active_schema: JsonSchema;\n    public schema_copy: JsonSchema;\n\n    public readonly schema_list = this._state.schemas.pipe(shareReplay(1));\n    constructor(private _state: SchemaStateService) {}\n\n    public copySchema() {\n        if (!this.active_schema) return;\n        this.schema_copy = JSON.parse(JSON.stringify(this.active_schema));\n    }\n\n    public async newSchema() {\n        this.active_schema = {\n            name: 'New Schema',\n            schema: '{}',\n        };\n        this.copySchema();\n    }\n\n    public saveSchema() {\n        this._state.saveSchema(this.schema_copy);\n        this.active_schema = null;\n        this.schema_copy = null;\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import { getUnixTime } from 'date-fns';\n\nexport class PlaceAPIKeyDetails {\n    public readonly id: string;\n    public readonly name: string;\n    public readonly user_id: string;\n    public readonly authority_id: string;\n    public readonly description: string;\n    public readonly scopes: string[];\n    public readonly permissions: null | 'user' | 'support' | 'admin';\n    public readonly created_at: number;\n    public readonly updated_at: number;\n    public readonly x_api_key?: string;\n\n    constructor(_data: Partial<PlaceAPIKeyDetails>) {\n        this.id = _data.id || '';\n        this.name = _data.name || '';\n        this.user_id = _data.user_id || '';\n        this.authority_id = _data.authority_id || '';\n        this.description = _data.description || '';\n        this.permissions = _data.permissions || 'user';\n        this.created_at = _data.created_at || getUnixTime(new Date());\n        this.updated_at = _data.updated_at || getUnixTime(new Date());\n        this.x_api_key = _data.x_api_key;\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PlaceUser } from '@placeos/ts-client';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { addChipItem, removeChipItem } from '../../common/forms';\nimport { DialogEvent } from '../../common/types';\nimport { APIKeyService } from './api-keys.service';\n\n@Component({\n    selector: 'api-key-modal',\n    template: `\n        <header class=\"h-12 flex items-center justify-between p-2\">\n            <h2>New API Key</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            class=\"w-[32rem] max-w-[calc(100vw-2rem)]\"\n            *ngIf=\"!loading && form; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                        matInput\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Description</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        name=\"description\"\n                        formControlName=\"description\"\n                        placeholder=\"Description\"\n                        matInput\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"scope\">Scopes</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Scopes\">\n                        <mat-chip\n                            *ngFor=\"let scope of scope_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeScope(tag)\"\n                        >\n                            {{ scope }}\n                            <app-icon\n                                matChipRemove\n                                className=\"backoffice-cross\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            placeholder=\"Scopes...\"\n                            i18n-placeholder=\"@@apiScopePlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addScope($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"user\">User<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"user\"\n                        formControlName=\"user_id\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option\n                            *ngFor=\"let user of users | async\"\n                            [value]=\"user.id\"\n                            >{{ user.name }}</mat-option\n                        >\n                    </mat-select>\n                    <mat-error>A user is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"permissions\">Permissions</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"permissions\"\n                        formControlName=\"permissions\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option [value]=\"null\">None</mat-option>\n                        <mat-option value=\"user\">User</mat-option>\n                        <mat-option value=\"support\">Support</mat-option>\n                        <mat-option value=\"admin\">Admin</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 flex items-center justify-center border-t border-gray-100\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 w-[24rem] h-64\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class APIKeyModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public form: FormGroup = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        user_id: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        scopes: new FormControl([]),\n        permissions: new FormControl(''),\n    });\n    public loading: string;\n\n    public readonly users = combineLatest([\n        this._service.users,\n        this.form.valueChanges,\n    ]).pipe(\n        map(([users, { permissions }]) => {\n            console.log('Users:', users);\n            if (permissions === 'admin')\n                return users.filter((_) => _.sys_admin);\n            if (permissions === 'support')\n                return users.filter((_) => _.support || _.sys_admin);\n            return users;\n        })\n    );\n\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public readonly addScope = (e) =>\n        addChipItem(this.form.controls.scopes as any, e);\n    public readonly removeScope = (i) =>\n        removeChipItem(this.form.controls.scopes as any, i);\n\n    constructor(private _service: APIKeyService) {\n        setTimeout(() => this.form.patchValue({ permissions: null }), 100);\n    }\n\n    public get scope_list(): string[] {\n        return this.form.controls.scopes.value;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    create,\n    PlaceDomain,\n    PlaceUser,\n    query,\n    queryDomains,\n    queryUsers,\n    remove,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../../common/general';\nimport { notifyError, notifySuccess } from '../../common/notifications';\nimport { PlaceAPIKeyDetails } from './api-key-details.class';\nimport { APIKeyModalComponent } from './api-key-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class APIKeyService {\n    private _domain = new BehaviorSubject<PlaceDomain>(null);\n    private _last_key = new BehaviorSubject(null);\n    private _change = new BehaviorSubject<number>(0);\n\n    public readonly last_key = this._last_key.asObservable();\n    public readonly active_domain = this._domain.asObservable();\n\n    public readonly available_domains = queryDomains({ limit: 500 }).pipe(\n        map((_) => _.data),\n        shareReplay(1)\n    );\n\n    public readonly available_keys = combineLatest([\n        this._domain,\n        this._change,\n    ]).pipe(\n        switchMap(([domain]) => {\n            return domain\n                ? query({\n                      query_params: { authority_id: domain.id },\n                      fn: (d) => new PlaceAPIKeyDetails(d),\n                      path: 'api_keys',\n                  }).pipe(map((_) => _.data as PlaceAPIKeyDetails[]))\n                : of([] as PlaceAPIKeyDetails[]);\n        }),\n        shareReplay(1)\n    );\n\n    public readonly users = combineLatest([this._domain, this._change]).pipe(\n        switchMap(([domain]) => {\n            return domain\n                ? queryUsers({ authority_id: domain.id }).pipe(\n                      map((_) => _.data as PlaceUser[])\n                  )\n                : of([] as PlaceUser[]);\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {\n        if (sessionStorage.getItem('last_api_key')) {\n            this._last_key.next(\n                new PlaceAPIKeyDetails(\n                    JSON.parse(sessionStorage.getItem('last_api_key'))\n                )\n            );\n        }\n    }\n\n    public setDomain(domain: PlaceDomain) {\n        this._domain.next(domain);\n    }\n\n    public async newKey() {\n        const ref = this._dialog.open(APIKeyModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Creating new API key...';\n        const domain = this._domain.getValue();\n        const key = await create({\n            query_params: {},\n            fn: (d) => new PlaceAPIKeyDetails(d),\n            path: 'api_keys',\n            form_data: {\n                ...details.metadata,\n                authority_id: domain.id,\n            },\n        })\n            .toPromise()\n            .catch((_) => {\n                ref.close();\n                notifyError(_);\n                throw _;\n            });\n        this._last_key.next(key);\n        sessionStorage.setItem('last_api_key', JSON.stringify(key));\n        this._change.next(Date.now());\n        notifySuccess('Successfully created new API key.');\n        ref.close();\n    }\n\n    public async removeKey(key: PlaceAPIKeyDetails) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove API Key',\n                content: `Are you sure you wish to remove this API key?\n                    Removing this key may result in applications using this key to stop working.`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Removing API key...');\n        await remove({\n            id: key.id,\n            query_params: {},\n            path: 'api_keys',\n        }).toPromise();\n        details.close();\n        notifySuccess('Successfully removed API key.');\n    }\n}\n","import { Component } from '@angular/core';\nimport { APIKeyService } from './api-keys.service';\n\n@Component({\n    selector: 'admin-api-keys',\n    template: `\n        <div class=\"flex items-center space-x-2 m-4\">\n            <div class=\"flex flex-col space-y-1\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [ngModel]=\"domain | async\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list | async\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button\n                mat-button\n                class=\"mt-6\"\n                [disabled]=\"!(domain | async)\"\n                (click)=\"newKey()\"\n            >\n                Add API Key\n            </button>\n            <div\n                *ngIf=\"last_key | async\"\n                class=\"rounded shadow border border-gray-100 min-w-[24rem]\"\n            >\n                <div class=\"border-b px-2 pb-1 border-gray-200 !w-full\">\n                    <label class=\"p-0 m-0\"> Last API Key Details </label>\n                </div>\n                <div class=\"p-2\">\n                    <div class=\"text-sm\">\n                        {{ (last_key | async)?.name || 'Unanamed API Key' }}\n                    </div>\n                    <div class=\"select-all text-xs opacity-60\">\n                        {{ (last_key | async)?.x_api_key || 'No Key' }}\n                    </div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n        <div role=\"table\" *ngIf=\"(key_list | async)?.length; else load_state\">\n            <div table-head>\n                <div class=\"w-32 p-2\">Name</div>\n                <div class=\"flex-1 p-2\">Description</div>\n                <div class=\"w-32 p-2 truncate\">Scopes</div>\n                <div class=\"w-16 p-2\">Permissions</div>\n                <div class=\"w-16 p-2\">Created</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of key_list | async\">\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                    <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                    <div class=\"w-32 p-2 truncate\">\n                        <span\n                            class=\"m-1 px-2 py-1 bg-gray-400\"\n                            *ngFor=\"let scope of item.scopes\"\n                            >{{ scope }}</span\n                        >\n                    </div>\n                    <div class=\"w-16 p-2\">{{ item.permissions || 'None' }}</div>\n                    <div class=\"w-16 p-2\">\n                        {{ item.created_at | dateFrom }}\n                    </div>\n                    <div class=\"w-24 p-2 flex items-center\">\n                        <button mat-icon-button (click)=\"deleteBroker(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No API Keys</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AdminAPIKeysComponent {\n    public readonly domain = this._service.active_domain;\n    public readonly domain_list = this._service.available_domains;\n    public readonly key_list = this._service.available_keys;\n    public readonly last_key = this._service.last_key;\n\n    public readonly setDomain = (d) => this._service.setDomain(d);\n    public readonly newKey = () => this._service.newKey();\n\n    constructor(private _service: APIKeyService) {}\n}\n","import { Routes } from '@angular/router';\n\nimport { AuthorisedAdminGuard } from 'apps/backoffice/src/app/ui/guards/authorised-admin.guard';\n\nimport { PlaceComponent } from './engine.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        component: PlaceComponent,\n        canActivate: [AuthorisedAdminGuard],\n        children: [\n            { path: 'about', component: PlaceDetailsComponent },\n            { path: 'database', component: PlaceDatabaseDetailsComponent },\n            { path: 'clusters', component: PlaceClusterDetailsComponent },\n            { path: 'interfaces', component: AdminInterfacesComponent },\n            { path: 'brokers', component: AdminBrokersComponent },\n            { path: 'edge', component: PlaceEdgeComponent },\n            { path: 'extensions', component: PlaceExtensionsComponent },\n            { path: 'staff-api', component: PlaceStaffAPIComponent },\n            { path: 'schemas', component: AdminSchemasComponent },\n            { path: 'api-keys', component: AdminAPIKeysComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './engine.routes';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\nimport { PlaceComponent } from './engine.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { PlaceClusterItemComponent } from './cluster-details/cluster-item.component';\nimport { PlaceClusterTaskListComponent } from './cluster-details/cluster-task-list.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { EdgeModalComponent } from './edge-modal.component';\nimport { AdminClusterNodeComponent } from './cluster-details/cluster-node.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\nimport { APIKeyModalComponent } from './api-keys/api-key-modal.component';\nimport { MatChipsModule } from '@angular/material/chips';\n\n@NgModule({\n    declarations: [\n        PlaceComponent,\n        PlaceDatabaseDetailsComponent,\n        PlaceDetailsComponent,\n        PlaceClusterDetailsComponent,\n        PlaceClusterItemComponent,\n        PlaceClusterTaskListComponent,\n        PlaceExtensionsComponent,\n        AdminInterfacesComponent,\n        AdminBrokersComponent,\n        ExtensionModalComponent,\n        PlaceStaffAPIComponent,\n        StaffTenantModalComponent,\n        PlaceEdgeComponent,\n        EdgeModalComponent,\n        AdminClusterNodeComponent,\n        AdminSchemasComponent,\n        AdminAPIKeysComponent,\n        APIKeyModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppPlaceModule {}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map"],"sourceRoot":"webpack:///"}