{"version":3,"mappings":"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","names":["i0","PlaceComponent","BaseClass","constructor","_settings","_service","_users","super","this","extensions","extensionsForItem","active_item","dark_mode","updateTabList","tab_list","id","name","icon","class","concat","ngOnInit","title","selectors","PlaceDatabase","reindex","backfill","url","apiEndpoint","post","toPromise","t","factory","PlaceDatabaseDetailsComponent","_engine_service","reindexing","then","err","notifyError","JSON","stringify","response","message","backfilling","ctx","ctx_r2","PlaceDetailsComponent","_dialog","user","backoffice_version","P","backoffice_hash","backoffice_build","build","VERSION","format","loadApiDetails","loadPlatformDetails","changelog","log","open","ChangelogModalComponent","data","copy","content","copyToClipboard","notifyInfo","get","details","api_details","changelog_data","$localize","AdminClusterNodeComponent","used_memory","humanReadableByteCount","node","_a","memory_usage","total_memory","memory_total","memory_percentage","o","_b","generateCharts","ngOnChanges","changes","history","list","length","unshift","slice","Math","max","map","event","idx","x","y","value","points","PlaceClusterItemComponent","cluster","cluster_nodes","edge_nodes","cpu_history","ctx_r3","PlaceClusterTaskListComponent","EventEmitter","loadProcesses","interval","confirmKillProcess","process","ref","ConfirmModalComponent","Object","CONFIRM_METADATA","type","subscription","componentInstance","subscribe","reason","killing","loading","killProcess","close","terminateProcess","queryProcesses","include_status","process_list","PlaceClusterDetailsComponent","pipe","filter","active_cluster","tap","switchMap","queryClusters","resp","catchError","_","cluster_list","date","dayjs","valueOf","forEach","nodes","hostname","push","core_cpu","shift","clusters$","AdminInterfacesComponent","loadInterfaces","interfaces","listInterfaceRepositories","keys","ctx_r5","oxw","ctx_r7","AdminBrokersComponent","loadBrokers","newBroker","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","item","PlaceMQTTBroker","save","addBroker","editBroker","updateBroker","deleteBroker","openConfirmModal","removeBroker","catch","notifySuccess","brokers","queryBrokers","$event","ctx_r16","ctx_r17","ctx_r19","ExtensionModalComponent","_data","_hotkey","listen","submit","form","FormGroup","FormControl","Validators","i","_c","conditions","_d","addCondition","controls","removeCondition","condition","setValue","c","markAllAsTouched","valid","emit","metadata","MAT_DIALOG_DATA","ctx_r9","ctx_r12","ctx_r13","PlaceExtensionsComponent","domain_list","queryDomains","r","setDomain","domain","config","backoffice","extend","extension_list","sort","a","b","localeCompare","editExtension","parse","undefined","first","__awaiter","updateDomain","removeExtension","e","ext","updated","PlaceDomain","FIELD_NAME_MAPPING","issuer","signing_key","sub","client_id","client_secret","scopes","user_agent","StaffTenantModalComponent","_dialog_ref","tenant","office_form","credentials","m","l","_e","_f","google_form","issue","q","h","_g","_h","C","_j","W","z","_k","_l","ee","V","_m","_o","platform","conference_type","valueChanges","removeControl","addControl","disableClose","put","ctx_r10","PlaceStaffAPIComponent","BehaviorSubject","tenants","console","getValue","shareReplay","next","editTenant","afterClosed","removeTenant","system","del","statusText","EdgeModalComponent","edge","description","new_edge","updateEdge","addEdge","ctx_r8","ctx_r11","PlaceEdgeComponent","_change","queryEdges","of","retrieveEdgeToken","token","removeEdge","AdminSchemasComponent","_state","schemas","copySchema","active_schema","schema_copy","newSchema","schema","saveSchema","dirtyDate","requiredArgs","arguments","toDate","timestamp","getTime","floor","user_id","authority_id","permissions","created_at","getUnixTime","Date","updated_at","secret","x_api_key","ctx_r14","ctx_r18","ctx_r20","ctx_r21","APIKeyModalComponent","combineLatest","users","sys_admin","support","ENTER","COMMA","SPACE","setTimeout","_input_el","nativeElement","focus","s","setSearch","addChipItem","removeChipItem","patchValue","scope_list","APIKeyService","_last_key","asObservable","_domain","limit","query","query_params","fn","d","PlaceAPIKeyDetails","path","_search","debounceTime","queryUsers","newKey","Promise","race","key","create","form_data","now","removeKey","remove","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","body","appendChild","successful","currentFocus","activeElement","select","setSelectionRange","execCommand","destroy","Clipboard","document","pendingCopy","beginCopy","PendingCopy","ɵfac","DOCUMENT","ɵprov","ctx_r6","ROUTES","component","canActivate","AuthorisedAdminGuard","children","_clipboard","active_domain","available_domains","available_keys","last_key","k","copyKey","take","AdminAPIKeysComponent","ExtensionOutletComponent","redirectTo","AppPlaceModule","imports","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule","period","scheduler","async","isNumeric","schedule","Observable","subscriber","add","dispatch","counter","state"],"sources":["./apps/backoffice/src/app/engine/engine.component.ts","./apps/backoffice/src/app/common/database.service.ts","./apps/backoffice/src/app/engine/database-details.component.ts","./apps/backoffice/src/app/engine/details.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-node.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-item.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-task-list.component.ts","./apps/backoffice/src/app/engine/cluster-details/cluster-details.component.ts","./apps/backoffice/src/app/engine/interfaces.component.ts","./apps/backoffice/src/app/engine/brokers.component.ts","./apps/backoffice/src/app/engine/extension-modal/extension-modal.component.html","./apps/backoffice/src/app/engine/extension-modal/extension-modal.component.ts","./apps/backoffice/src/app/engine/extensions.component.ts","./apps/backoffice/src/app/engine/staff-tenant-modal.component.ts","./apps/backoffice/src/app/engine/staff-api.component.ts","./apps/backoffice/src/app/engine/edge-modal.component.ts","./apps/backoffice/src/app/engine/edge.component.ts","./apps/backoffice/src/app/engine/schemas.component.ts","./node_modules/date-fns/esm/getTime/index.js","./node_modules/date-fns/esm/getUnixTime/index.js","./apps/backoffice/src/app/engine/api-keys/api-key-details.class.ts","./apps/backoffice/src/app/engine/api-keys/api-key-modal.component.ts","./apps/backoffice/src/app/engine/api-keys/api-keys.service.ts","./node_modules/@angular/cdk/fesm2020/clipboard.mjs","./apps/backoffice/src/app/engine/api-keys/api-keys.component.ts","./apps/backoffice/src/app/engine/engine.routes.ts","./apps/backoffice/src/app/engine/engine.module.ts","./node_modules/rxjs/_esm2015/internal/observable/interval.js"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { ActiveItemService } from '../common/item.service';\nimport { SettingsService } from '../common/settings.service';\nimport { BackofficeUsersService } from '../users/users.service';\n\n@Component({\n    selector: 'app-engine',\n    template: `\n        <div\n            class=\"h-16 p-4 text-2xl bg-white border-b border-gray-400 border-opacity-30 shadow z-10 dark:text-white dark:bg-greyer\"\n        >\n            PlaceOS Admin\n        </div>\n        <div class=\"flex flex-1 z-0 h-1/2 dark:text-white\">\n            <div\n                class=\"relative w-64 h-full bg-white border-r border-gray-400 border-opacity-30 shadow z-10 dark:bg-greyer\"\n            >\n                <a\n                    *ngFor=\"let item of tab_list\"\n                    class=\"flex items-center space-x-2 my-2 rounded-l-2xl h-8 px-3 ml-3 hover:bg-primary hover:bg-opacity-25\"\n                    [routerLink]=\"['/admin', item.id]\"\n                    routerLinkActive=\"active\"\n                >\n                    <app-icon [icon]=\"item.icon\"></app-icon>\n                    <span>{{ item.name }}</span>\n                </a>\n            </div>\n            <div\n                class=\"relative flex-1 w-1/2 h-full z-0 bg-white px-4 dark:text-white dark:bg-grey\"\n            >\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n        <!-- <item-display class=\"w-full h-full\" name=\"Admin\" route=\"admin\" [has_change]=\"false\" [tabs]=\"tab_list\">\n        </item-display> -->\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n\n            .active {\n                background-color: #c2185b !important;\n                color: #fff;\n                margin-right: -1px;\n            }\n        `,\n    ],\n})\nexport class PlaceComponent extends BaseClass {\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, 'admin');\n    }\n\n    public get dark_mode() {\n        return this._users.dark_mode;\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info' } },\n            {\n                id: 'database',\n                name: 'Database',\n                icon: { class: 'backoffice-database' },\n            },\n            {\n                id: 'clusters',\n                name: 'Clusters',\n                icon: { class: 'backoffice-server' },\n            },\n            { id: 'edge', name: 'Edges', icon: { class: 'backoffice-server' } },\n            {\n                id: 'interfaces',\n                name: 'Interfaces',\n                icon: { class: 'backoffice-browser' },\n            },\n            {\n                id: 'brokers',\n                name: 'MQTT Brokers',\n                icon: { class: 'backoffice-server' },\n            },\n            {\n                id: 'staff-api',\n                name: 'Staff API',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'extensions',\n                name: 'Extensions',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'api-keys',\n                name: 'API Keys',\n                icon: { class: 'backoffice-key' },\n            },\n            {\n                id: 'schemas',\n                name: 'Custom Schemas',\n                icon: { class: 'backoffice-list' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _service: ActiveItemService,\n        private _users: BackofficeUsersService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.title = 'Admin';\n        this.updateTabList();\n    }\n}\n","import { post, apiEndpoint } from '@placeos/ts-client';\nimport { Injectable } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlaceDatabase extends BaseClass {\n    public reindex(backfill: boolean = true) {\n        const url = `${apiEndpoint()}/reindex${\n            backfill ? '?backfill=true' : ''\n        }`;\n        return post(url, null).toPromise();\n    }\n\n    public backfill() {\n        const url = `${apiEndpoint()}/backfill`;\n        return post(url, null).toPromise();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { PlaceDatabase } from 'apps/backoffice/src/app/common/database.service';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'app-database-details',\n    template: `\n        <mat-card>\n            <mat-card-content>\n                Re-index elasticsearch for the\n                <br />current state of the database\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button [disabled]=\"reindexing\" (click)=\"reindex()\">\n                    <ng-container *ngIf=\"!reindexing; else spinner\"\n                        >Re-index</ng-container\n                    >\n                </button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card>\n            <mat-card-content>\n                Backfill elasticsearch with the<br />\n                current state of the database\n            </mat-card-content>\n            <mat-card-actions>\n                <button\n                    mat-button\n                    [disabled]=\"backfilling\"\n                    (click)=\"backfill()\"\n                >\n                    <ng-container *ngIf=\"!backfilling; else spinner\"\n                        >Backfill</ng-container\n                    >\n                </button>\n            </mat-card-actions>\n        </mat-card>\n        <ng-template #spinner>\n            <div class=\"flex justify-center w-full my-1\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            button {\n                min-width: 10em;\n                margin: 0.25em;\n            }\n\n            mat-card {\n                margin: 0.5em;\n                text-align: center;\n            }\n        `,\n    ],\n})\nexport class PlaceDatabaseDetailsComponent {\n    /** Whether backend is reindexing the database */\n    public reindexing: boolean;\n    /** Whether backend is reindexing the database */\n    public backfilling: boolean;\n\n    constructor(private _engine_service: PlaceDatabase) {}\n\n    public reindex() {\n        this.reindexing = true;\n        this._engine_service.reindex().then(\n            () => (this.reindexing = false),\n            (err) => {\n                this.reindexing = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    public backfill() {\n        this.backfilling = true;\n        this._engine_service.backfill().then(\n            () => (this.backfilling = false),\n            (err) => {\n                this.backfilling = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { get, apiEndpoint } from '@placeos/ts-client';\n\nimport { VERSION } from '../../environments/version';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ChangelogModalComponent,\n    ChangelogModalData,\n} from 'apps/backoffice/src/app/overlays/changelog-modal/changelog-modal.component';\nimport { BackofficeUsersService } from 'apps/backoffice/src/app/users/users.service';\nimport {\n    notifyError,\n    notifyInfo,\n} from 'apps/backoffice/src/app/common/notifications';\n\nimport * as dayjs from 'dayjs';\nimport { copyToClipboard } from '../common/general';\n\nexport interface PlaceServiceDetails {\n    /** Name of the service */\n    service: string;\n    /** Commit hash of the service */\n    commit: string;\n    /** Current version number of the service */\n    version: string;\n    /** Build time of the active version of the service */\n    build_time: string;\n    /** Version of the backend service platform */\n    platform_version: string;\n}\n\n@Component({\n    selector: 'app-engine-details',\n    template: `\n        <h3 class=\"text-lg font-medium\" i18n=\"@@backoffice\">Backoffice</h3>\n        <section class=\"space-y-2 mb-4 flex flex-col px-2\">\n            <div class=\"flex items-center\">\n                <label for=\"version\" class=\"w-24\" i18n=\"@@version\">Version:</label>\n                <div\n                    name=\"version\"\n                    class=\"bg-gray-300/60 rounded p-1 text-xs mono flex items-center\"\n                    (click)=\"copy('version', backoffice_version)\"\n                >\n                    {{ backoffice_version }}\n                </div>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"hash\" class=\"w-24\" i18n=\"@@commitHash\">Commit Hash:</label>\n                <div\n                    name=\"hash\"\n                    class=\"bg-gray-300/60 rounded p-1 text-xs mono flex items-center\"\n                    (click)=\"copy('hash', backoffice_hash)\"\n                >\n                    {{ backoffice_hash }}\n                </div>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"build-time\" class=\"w-24\" i18n=\"@@buildTime\">Build:</label>\n                <div\n                    name=\"build-time\" \n                    class=\"text-sm\"\n                    (click)=\"copy('build time', backoffice_build)\"\n                >\n                    {{ backoffice_build }}\n                </div>\n            </div>\n        </section>\n        <h3 class=\"text-lg font-medium flex items-center\" i18n=\"@@apiHeader\">\n            API\n            <button *ngIf=\"changelog_data\" class=\"p-2 text-xs underline\" (click)=\"changelog(changelog_data)\">View Changelog</button>\n        </h3>\n        <section class=\"flex flex-wrap py-2\">\n            <div\n                class=\"bg-white dark:bg-[#424242] rounded shadow m-2 min-w-[40%] flex-1 overflow-hidden\"\n                *ngFor=\"let api of api_details\"\n            >\n                <h3 class=\"w-full px-4 py-2 mb-1 border-b border-gray-200 dark:border-white/20\">\n                    {{ api.service }}\n                </h3>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\">\n                    <label class=\"w-24\">Commit Hash:</label>\n                    <div class=\"bg-gray-300/60 rounded p-1 text-xs mono\">\n                        {{ api.commit }}\n                    </div>\n                </div>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\">\n                    <label class=\"w-24\">Version:</label>\n                    <div class=\"bg-gray-300/60 rounded p-1 text-xs mono\">\n                        {{ api.version }}\n                    </div>\n                </div>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\">\n                    <label class=\"w-24\">Build time:</label>\n                    <div class=\"text-sm\">{{ api.build_time }}</div>\n                </div>\n                <div class=\"flex items-center px-4 py-1 hover:bg-gray-400/20 mb-1\">\n                    <label class=\"w-24\">Platform:</label>\n                    <div class=\"bg-gray-300/60 rounded p-1 text-xs mono\">\n                        {{ api.platform_version }}\n                    </div>\n                </div>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class PlaceDetailsComponent extends BaseClass implements OnInit {\n    /** Current details about the API */\n    public api_details: PlaceServiceDetails[];\n    public changelog_data: string = '';\n\n    public get user() {\n        return this._users.user;\n    }\n\n    public get backoffice_version() {\n        return VERSION?.tag || '';\n    }\n\n    public get backoffice_hash() {\n        return VERSION?.hash || '';\n    }\n\n    public get backoffice_build() {\n        const build = dayjs(VERSION.time);\n        return build.format('DD MMM YYYY [at] h:mma');\n    }\n\n    constructor(\n        private _users: BackofficeUsersService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadApiDetails();\n        this.loadPlatformDetails();\n    }\n\n    public changelog(log: string) {\n        this._dialog.open<ChangelogModalComponent, ChangelogModalData>(\n            ChangelogModalComponent,\n            {\n                data: { changelog: log },\n            }\n        );\n    }\n\n    public copy(name: string, content: string) {\n        copyToClipboard(content);\n        notifyInfo(`Copied ${name} to clipboard`);\n    }\n\n    public loadApiDetails(): void {\n        get(`${apiEndpoint()}/cluster/versions`)\n            .toPromise()\n            .then(\n                (details) => (this.api_details = details as any),\n                (err) =>\n                    notifyError(\n                        `Error loading API details. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n\n    public loadPlatformDetails(): void {\n        get(`${apiEndpoint()}/platform`)\n            .toPromise()\n            .then(\n                (details) => this.changelog_data = details.changelog,\n                (err) =>\n                    notifyError(\n                        `Error loading API details. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { humanReadableByteCount } from '@placeos/ts-client';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { Point } from '../../common/types';\n\ninterface PlaceClusterRunCounts {\n    modules: number;\n    drivers: number;\n}\n\nexport interface PlaceClusterNode {\n    hostname: string;\n    cpu_count: number;\n    core_cpu: number;\n    total_cpu: number;\n    memory_total: number;\n    memory_usage: number;\n    core_memory: number;\n    run_count?: PlaceClusterRunCounts;\n}\n\nexport interface PlaceClusterUsageStamp {\n    id: number;\n    value: number;\n}\n\n@Component({\n    selector: 'admin-cluster-node',\n    template: `\n        <h4>{{ node?.hostname }}</h4>\n        <div class=\"mb-2 h-40 w-64\">\n            <div basic-line-graph [points]=\"points\"></div>\n        </div>\n        <div class=\"memory-utilisation\">\n            <div class=\"flex items-center space-x-2 p-2\">\n                <label i18n=\"@@cluserMemoryUsed\">Memory Used</label>\n                <div class=\"value\">\n                    {{ used_memory }} / {{ total_memory }} ({{\n                        memory_percentage.toFixed(2)\n                    }}%)\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 bg-black bg-opacity-5 rounded p-2\"\n            >\n                <label i18n=\"@@clusterCpuUsage\">CPU Usage</label>\n                <div class=\"value\">{{ node?.total_cpu }}%</div>\n            </div>\n        </div>\n    `,\n    styles: [],\n})\nexport class AdminClusterNodeComponent implements OnChanges, OnInit {\n    /** Node to display on the view */\n    @Input() public node: PlaceClusterNode;\n    /** Historical data for node */\n    @Input() public history: PlaceClusterUsageStamp[];\n    /** Store for the chart data object */\n    // private _chart: Chart;\n    /**  */\n    public points: Point[] = [];\n\n    public get used_memory() {\n        return humanReadableByteCount((this.node?.memory_usage || 0) * 1024);\n    }\n\n    public get total_memory() {\n        return humanReadableByteCount((this.node?.memory_total || 0) * 1024);\n    }\n\n    public get memory_percentage() {\n        return (\n            ((this.node?.memory_usage || 0) / (this.node?.memory_total || 1)) *\n            100\n        );\n    }\n\n    @ViewChild('chart', { static: true })\n    public _chart_el: ElementRef<HTMLCanvasElement>;\n\n    public ngOnInit() {\n        this.generateCharts();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.history && this.history) {\n            this.generateCharts();\n        }\n    }\n\n    public generateCharts(): void {\n        const list = [...this.history] || [];\n        while (list.length < 12) {\n            list.unshift({} as any);\n        }\n        const data = list\n            .slice(Math.max(0, list.length - 12))\n            .map((event, idx) => ({\n                x: idx,\n                y: event.value || 0,\n            }));\n        this.points = [...data];\n    }\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { PlaceCluster } from '@placeos/ts-client';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    PlaceClusterNode,\n    PlaceClusterUsageStamp,\n} from './cluster-node.component';\n\n@Component({\n    selector: 'engine-cluster-item',\n    template: `\n        <ng-container *ngFor=\"let node of cluster_nodes\">\n            <admin-cluster-node\n                [node]=\"node\"\n                [history]=\"cpu_history[node.hostname] || []\"\n            ></admin-cluster-node>\n        </ng-container>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterItemComponent implements OnChanges {\n    /** Cluster to display details for */\n    @Input() public cluster: PlaceCluster;\n    /** List of historical data for cluster's CPU usage */\n    @Input() public cpu_history: HashMap<PlaceClusterUsageStamp[]> = {};\n    /** List of nodes contained by the cluster */\n    public cluster_nodes: PlaceClusterNode[];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.cluster && this.cluster) {\n            this.cluster_nodes = [this.cluster, ...this.cluster.edge_nodes];\n            this.cpu_history = this.cpu_history || {};\n        }\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceCluster,\n    PlaceProcess,\n    terminateProcess,\n    queryProcesses,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'engine-cluster-task-list',\n    template: `\n        <div class=\"flex items-center mb-4\">\n            <button mat-icon-button (click)=\"close.emit()\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'backoffice-arrow-left' }\"\n                ></app-icon>\n            </button>\n            <h3 class=\"text-lg font-medium\" i18n=\"@@clusterHeader\">\n                Cluster - {{ cluster?.hostname }}\n            </h3>\n        </div>\n        <div role=\"table\" class=\"h-1/2 flex-1\">\n            <div table-head>\n                <div class=\"flex-1 p-2\">Name</div>\n                <div class=\"w-24 p-2\">CPU %</div>\n                <div class=\"w-24 p-2\">Memory</div>\n                <div class=\"w-24 p-2\">Instances</div>\n                <div class=\"w-12 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let element of process_list\">\n                    <div\n                        class=\"flex-1 p-2\"\n                        [innerHTML]=\"element.id | driverFormat\"\n                    ></div>\n                    <div class=\"w-24 p-2\">\n                        {{ element.cpu_usage.toFixed(2) }}%\n                    </div>\n                    <div class=\"w-24 p-2\">{{ element.used_memory }}</div>\n                    <div class=\"w-24 p-2\">{{ element.module_instances }}</div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            (click)=\"confirmKillProcess(element)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div\n            class=\"flex flex-col items-center p-8\"\n            *ngIf=\"!process_list || !process_list.length\"\n        >\n            <p i18n=\"@@processTableEmpty\">No tasks running on cluster</p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterTaskListComponent extends BaseClass implements OnInit {\n    /** Cluster to display tasks details for */\n    @Input() public cluster: PlaceCluster;\n    /** Emitter for close events */\n    @Output() public close = new EventEmitter<void>();\n    /** List of processes running in the cluster */\n    public process_list: PlaceProcess[] = [];\n    /** Whether the task list is updating */\n    public loading: boolean;\n    /** ID of the process being killed */\n    public killing: string;\n\n    public column_list: string[] = [\n        'id',\n        'cpu_usage',\n        'memory_usage',\n        'module_instances',\n        'running',\n    ];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadProcesses();\n        this.interval('load_tasks', () => this.loadProcesses(), 2000);\n    }\n\n    public confirmKillProcess(process: PlaceProcess): void {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want kill the process for \"${process.id}\"?</p>\n                    <p>The process will be terminated <strong>immediately</strong>.\n                    The process may be restarted after a short while.</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm_kill',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.killing = process.id;\n                    ref.componentInstance.loading = 'Processing request...';\n                    this.killProcess(process).then(\n                        () => {\n                            this.killing = null;\n                            ref.close();\n                        },\n                        (err) => {\n                            ref.componentInstance.loading = null;\n                            this.killing = null;\n                            notifyError(\n                                `Error killing process. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            );\n                            ref.close();\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public killProcess(process: PlaceProcess) {\n        return terminateProcess(this.cluster.id, process.id).toPromise();\n    }\n\n    private loadProcesses(): void {\n        this.loading = true;\n        queryProcesses(this.cluster.id, {\n            include_status: true,\n        } as any).subscribe((list) => {\n            this.process_list = list || [];\n            this.loading = false;\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { map, catchError, switchMap, tap, filter } from 'rxjs/operators';\n\nimport { PlaceCluster, queryClusters } from '@placeos/ts-client';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport * as dayjs from 'dayjs';\nimport { PlaceClusterUsageStamp } from './cluster-node.component';\nimport { interval } from 'rxjs';\n\n@Component({\n    selector: 'engine-cluster-details',\n    template: `\n        <ng-container\n            *ngIf=\"cluster_list && cluster_list.length; else empty_state\"\n        >\n            <ng-container *ngIf=\"!active_cluster; else process_state\">\n                <ng-container *ngFor=\"let cluster of cluster_list\">\n                    <mat-card class=\"m-2 text-center\">\n                        <mat-card-header>\n                            <mat-card-title clas=\"capitalize\"\n                                >{{ cluster.hostname || 'Undefined Cluster' }}\n                            </mat-card-title>\n                        </mat-card-header>\n                        <mat-card-content>\n                            <engine-cluster-item\n                                [cluster]=\"cluster\"\n                                [cpu_history]=\"cpu_history[cluster.id] || []\"\n                            ></engine-cluster-item>\n                        </mat-card-content>\n                        <mat-card-actions>\n                            <button\n                                mat-button\n                                (click)=\"active_cluster = cluster\"\n                                i18n=\"@@viewClusterProcesses\"\n                            >\n                                View Processes\n                            </button>\n                        </mat-card-actions>\n                    </mat-card>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center p-8 space-y-2\"\n            >\n                <app-icon\n                    class=\"text-3xl\"\n                    [icon]=\"{ class: 'backoffice-cross' }\"\n                ></app-icon>\n                <div class=\"text\" i18n=\"@@clusterListEmpty\">\n                    No Cluster details to show\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #process_state>\n            <engine-cluster-task-list\n                [cluster]=\"active_cluster\"\n                (close)=\"active_cluster = null\"\n            ></engine-cluster-task-list>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterDetailsComponent extends BaseClass implements OnInit {\n    /** List of available clusters on this instance of engine */\n    public cluster_list: PlaceCluster[] = [];\n    /** Map of clusters to CPU usage history */\n    public cpu_history: HashMap<HashMap<PlaceClusterUsageStamp[]>> = {};\n    /** Active cluster to show details for */\n    public active_cluster: PlaceCluster;\n    /** Whether cluster details are being loaded */\n    public loading: boolean;\n\n    public readonly clusters$ = interval(2000).pipe(\n        filter(() => !this.active_cluster),\n        tap(() => (this.loading = true)),\n        switchMap(() => queryClusters({ include_status: true } as any)),\n        map((resp) => resp.data),\n        catchError((_) => []),\n        map((list) => {\n            this.cluster_list = list || [];\n            const date = dayjs().valueOf();\n            this.cluster_list.forEach((cluster) => {\n                if (!this.cpu_history[cluster.id]) {\n                    this.cpu_history[cluster.id] = {};\n                }\n                const nodes = [cluster, ...cluster.edge_nodes] as any;\n                for (const node of nodes) {\n                    if (!this.cpu_history[cluster.id][node.hostname]) {\n                        this.cpu_history[cluster.id][node.hostname] = [];\n                    }\n                    this.cpu_history[cluster.id][node.hostname].push({\n                        id: date,\n                        value: node.core_cpu,\n                    });\n                    if (\n                        this.cpu_history[cluster.id][node.hostname].length > 120\n                    ) {\n                        this.cpu_history[cluster.id][node.hostname].shift();\n                    }\n                }\n            });\n        }),\n        tap(() => (this.loading = false))\n    );\n\n    public ngOnInit(): void {\n        this.subscription('load_cluster', this.clusters$.subscribe());\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { listInterfaceRepositories } from '@placeos/ts-client';\n\nimport { Identity } from 'apps/backoffice/src/app/common/types';\n\n@Component({\n    selector: 'app-interfaces',\n    template: `\n        <div\n            role=\"table\"\n            *ngIf=\"interfaces && interfaces.length; else load_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Repository</div>\n                <div class=\"w-32 p-2\">Commit Hash</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of interfaces\">\n                    <div class=\"flex-1 p-2\">{{ item.id }}</div>\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <app-icon class=\"mb-4\" className=\"backoffice-cross\"></app-icon>\n                <p>No interfaces</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AdminInterfacesComponent implements OnInit {\n    /** List of interfaces */\n    public interfaces: Identity[] = [];\n\n    ngOnInit() {\n        this.loadInterfaces();\n    }\n\n    private async loadInterfaces() {\n        const interfaces = await listInterfaceRepositories().toPromise();\n        this.interfaces = Object.keys(interfaces).map((id) => ({\n            id,\n            name: interfaces[id],\n        }));\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {\n    PlaceMQTTBroker,\n    updateBroker,\n    addBroker,\n    queryBrokers,\n    removeBroker,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ItemCreateUpdateModalComponent } from 'apps/backoffice/src/app/overlays/item-modal/item-modal.component';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { openConfirmModal } from 'apps/backoffice/src/app/common/general';\n\n@Component({\n    selector: 'app-brokers',\n    template: `\n        <button mat-button class=\"my-4\" (click)=\"newBroker()\">\n            <div class=\"flex items-center\">\n                <app-icon className=\"backoffice-plus\"></app-icon>\n                <div class=\"text\">Add Broker</div>\n            </div>\n        </button>\n        <div class=\"overflow-auto\">\n            <div\n                role=\"table\"\n                *ngIf=\"brokers && brokers.length; else load_state\"\n                class=\"min-w-[52rem]\"\n            >\n                <div table-head>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"w-24 p-2\">Auth Type</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-32 p-2 truncate\">Host</div>\n                    <div class=\"w-16 p-2\">Port</div>\n                    <div class=\"w-16 p-2\">TLS</div>\n                    <div class=\"w-32 p-2\">Filters</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of brokers\">\n                        <div class=\"w-32 p-2\">{{ item.name }}</div>\n                        <div class=\"w-24 p-2\">\n                            { item.auth_type, select, 0 { Certificate }, 2 {\n                            User Password }, other { No Auth }}\n                        </div>\n                        <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.host }}</div>\n                        <div class=\"w-16 p-2\">{{ item.port }}</div>\n                        <div class=\"w-16 p-2\">\n                            { item.tls, select, true { Yes }, false { No } }\n                        </div>\n                        <div class=\"w-32 p-2\">{{ item.filters | json }}</div>\n                        <div class=\"w-24 p-2 flex items-center\">\n                            <button mat-icon-button (click)=\"editBroker(item)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"deleteBroker(item)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No Brokers</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n            }\n        `,\n    ],\n})\nexport class AdminBrokersComponent extends BaseClass implements OnInit {\n    public brokers: PlaceMQTTBroker[] = [];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loadBrokers();\n    }\n\n    public newBroker(): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new PlaceMQTTBroker(),\n                name: 'Broker',\n                save: (item) => addBroker(item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public editBroker(item: PlaceMQTTBroker): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Broker',\n                save: (item) => updateBroker(item.id, item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public async deleteBroker(item: PlaceMQTTBroker): Promise<void> {\n        if (item) {\n            const details = await openConfirmModal(\n                {\n                    title: `Delete MQTT Broker`,\n                    content: `<p>Are you sure you want delete this boker?</p><p>The broker will be deleted <strong>immediately.</strong></p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n                this._dialog\n            );\n            if (!details) return;\n            details.loading('Deleting broker...');\n            const err = await removeBroker(item.id)\n                .toPromise()\n                .catch((_) => _);\n            details.close();\n            if (err)\n                return notifyError(\n                    `Error deleting broker. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            notifySuccess(`Successfully deleted broker \"${item.name}\".`);\n            this.loadBrokers();\n        }\n    }\n\n    private async loadBrokers() {\n        const brokers = await queryBrokers()\n            .pipe(map((resp) => resp.data))\n            .toPromise();\n        this.brokers = brokers;\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ item ? 'Edit' : 'New' }} Extension</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"form && !loading; else load_state\" [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\">\n                <label for=\"type\" i18n=\"@@typeLabel\">Type<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select formControlName=\"type\">\n                        <mat-option *ngFor=\"let type of available_types\" [value]=\"type\">\n                            <span class=\"capitalize\">{{ type }}</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"name\" i18n=\"@@nameLabel\">Name<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Extension Display Name\"\n                        i18n-placeholder=\"@@extensionNamePlaceholder\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error i18n=\"@@nameError\">A valid name is required</mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\">\n            <label for=\"url\" i18n=\"@@urlLabel\">URL<span>*</span>: </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"url\"\n                    placeholder=\"Extension URL\"\n                    i18n-placeholder=\"@@extensionUrlPlaceholder\"\n                    formControlName=\"url\"\n                />\n                <mat-error i18n=\"@@urlError\">A valid URL is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"w-full\">\n            <label *ngIf=\"form.controls.conditions.value?.length\">Conditions</label>\n            <div class=\"fieldset\" *ngFor=\"let condition of form.controls.conditions.value\">\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"url\"\n                            [(ngModel)]=\"condition[0]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Field\"\n                            i18n-placeholder=\"@@conditionPlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [(ngModel)]=\"condition[1]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Operation\"\n                        >\n                            <mat-option *ngFor=\"let type of condition_ops\" [value]=\"type\">\n                                <span class=\"capitalize\">{{ type }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"value\"\n                            [disabled]=\"condition[1] === 'truthy' || condition[1] === 'falsy'\"\n                            [(ngModel)]=\"condition[2]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Value\"\n                            i18n-placeholder=\"@@conditionValuePlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button mat-icon-button (click)=\"removeCondition(condition)\">\n                    <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                </button>\n            </div>\n            <button mat-button class=\"w-full\" (click)=\"addCondition()\">Add Condition</button>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (click)=\"submit()\">{{ item ? 'Save' : 'Add' }} [S]</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HotkeysService } from 'apps/backoffice/src/app/common/hotkeys.service';\nimport { DialogEvent } from 'apps/backoffice/src/app/common/types';\n\nimport { BackofficeExtension } from '../extensions.component';\n\n@Component({\n    selector: 'extension-modal',\n    templateUrl: './extension-modal.component.html',\n    styleUrls: ['./extension-modal.component.scss'],\n})\nexport class ExtensionModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly available_types = [\n        'admin',\n        'systems',\n        'modules',\n        'zones',\n        'drivers',\n        'repositories',\n        'triggers',\n        'users',\n        'domains',\n    ];\n    public readonly condition_ops = ['includes', 'equals', 'truthy', 'falsy'];\n    public readonly item = this._data.item;\n    public loading = false;\n    public form: FormGroup;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { item: BackofficeExtension },\n        private _hotkey: HotkeysService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'save',\n            this._hotkey.listen(['KeyS'], () => this.submit())\n        );\n        this.form = new FormGroup({\n            type: new FormControl(this.item?.type || 'systems', [\n                Validators.required,\n            ]),\n            name: new FormControl(this.item?.name || '', [Validators.required]),\n            url: new FormControl(this.item?.url || '', [Validators.required]),\n            conditions: new FormControl(this.item?.conditions || []),\n        });\n    }\n\n    public addCondition() {\n        const conditions = this.form.controls.conditions.value;\n        conditions.push(['', '', '']);\n    }\n\n    public removeCondition(condition: [string, string, any]) {\n        this.form.controls.conditions.setValue(\n            this.form.controls.conditions.value.filter((c) => c !== condition)\n        );\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        const value = this.form.value;\n        value.conditions = value.conditions.filter((c) => c[0] && c[1]);\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceDomain, queryDomains, updateDomain } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { ApplicationIcon } from 'apps/backoffice/src/app/common/types';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\n\nexport interface BackofficeExtension {\n    /** Section of backoffice to extend */\n    type:\n        | 'admin'\n        | 'systems'\n        | 'modules'\n        | 'zones'\n        | 'drivers'\n        | 'repositories'\n        | 'triggers'\n        | 'users'\n        | 'domains';\n    /** Display name of the extension */\n    name: string;\n    /** URL to the application to embed */\n    url: string;\n    /** Conditions for showing the extension */\n    conditions: [string, string, any][];\n    /** Icon to display next to the name */\n    icon: ApplicationIcon;\n}\n\n@Component({\n    selector: '[app-extensions]',\n    template: `\n        <h2 class=\"text-lg font-medium mb-4\">Backoffice extensions</h2>\n        <div *ngIf=\"!loading; else load_state\">\n            <div class=\"flex items-center space-x-2 mb-4\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"domain\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <button mat-button (click)=\"editExtension()\">\n                    Add Extension\n                </button>\n            </div>\n            <div class=\"bg-info my-4 p-4 flex items-center rounded shadow space-x-4 text-sm text-white\">\n                <p><strong>Note:</strong> Backoffice requires a full page refresh for extension changes and additions to apply</p>\n            </div>\n            <div role=\"table\">\n                <div table-head>\n                    <div class=\"w-24 p-2\">Type</div>\n                    <div class=\"w-40 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">URL</div>\n                    <div class=\"w-28 p-2\">Conditions</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let extension of extension_list\">\n                        <div class=\"w-24 p-2 capitalize\">\n                            {{ extension.type }}\n                        </div>\n                        <div class=\"w-40 p-2\">{{ extension.name }}</div>\n                        <div class=\"flex-1 p-2\">{{ extension.url }}</div>\n                        <div class=\"w-28 p-2\">\n                            {{ extension.conditions.length }}\n                        </div>\n                        <div class=\"w-24 flex items-center justify-center\">\n                            <button\n                                mat-icon-button\n                                (click)=\"editExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"removeExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                </div>\n                <div class=\"text\">{{ loading }}</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceExtensionsComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public domain: PlaceDomain;\n    /** List of extension available on the current domain */\n    public extension_list: BackofficeExtension[] = [];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.setDomain(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public setDomain(domain: PlaceDomain) {\n        this.domain = domain;\n        const config = this.domain.config?.backoffice?.extend || {};\n        const extensions: BackofficeExtension[] = [];\n        for (const type in config) {\n            if (!config[type]) {\n                continue;\n            }\n            for (const name in config[type]) {\n                if (!config[type][name]) {\n                    continue;\n                }\n                extensions.push({\n                    ...config[type][name],\n                    name,\n                    type,\n                });\n            }\n        }\n        this.extension_list = extensions;\n        this.extension_list.sort(\n            (a, b) =>\n                a.type.localeCompare(b.type) || a.name.localeCompare(b.name)\n        );\n    }\n\n    public editExtension(item?: BackofficeExtension) {\n        const ref = this._dialog.open(ExtensionModalComponent, {\n            data: { item: item ? JSON.parse(JSON.stringify(item)) : undefined },\n        });\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (event) => {\n                ref.componentInstance.loading = true;\n                if (item) {\n                    this.extension_list = this.extension_list.filter(\n                        (i) => i !== item\n                    );\n                }\n                this.extension_list.push(event.metadata);\n                await this.updateDomain();\n                ref.componentInstance.loading = false;\n                ref.close();\n            });\n    }\n\n    public async removeExtension(item: BackofficeExtension) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                data: {\n                    title: 'Remove extension',\n                    content: `Are you sure you want to remove the extension \"${item.name}\" from ${item.type}?`,\n                    icon: { class: 'backoffice-trash' },\n                },\n            }\n        );\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (_) => {\n                ref.componentInstance.loading = 'Removing extension...';\n                this.extension_list = this.extension_list.filter(\n                    (i) => i !== item\n                );\n                await this.updateDomain().catch((e) =>\n                    notifyError(`Error removing extension: ${e}`)\n                );\n                ref.componentInstance.loading = '';\n                ref.close();\n            });\n    }\n\n    public async updateDomain() {\n        const extensions = {};\n        for (const ext of this.extension_list) {\n            if (!extensions[ext.type]) {\n                extensions[ext.type] = {};\n            }\n            const data = { ...ext };\n            delete data.type;\n            delete data.name;\n            extensions[ext.type][ext.name] = data;\n        }\n        const updated = new PlaceDomain({\n            ...this.domain,\n            config: {\n                ...this.domain.config,\n                backoffice: {\n                    ...(this.domain.config.backoffice || {}),\n                    extend: extensions,\n                },\n            },\n        });\n        const domain = await updateDomain(this.domain.id, updated).toPromise();\n        this.setDomain(domain);\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { PlaceDomain, post, put } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent, HashMap } from '../common/types';\nimport { PlaceTenant } from './staff-api.component';\n\nconst FIELD_NAME_MAPPING: HashMap<string> = {\n    issuer: 'Service Account Email',\n    signing_key: 'Private Key',\n    sub: 'Service User',\n    client_id: 'Client ID',\n    client_secret: 'Client Secret',\n    domain: 'Domain',\n    scopes: 'Scopes',\n    user_agent: 'User Agent',\n};\n\nexport interface StaffTenantModalData {\n    tenant?: PlaceTenant;\n    domain?: PlaceDomain;\n}\n\n@Component({\n    selector: 'staff-tenant-modal',\n    template: `\n        <header>\n            <h3>{{ tenant ? 'Edit' : 'New' }} Tenant</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main [formGroup]=\"form\" *ngIf=\"!loading; else load_state\" class=\"overflow-auto\">\n            <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label>Name<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input matInput formControlName=\"name\" placeholder=\"Tenant Name\" />\n                        <mat-error>A tenant name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label>Conference Type:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input matInput formControlName=\"conference_type\" placeholder=\"Conference Type\" />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label>Platform<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"platform\">\n                            <mat-option value=\"google\">Google</mat-option>\n                            <mat-option value=\"office365\">Office365</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <form *ngIf=\"credentials\" [formGroup]=\"credentials\">\n                <div class=\"flex flex-col\" *ngFor=\"let item of credentials.controls | keyvalue\">\n                    <label class=\"capitalize\"\n                        >{{ name_map[item.key] || item.key }}<span>*</span>:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <ng-container [ngSwitch]=\"item.key\">\n                            <input\n                                matInput\n                                *ngSwitchDefault\n                                [formControlName]=\"item.key\"\n                                [placeholder]=\"name_map[item.key] || item.key\"\n                            />\n                            <textarea\n                                matInput\n                                *ngSwitchCase=\"'signing_key'\"\n                                [formControlName]=\"item.key\"\n                                [placeholder]=\"name_map[item.key] || item.key\"\n                            ></textarea>\n                        </ng-container>\n                        <mat-error>A {{ item.key }} is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </form>\n        </main>\n        <footer *ngIf=\"!loading\" class=\"p-2 border-t border-gray-200 flex justify-center\">\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving staff API tenant...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class StaffTenantModalComponent implements OnInit {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public form: FormGroup;\n\n    public loading = false;\n\n    public readonly name_map = FIELD_NAME_MAPPING;\n\n    public get office_form() {\n        return new FormGroup({\n            tenant: new FormControl(this.tenant?.credentials?.tenant || '', [Validators.required]),\n            client_id: new FormControl(this.tenant?.credentials?.client_id || '', [\n                Validators.required,\n            ]),\n            client_secret: new FormControl(this.tenant?.credentials?.client_secret || '', [\n                Validators.required,\n            ]),\n        });\n    }\n\n    public get google_form() {\n        return new FormGroup({\n            issuer: new FormControl(this.tenant?.credentials?.issue || '', [Validators.required]),\n            signing_key: new FormControl(this.tenant?.credentials?.signing_key || '', [\n                Validators.required,\n            ]),\n            scopes: new FormControl(this.tenant?.credentials?.scopes || '', [Validators.required]),\n            domain: new FormControl(\n                this.tenant?.credentials?.domain || this._data.domain?.domain || '',\n                [Validators.required]\n            ),\n            sub: new FormControl(this.tenant?.credentials?.sub || '', [Validators.required]),\n            user_agent: new FormControl(this.tenant?.credentials?.user_agent || 'PlaceOS', [\n                Validators.required,\n            ]),\n        });\n    }\n\n    public get credentials(): FormGroup {\n        return this.form?.controls.credentials as any;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<StaffTenantModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            domain: new FormControl(this.domain?.domain || this.tenant.domain || 'localhost'),\n            name: new FormControl(this.tenant?.name || '', [Validators.required]),\n            platform: new FormControl(this.tenant?.platform || 'google', [Validators.required]),\n            conference_type: new FormControl(this.tenant?.conference_type || ''),\n            credentials:\n                this.tenant?.platform === 'office365' ? this.office_form : this.google_form,\n        });\n        this.form.controls.platform.valueChanges.subscribe((platform) => {\n            this.form.removeControl('credentials');\n            this.form.addControl(\n                'credentials',\n                platform === 'office365' ? this.office_form : this.google_form\n            );\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const call = this.tenant?.id\n            ? put(`/api/staff/v1/tenants/${this.tenant.id}`, {\n                  ...(this.tenant || {}),\n                  ...this.form.value,\n              })\n            : post('/api/staff/v1/tenants', { ...(this.tenant || {}), ...this.form.value });\n        const tenant = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!tenant) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { del, get, PlaceDomain, queryDomains } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\n\nexport interface PlaceTenant {\n    id: string;\n    name: string;\n    domain: string;\n    platform: string;\n    conference_type?: string;\n    credentials?: HashMap<string>\n}\n\n@Component({\n    selector: 'staff-api',\n    template: `\n        <div class=\"flex items-center space-x-2 mb-4\">\n            <label for=\"type\">Domain: </label>\n            <mat-form-field class=\"h-12\" appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [ngModel]=\"domain | async\"\n                    (ngModelChange)=\"domain.next($event)\"\n                    placeholder=\"Select Domain...\"\n                >\n                    <mat-option *ngFor=\"let domain of domain_list\" [value]=\"domain\">\n                        {{ domain.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button mat-button (click)=\"editTenant()\">Add Tenant</button>\n        </div>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div class=\"w-full\" *ngIf=\"(tenants | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-1/2 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Platform</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of tenants | async\">\n                        <div class=\"w-1/2 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">{{ item.platform }}</div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"editTenant(item)\">\n                                <app-icon className=\"backoffice-edit\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"removeTenant(item)\">\n                                <app-icon className=\"backoffice-trash\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No tenants for selected domain</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                height: 100%;\n                width: 100%;\n                padding: 1rem;\n            }\n        `,\n    ],\n})\nexport class PlaceStaffAPIComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public readonly domain = new BehaviorSubject<PlaceDomain>(null);\n\n    public readonly tenants = this.domain.pipe(\n        switchMap(() => {\n            this.loading = 'Loading tenants for domain...';\n            return get('/api/staff/v1/tenants');\n        }),\n        catchError((_) => []),\n        map((tenants) => {\n            console.log('No Error');\n            this.loading = '';\n            return tenants.filter((t) => t.domain === this.domain.getValue().domain);\n        }),\n        shareReplay()\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.domain.next(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public editTenant(tenant?: PlaceTenant) {\n        const ref = this._dialog.open(StaffTenantModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe(_ => this.domain.next(this.domain.getValue()));\n    }\n\n    public async removeTenant(tenant: PlaceTenant) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove tenant?',\n                content: `Remove <strong>${tenant.name}</strong> from this domain?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        details.loading('Removing tenant from domain...');\n        const system = await del(`/api/staff/v1/tenants/${tenant.id}`)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${tenant.id} from domain. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        notifySuccess(`Successfully removed tenant from domain.`);\n        this.domain.next(this.domain.getValue());\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { addEdge, PlaceEdge, updateEdge } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\n\nexport interface EdgeModalData {\n    edge: PlaceEdge;\n}\n\n@Component({\n    selector: 'edge-modal',\n    template: `\n        <header>\n            <h3>{{ edge ? 'Edit' : 'New' }} Edge</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main [formGroup]=\"form\" *ngIf=\"!loading && form; else load_state\" class=\"overflow-auto\">\n            <div class=\"flex flex-col flex-1\">\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"name\" placeholder=\"Edge Name\" />\n                    <mat-error>A edge name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea matInput formControlName=\"description\" placeholder=\"Edge description...\"></textarea>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer *ngIf=\"!loading\" class=\"p-2 border-t border-gray-200 flex justify-center\">\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving edge...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class EdgeModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly edge = this._data.edge;\n\n    public form: FormGroup;\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EdgeModalData,\n        private _dialog_ref: MatDialogRef<EdgeModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            name: new FormControl(this.edge?.name || '', [Validators.required]),\n            description: new FormControl(this.edge?.description || ''),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const edge = { ...this.edge, ...this.form.value };\n        const method = edge.id ? updateEdge(edge.id, edge) : addEdge(edge);\n        const new_edge = await method.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!new_edge) return notifyError('Error adding new edge.');\n        notifySuccess('Successfully added new edge.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceEdge, queryEdges, removeEdge, retrieveEdgeToken } from '@placeos/ts-client';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { copyToClipboard, openConfirmModal } from '../common/general';\nimport { notifyError, notifyInfo, notifySuccess } from '../common/notifications';\nimport { EdgeModalComponent } from './edge-modal.component';\n\n\n@Component({\n    selector: '[admin-edge]',\n    template: `\n        <button mat-button class=\"w-full sm:w-32 mb-4\" (click)=\"edit()\">Add New Edge</button>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div class=\"w-full\" *ngIf=\"(edges | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-32 p-2\">id</div>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">description</div>\n                    <div class=\"w-32 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of edges | async\">\n                        <div class=\"w-32 p-2 truncate\">{{ item.id }}</div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">{{ item.description }}</div>\n                        <div class=\"w-32 px-2 flex items-center justify-end \">\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"token(item)\">\n                                <app-icon className=\"backoffice-key\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"edit(item)\">\n                                <app-icon className=\"backoffice-edit\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"remove(item)\">\n                                <app-icon className=\"backoffice-trash\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No edges</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n                min-height: 10rem;\n            }\n        `,\n    ],\n})\nexport class PlaceEdgeComponent {\n    public loading: string = '';\n\n    private _change = new BehaviorSubject<boolean>(false);\n\n    public readonly edges: Observable<PlaceEdge[]> = this._change.pipe(\n        switchMap((_) => {\n            this.loading = 'Loading Edges...';\n            return queryEdges();\n        }),\n        catchError((_) => of({})),\n        map((details: any) => {\n            this.loading = '';\n            return details?.data || [];\n        }),\n        shareReplay()\n    );\n\n    public readonly token = async (edge: PlaceEdge) => {\n        const details = await retrieveEdgeToken(edge.id).toPromise();\n        copyToClipboard(details.token)\n        notifyInfo(`Token copied to clickboard.`);\n    };\n\n    public readonly edit = async (edge?: PlaceEdge) =>\n        this._dialog.open(EdgeModalComponent, { data: { edge } });\n\n    public readonly remove = async (i: PlaceEdge) => {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove edge?',\n                content: `Remove <strong>${i.name}</strong>?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Removing edge...');\n        const err = await removeEdge(i.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing edge. Error: ${err.statusText || err.message || err}`\n            );\n        notifySuccess('Successfully removed Edge.');\n        this._change.next(!this._change.getValue());\n    };\n\n    constructor(private _dialog: MatDialog) {}\n}\n","import { Component } from '@angular/core';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { randomInt } from '../common/general';\nimport { JsonSchema, SchemaStateService } from './schema-state.service';\n\n@Component({\n    selector: 'admin-schemas',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"active_schema\"\n                        (ngModelChange)=\"copySchema()\"\n                        placeholder=\"Select Schema...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let schema of schema_list | async\"\n                            [value]=\"schema\"\n                        >\n                            {{ schema.name }}\n                        </mat-option>\n                        <mat-option\n                            (click)=\"newSchema(); $event.preventDefault()\"\n                        >\n                            <span class=\"italic font-sans\">New Schema</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"newSchema()\">\n                Add Schema\n            </button>\n        </div>\n        <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"schema_copy\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema Name: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <input matInput [(ngModel)]=\"schema_copy.name\" />\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"saveSchema()\">\n                Save Schema\n            </button>\n        </div>\n        <div class=\"relative flex-1 h-1/2\">\n            <ng-container *ngIf=\"schema_copy; else empty_state\">\n                <settings-form-field\n                    [(ngModel)]=\"schema_copy.schema\"\n                    lang=\"json\"\n                    [readonly]=\"false\"\n                ></settings-form-field>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"absolute inset-0 flex items-center justify-center\">\n                <p class=\"p-8\">Select a schema to edit</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 1rem;\n                right: 1rem;\n                bottom: 0;\n                display: flex;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class AdminSchemasComponent {\n    public active_schema: JsonSchema;\n    public schema_copy: JsonSchema;\n\n    public readonly schema_list = this._state.schemas.pipe(shareReplay(1));\n    constructor(private _state: SchemaStateService) {}\n\n    public copySchema() {\n        if (!this.active_schema) return;\n        this.schema_copy = JSON.parse(JSON.stringify(this.active_schema));\n    }\n\n    public async newSchema() {\n        this.active_schema = {\n            name: 'New Schema',\n            schema: '{}',\n        };\n        this.copySchema();\n    }\n\n    public saveSchema() {\n        this._state.saveSchema(this.schema_copy);\n        this.active_schema = null;\n        this.schema_copy = null;\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import { getUnixTime } from 'date-fns';\n\nexport class PlaceAPIKeyDetails {\n    public readonly id: string;\n    public readonly name: string;\n    public readonly user_id: string;\n    public readonly authority_id: string;\n    public readonly description: string;\n    public readonly scopes: string[];\n    public readonly permissions: null | 'user' | 'support' | 'admin';\n    public readonly created_at: number;\n    public readonly updated_at: number;\n    public readonly secret?: string;\n    public readonly x_api_key?: string;\n\n    constructor(_data: Partial<PlaceAPIKeyDetails>) {\n        this.id = _data.id || '';\n        this.name = _data.name || '';\n        this.user_id = _data.user_id || '';\n        this.authority_id = _data.authority_id || '';\n        this.description = _data.description || '';\n        this.permissions = _data.permissions || 'user';\n        this.created_at = _data.created_at || getUnixTime(new Date());\n        this.updated_at = _data.updated_at || getUnixTime(new Date());\n        this.secret = _data.secret;\n        this.x_api_key = _data.x_api_key || '';\n        this.scopes = _data.scopes || [];\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { addChipItem, removeChipItem } from '../../common/forms';\nimport { DialogEvent } from '../../common/types';\nimport { APIKeyService } from './api-keys.service';\n\n@Component({\n    selector: 'api-key-modal',\n    template: `\n        <header class=\"h-12 flex items-center justify-between p-2\">\n            <h2>New API Key</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            class=\"w-[32rem] max-w-[calc(100vw-2rem)]\"\n            *ngIf=\"!loading && form; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                        matInput\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Description</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        name=\"description\"\n                        formControlName=\"description\"\n                        placeholder=\"Description\"\n                        matInput\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"scope\">Scopes</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Scopes\">\n                        <mat-chip\n                            *ngFor=\"let scope of scope_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeScope(tag)\"\n                        >\n                            {{ scope }}\n                            <app-icon\n                                matChipRemove\n                                className=\"backoffice-cross\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            placeholder=\"Scopes...\"\n                            i18n-placeholder=\"@@apiScopePlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addScope($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"user\">User<span>*</span></label>\n                <an-action-field\n                    [matMenuTriggerFor]=\"menu\"\n                    yPosition=\"below\"\n                    class=\"mb-8\"\n                    (click)=\"focusInput()\"\n                >\n                    <div [class.opacity-30]=\"!form.value.user?.id\">\n                        {{ form.value.user?.name || 'Select user' }}\n                    </div>\n                </an-action-field>\n                <mat-menu #menu=\"matMenu\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"px-2 h-12\"\n                        (click)=\"\n                            $event.preventDefault(); $event.stopPropagation()\n                        \"\n                    >\n                        <input\n                            matInput\n                            #input\n                            ngModel\n                            (ngModelChange)=\"setSearch($event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Search users...\"\n                        />\n                    </mat-form-field>\n                    <button\n                        mat-menu-item\n                        *ngFor=\"let item of users | async | slice: 0:10\"\n                        (click)=\"\n                            form.patchValue({ user: item, user_id: item.id });\n                            setSearch('')\n                        \"\n                        [class.text-primary]=\"form.value.user?.id === item.id\"\n                    >\n                        {{ item.name }}\n                    </button>\n                </mat-menu>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"permissions\">Permissions</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"permissions\"\n                        formControlName=\"permissions\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option [value]=\"null\">None</mat-option>\n                        <mat-option value=\"user\">User</mat-option>\n                        <mat-option value=\"support\">Support</mat-option>\n                        <mat-option value=\"admin\">Admin</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 flex items-center justify-center border-t border-gray-100\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 w-[24rem] h-64\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class APIKeyModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public form: FormGroup = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        user: new FormControl(null),\n        user_id: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        scopes: new FormControl([]),\n        permissions: new FormControl(''),\n    });\n    public loading: string;\n    public readonly search_str = new BehaviorSubject('');\n\n    @ViewChild('input') public _input_el: ElementRef<HTMLInputElement>;\n\n    public readonly users = combineLatest([\n        this._service.users,\n        this.form.valueChanges,\n    ]).pipe(\n        map(([users, { permissions }]) => {\n            if (permissions === 'admin')\n                return users.filter((_) => _.sys_admin);\n            if (permissions === 'support')\n                return users.filter((_) => _.support || _.sys_admin);\n            return users.sort((a, b) => a.name?.localeCompare(b.name));\n        })\n    );\n\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public readonly focusInput = () =>\n        setTimeout(() => this._input_el?.nativeElement?.focus(), 100);\n    public readonly setSearch = (s) => this._service.setSearch(s);\n\n    public readonly addScope = (e) =>\n        addChipItem(this.form.controls.scopes as any, e);\n    public readonly removeScope = (i) =>\n        removeChipItem(this.form.controls.scopes as any, i);\n\n    constructor(private _service: APIKeyService) {\n        setTimeout(() => this.form.patchValue({ permissions: null }), 100);\n    }\n\n    public get scope_list(): string[] {\n        return this.form.controls.scopes.value;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        const data = { ...this.form.value };\n        delete data.user;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    create,\n    PlaceDomain,\n    PlaceUser,\n    query,\n    queryDomains,\n    queryUsers,\n    remove,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { debounce, debounceTime, first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../../common/general';\nimport { notifyError, notifySuccess } from '../../common/notifications';\nimport { PlaceAPIKeyDetails } from './api-key-details.class';\nimport { APIKeyModalComponent } from './api-key-modal.component';\n\n@Injectable()\nexport class APIKeyService {\n    private _search = new BehaviorSubject<string>('');\n    private _domain = new BehaviorSubject<PlaceDomain>(null);\n    private _last_key = new BehaviorSubject<PlaceAPIKeyDetails>(null);\n    private _change = new BehaviorSubject<number>(0);\n\n    public readonly last_key = this._last_key.asObservable();\n    public readonly active_domain = this._domain.asObservable();\n\n    public readonly available_domains = queryDomains({ limit: 500 }).pipe(\n        map((_) => _.data),\n        shareReplay(1)\n    );\n\n    public readonly available_keys = combineLatest([\n        this._domain,\n        this._change,\n    ]).pipe(\n        switchMap(([domain]) => {\n            return domain\n                ? query({\n                      query_params: { authority_id: domain.id },\n                      fn: (d) => new PlaceAPIKeyDetails(d),\n                      path: 'api_keys',\n                  }).pipe(map((_) => _.data as PlaceAPIKeyDetails[]))\n                : of([] as PlaceAPIKeyDetails[]);\n        }),\n        shareReplay(1)\n    );\n\n    public readonly users = combineLatest([\n        this._domain,\n        this._search,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(([domain, q]) => {\n            console.log('Query User:', q);\n            return domain\n                ? queryUsers({ authority_id: domain.id, q }).pipe(\n                      map((_) => _.data as PlaceUser[])\n                  )\n                : of([] as PlaceUser[]);\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public setDomain(domain: PlaceDomain) {\n        this._domain.next(domain);\n    }\n\n    public setSearch(s: string) {\n        this._search.next(s);\n    }\n\n    public async newKey() {\n        const ref = this._dialog.open(APIKeyModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Creating new API key...';\n        const domain = this._domain.getValue();\n        const key = await create({\n            query_params: {},\n            fn: (d) => new PlaceAPIKeyDetails(d),\n            path: 'api_keys',\n            form_data: {\n                ...details.metadata,\n                authority_id: domain.id,\n            },\n        })\n            .toPromise()\n            .catch((_) => {\n                ref.close();\n                notifyError(_);\n                throw _;\n            });\n        this._last_key.next(key as any);\n        this._change.next(Date.now());\n        notifySuccess('Successfully created new API key.');\n        ref.close();\n    }\n\n    public async removeKey(key: PlaceAPIKeyDetails) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove API Key',\n                content: `Are you sure you wish to remove this API key?\n                    Removing this key may result in applications using this key to stop working.`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Removing API key...');\n        await remove({\n            id: key.id,\n            query_params: {},\n            path: 'api_keys',\n        }).toPromise();\n        details.close();\n        notifySuccess('Successfully removed API key.');\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Clipboard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCopyToClipboard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }]; }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { Component } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { take } from 'rxjs/operators';\nimport { APIKeyService } from './api-keys.service';\nimport { notifyInfo } from '../../common/notifications';\n\n@Component({\n    selector: 'admin-api-keys',\n    template: `\n        <div class=\"flex items-start space-x-2 m-4\">\n            <div class=\"flex flex-col space-y-1\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [ngModel]=\"domain | async\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list | async\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button\n                mat-button\n                class=\"mt-8 min-w-[8rem]\"\n                [disabled]=\"!(domain | async)\"\n                (click)=\"newKey()\"\n            >\n                Add API Key\n            </button>\n            <div\n                *ngIf=\"last_key | async\"\n                class=\"rounded shadow border border-gray-100 min-w-[24rem]\"\n            >\n                <div class=\"border-b px-2 pb-1 border-gray-200 !w-full\">\n                    <label class=\"p-0 m-0\">\n                        Last API Key Details ({{\n                            (last_key | async)?.name || 'Unanamed API Key'\n                        }})\n                    </label>\n                </div>\n                <div class=\"p-2\">\n                    <div\n                        class=\"select-all text-xs opacity-60 mono break-words cursor-pointer\"\n                        (click)=\"copyKey()\"\n                    >\n                        {{ (last_key | async)?.x_api_key}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div role=\"table\" *ngIf=\"(key_list | async)?.length; else load_state\">\n            <div table-head>\n                <div class=\"w-32 p-2\">Name</div>\n                <div class=\"flex-1 p-2\">Description</div>\n                <div class=\"w-32 p-2 truncate\">Scopes</div>\n                <div class=\"w-28 p-2\">Permissions</div>\n                <div class=\"w-32 p-2\">Created</div>\n                <div class=\"w-16 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of key_list | async\">\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                    <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                    <div class=\"w-32 p-2 truncate\">\n                        <span\n                            class=\"m-1 px-2 py-1 bg-gray-400 rounded text-xs text-white\"\n                            *ngFor=\"let scope of item.scopes\"\n                        >\n                            {{ scope }}\n                        </span>\n                    </div>\n                    <div class=\"w-28 p-2\">{{ item.permissions || 'None' }}</div>\n                    <div class=\"w-32 p-2\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-16 p-2 flex items-center\">\n                        <button mat-icon-button (click)=\"deleteKey(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No API Keys</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AdminAPIKeysComponent {\n    public readonly domain = this._service.active_domain;\n    public readonly domain_list = this._service.available_domains;\n    public readonly key_list = this._service.available_keys;\n    public readonly last_key = this._service.last_key;\n\n    public readonly setDomain = (d) => this._service.setDomain(d);\n    public readonly newKey = () => this._service.newKey();\n    public readonly deleteKey = (k) => this._service.removeKey(k);\n\n    constructor(\n        private _service: APIKeyService,\n        private _clipboard: Clipboard\n    ) {}\n\n    public async copyKey() {\n        const key = await this.last_key.pipe(take(1)).toPromise();\n        if (!key?.x_api_key) return;\n        this._clipboard.copy(key.x_api_key);\n        notifyInfo('Copied API key to clipboard.');\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { AuthorisedAdminGuard } from 'apps/backoffice/src/app/ui/guards/authorised-admin.guard';\n\nimport { PlaceComponent } from './engine.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        component: PlaceComponent,\n        canActivate: [AuthorisedAdminGuard],\n        children: [\n            { path: 'about', component: PlaceDetailsComponent },\n            { path: 'database', component: PlaceDatabaseDetailsComponent },\n            { path: 'clusters', component: PlaceClusterDetailsComponent },\n            { path: 'interfaces', component: AdminInterfacesComponent },\n            { path: 'brokers', component: AdminBrokersComponent },\n            { path: 'edge', component: PlaceEdgeComponent },\n            { path: 'extensions', component: PlaceExtensionsComponent },\n            { path: 'staff-api', component: PlaceStaffAPIComponent },\n            { path: 'schemas', component: AdminSchemasComponent },\n            { path: 'api-keys', component: AdminAPIKeysComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './engine.routes';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\nimport { PlaceComponent } from './engine.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { PlaceClusterItemComponent } from './cluster-details/cluster-item.component';\nimport { PlaceClusterTaskListComponent } from './cluster-details/cluster-task-list.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { EdgeModalComponent } from './edge-modal.component';\nimport { AdminClusterNodeComponent } from './cluster-details/cluster-node.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\nimport { APIKeyModalComponent } from './api-keys/api-key-modal.component';\nimport { APIKeyService } from './api-keys/api-keys.service';\n\n@NgModule({\n    declarations: [\n        PlaceComponent,\n        PlaceDatabaseDetailsComponent,\n        PlaceDetailsComponent,\n        PlaceClusterDetailsComponent,\n        PlaceClusterItemComponent,\n        PlaceClusterTaskListComponent,\n        PlaceExtensionsComponent,\n        AdminInterfacesComponent,\n        AdminBrokersComponent,\n        ExtensionModalComponent,\n        PlaceStaffAPIComponent,\n        StaffTenantModalComponent,\n        PlaceEdgeComponent,\n        EdgeModalComponent,\n        AdminClusterNodeComponent,\n        AdminSchemasComponent,\n        AdminAPIKeysComponent,\n        APIKeyModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n    providers: [\n        APIKeyService\n    ]\n})\nexport class AppPlaceModule {}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n"],"sourceRoot":"webpack:///","file":"317.87a7d7ae8ebd0572.js"}