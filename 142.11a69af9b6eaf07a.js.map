{"version":3,"mappings":"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","names":["DomainStateService","constructor","_state","_dialog","this","BehaviorSubject","item","_loading","asObservable","combineLatest","_changed","pipe","filter","_","PlaceDomain","switchMap","queryUsers","authority_id","id","map","data","catchError","shareReplay","q","querySAMLSources","queryOAuthSources","queryLDAPSources","list","forEach","array","concat","queryApplications","__awaiter","n","details","Promise","all","total","toPromise","saml","oauth","ldap","applications","auth_sources","users","active_item","update","domain","updateDomain","replaceItem","editApplication","PlaceApplication","owner_id","ref","open","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","name","save","i","updateApplication","addApplication","race","componentInstance","event","first","reason","afterClosed","next","Date","valueOf","deleteApplication","openConfirmModal","title","content","icon","type","class","loading","err","removeApplication","catch","close","notifyError","responseText","message","notifySuccess","editAuthSource","AuthSourceModalComponent","auth_source","deleteAuthSource","PlaceSAMLSource","removeSAMLSource","PlaceOAuthSource","removeOAuthSource","removeLDAPSource","i0","factory","DomainsComponent","BaseClass","_service","super","extensions","extensionsForItem","updateTabList","count","tab_list","ngOnInit","subscription","counts","subscribe","c","selectors","ctx_r5","ctx_r7","oxw","ctx_r8","DomainApplicationsComponent","copySecret","show_secret","copyToClipboard","secret","notifyInfo","$localize","ctx","DomainAuthenticationComponent","source","DomainUsersComponent","ROUTES","path","component","children","loadForm","form","FormGroup","config","FormControl","JSON","stringify","undefined","validateJSONString","internals","valueChanges","saveChanges","timeout","valid","Object","parse","value","DomainAboutComponent","ExtensionOutletComponent","redirectTo","AppDomainsModule","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule"],"sources":["./apps/backoffice/src/app/domains/domain-state.service.ts","./apps/backoffice/src/app/domains/domains.component.ts","./apps/backoffice/src/app/domains/domain-applications.component.ts","./apps/backoffice/src/app/domains/domain-authentication.component.ts","./apps/backoffice/src/app/domains/domain-users.component.ts","./apps/backoffice/src/app/domains/domain-about.component.ts","./apps/backoffice/src/app/domains/domains.routes.ts","./apps/backoffice/src/app/domains/domains.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addApplication,\n    PlaceApplication,\n    PlaceDomain,\n    PlaceLDAPSource,\n    PlaceOAuthSource,\n    PlaceSAMLSource,\n    PlaceUser,\n    queryApplications,\n    queryLDAPSources,\n    queryOAuthSources,\n    querySAMLSources,\n    queryUsers,\n    removeApplication,\n    removeLDAPSource,\n    removeOAuthSource,\n    removeSAMLSource,\n    updateApplication,\n    updateDomain,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, merge, Observable, of } from 'rxjs';\nimport { catchError, filter, first, map, share, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { AuthSourceModalComponent } from '../overlays/auth-source-modal/auth-source-modal.component';\nimport { ItemCreateUpdateModalComponent } from '../overlays/item-modal/item-modal.component';\n\nexport type PlaceAuthSource = PlaceOAuthSource | PlaceSAMLSource | PlaceLDAPSource;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DomainStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _changed = new BehaviorSubject<number>(0);\n\n    public readonly item: Observable<PlaceDomain> = this._state.item as any;\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly users: Observable<PlaceUser[]> = combineLatest([this._changed, this.item]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => queryUsers({ authority_id: item.id } as any)),\n        map((_) => _.data),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly auth_sources: Observable<PlaceAuthSource[]> = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => {\n            const q = { authority_id: item.id };\n            return combineLatest([\n                querySAMLSources(q as any).pipe(map((_) => _.data)),\n                queryOAuthSources(q as any).pipe(map((_) => _.data)),\n                queryLDAPSources(q as any).pipe(map((_) => _.data)),\n            ]);\n        }),\n        map((_) => {\n            let list = [];\n            _.forEach((array) => (list = list.concat(array)));\n            return list;\n        }),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly applications: Observable<PlaceApplication[]> = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => queryApplications({ authority_id: item.id } as any)),\n        map((_) => _.data),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly counts = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(async ([_, item]) => {\n            const q = { authority_id: item?.id };\n            const details = await Promise.all([\n                queryApplications(q as any)\n                    .pipe(map((_) => _.total))\n                    .toPromise(),\n                combineLatest([\n                    querySAMLSources(q as any),\n                    queryOAuthSources(q as any),\n                    queryLDAPSources(q as any),\n                ])\n                    .pipe(map(([saml, oauth, ldap]) => saml.total + oauth.total + ldap.total))\n                    .toPromise(),\n                queryUsers(q as any)\n                    .pipe(map((_) => _.total))\n                    .toPromise(),\n            ]);\n            const [applications, auth_sources, users] = details;\n            return {\n                applications,\n                auth_sources: auth_sources || 0,\n                users,\n            };\n        }),\n        shareReplay(1)\n    );\n\n    public get active_item() {\n        return this._state.active_item;\n    }\n\n    constructor(private _state: ActiveItemService, private _dialog: MatDialog) {}\n\n    public async update(domain: PlaceDomain) {\n        const item = await updateDomain(domain.id, domain).toPromise();\n        this._state.replaceItem(item);\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public async editApplication(item?: PlaceApplication) {\n        item = item || new PlaceApplication({ owner_id: this.active_item.id });\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Application',\n                save: (i) => (i.id ? updateApplication(i.id, i) : addApplication(i)),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')).toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details) return;\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Remove application from domain\n     * @param item Application to delete\n     */\n    public async deleteApplication(item: PlaceApplication) {\n        const details = await openConfirmModal(\n            {\n                title: `Delete application`,\n                content: `<p>Are you sure you want delete the application ${item.name}?</p><p>Configuration will be <strong>immediately</strong> updated</p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Deleting domain application...');\n        const err = await removeApplication(item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing domain application. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed domain application.');\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public async editAuthSource(item?: PlaceAuthSource) {\n        const ref = this._dialog.open(AuthSourceModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                auth_source: item,\n                domain: this.active_item,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')).toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details) return;\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Remove application from domain\n     * @param item Application to delete\n     */\n    public async deleteAuthSource(item: PlaceAuthSource) {\n        const details = await openConfirmModal(\n            {\n                title: `Delete auth source`,\n                content: `<p>Are you sure you want delete this auth source?</p><p>Deleting this will remove this auth source <strong>immediately</strong></p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Deleting domain auth source...');\n        const method =\n            item instanceof PlaceSAMLSource\n                ? removeSAMLSource\n                : item instanceof PlaceOAuthSource\n                ? removeOAuthSource\n                : removeLDAPSource;\n        const err = await method(item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing domain auth source. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed domain auth source.');\n        this._changed.next(new Date().valueOf());\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain, queryApplications, queryLDAPSources, queryOAuthSources, querySAMLSources, queryUsers } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { DomainStateService } from './domain-state.service';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\n\n@Component({\n    selector: 'app-domains',\n    template: `\n        <div\n            class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\"\n        >\n            <sidebar\n                heading=\"Domains\"\n                name=\"domains\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"domain\"\n                route=\"domains\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class DomainsComponent extends BaseClass {\n    /** Number of triggers for the active system */\n    public applications: number;\n    /** Number of triggers for the active system */\n    public auth_sources: number;\n    /** Number of triggers for the active system */\n    public user_count: number;\n\n    public readonly name = 'domains';\n\n    constructor(private _service: DomainStateService) {\n        super();\n    }\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(count: HashMap<number>) {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'applications',\n                name: 'Applications',\n                count: count.applications || 0,\n                icon: { class: 'backoffice-publish' },\n            },\n            {\n                id: 'authentication',\n                name: 'Authentication',\n                count: count.auth_sources || 0,\n                icon: { class: 'backoffice-lock-open' },\n            },\n            {\n                id: 'users',\n                name: 'Users',\n                count: count.users || 0,\n                icon: { class: 'backoffice-users' },\n            },\n        ].concat(this.extensions);\n    }\n\n    public ngOnInit(): void {\n        this.updateTabList({});\n        this.subscription(\n            'item',\n            this._service.counts.subscribe((c) => this.updateTabList(c as any))\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain, PlaceApplication } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport { copyToClipboard } from 'apps/backoffice/src/app/common/general';\nimport { notifyInfo } from 'apps/backoffice/src/app/common/notifications';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-applications',\n    template: `\n        <button\n            mat-button\n            class=\"w-full sm:w-40 mb-4\"\n            (click)=\"newApplication()\"\n            i18n=\"@@newAction\"\n        >\n            New Application\n        </button>\n        <div\n            role=\"table\"\n            class=\"overflow-x-auto\"\n            *ngIf=\"(applications | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"w-40 p-2\" i18n=\"@@applicationTableName\">Name</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@applicationTableRedirect\">\n                    Redirect\n                </div>\n                <div class=\"w-48 p-2\" i18n=\"@@applicationTableClientId\">\n                    Client ID\n                </div>\n                <div class=\"w-48 p-2\" i18n=\"@@applicationTableClientSecret\">\n                    Secret\n                </div>\n                <div class=\"w-24 p-2\" i18n=\"@@applicationTableScope\">Scope</div>\n                <div class=\"w-24\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of applications | async\">\n                    <div class=\"w-40 p-2\" [matTooltip]=\"item.id\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"flex-1 p-2 underline overflow-hidden\">\n                        <a [href]=\"item.redirect_uri\" class=\"truncate\">{{\n                            item.redirect_uri\n                        }}</a>\n                    </div>\n                    <div class=\"w-48 p-2 truncate text-xs\">{{ item.uid }}</div>\n                    <div\n                        class=\"w-48 p-2 truncate underline text-center text-xs\"\n                        (click)=\"\n                            !show_secret[item.id]\n                                ? (show_secret[item.id] = true)\n                                : copySecret(item)\n                        \"\n                    >\n                        {{ show_secret[item.id] ? item.secret : 'Show' }}\n                    </div>\n                    <div class=\"w-24 p-2\">{{ item.scopes }}</div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"editApplication(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"deleteApplication(item)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div empty-state>\n                <p i18n=\"@@applicationTableEmpty\">No applications found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            [role='table'] > div {\n                min-width: 56rem;\n            }\n        `,\n    ],\n})\nexport class DomainApplicationsComponent {\n    /** List of applications associated with the active domain */\n    public readonly applications = this._service.applications;\n\n    public show_secret: HashMap<boolean> = {};\n\n    public readonly newApplication = () => this._service.editApplication();\n    public readonly editApplication = (item) =>\n        this._service.editApplication(item);\n    public readonly deleteApplication = (item) =>\n        this._service.deleteApplication(item);\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n\n    public copySecret(item: PlaceApplication) {\n        this.show_secret[item.id] = false;\n        copyToClipboard(item.secret);\n        notifyInfo('Copied client secret to clipboard');\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-authentication',\n    template: `\n        <button\n            mat-button\n            class=\"w-full sm:w-40 mb-4\"\n            (click)=\"newAuthSource()\"\n            i18n=\"@@newAction\"\n        >\n            New Auth Source\n        </button>\n        <div\n            role=\"table\"\n            class=\"min-w-[36rem]\"\n            *ngIf=\"(auth_sources | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"w-48 p-2\" i18n=\"@@authTableID\">ID</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@authTableName\">Name</div>\n                <div class=\"w-32 p-2\" i18n=\"@@authTableType\">Type</div>\n                <div class=\"w-24 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of auth_sources | async\">\n                    <div class=\"w-48 p-2 mono text-xs\">\n                        {{ item.id }}\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"w-32 p-2 uppercase\">{{ item.type }}</div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"editAuthSource(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"deleteAuthSource(item)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div empty-state>\n                <p i18n=\"@@authTableEmpty\">No authentication sources found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainAuthenticationComponent {\n    /** List of auth sources associated with the active domain */\n    public readonly auth_sources = this._service.auth_sources;\n    /** Mapping of auth sources to their type */\n    public source_types: HashMap<'oauth' | 'saml' | 'ldap'> = {};\n\n    public readonly newAuthSource = () => this._service.editAuthSource();\n    public readonly editAuthSource = (source) =>\n        this._service.editAuthSource(source);\n    public readonly deleteAuthSource = (source) =>\n        this._service.deleteAuthSource(source);\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-users',\n    template: `\n        <div role=\"table\" *ngIf=\"(users | async)?.length; else empty_state\">\n            <div table-head>\n                <div class=\"w-64 p-2\" i18n=\"@@userTableName\">Name</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@userTableEmail\">Email</div>\n                <div class=\"w-24 p-2\" i18n=\"@@userTableRole\">Role</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of users | async\">\n                    <div class=\"w-64 p-2 underline\">\n                        <a\n                            [routerLink]=\"['/users', item.id]\"\n                            [matTooltip]=\"item.id\"\n                            matTooltipPosition=\"right\"\n                        >\n                            {{ item.name }}\n                        </a>\n                    </div>\n                    <div class=\"flex-1 p-2 underline\">\n                        <a [href]=\"'mailto:' + item.email\">{{ item.email }}</a>\n                    </div>\n                    <div class=\"w-24 p-2\">\n                        <code [class.text-opacity-20]=\"!item.sys_admin && !item.support\">\n                            {{ item.sys_admin ? 'Admin' : item.support ? 'Support' : 'None' }}\n                        </code>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <p i18n=\"@@userTableEmpty\">No users associated with domain</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainUsersComponent {\n    public readonly users = this._service.users;\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { validateJSONString } from 'apps/backoffice/src/app/common/validation';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'app-domain-about',\n    template: `\n        <h3 class=\"text-lg font-medium mb-2\">Settings</h3>\n        <section *ngIf=\"form\" [formGroup]=\"form\">\n            <mat-tab-group [(selectedIndex)]=\"index\">\n                <mat-tab label=\"Config\"> </mat-tab>\n                <mat-tab label=\"Internals\"> </mat-tab>\n            </mat-tab-group>\n            <settings-form-field\n                *ngIf=\"index !== 1\"\n                formControlName=\"config\"\n                lang=\"json\"\n                [readonly]=\"false\"\n            ></settings-form-field>\n            <settings-form-field\n                *ngIf=\"index === 1\"\n                formControlName=\"internals\"\n                lang=\"json\"\n                [readonly]=\"false\"\n            ></settings-form-field>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainAboutComponent extends BaseClass implements OnInit {\n    /** Form group for edit domain settings */\n    public form: FormGroup;\n    /** Index of the active tab */\n    public index: number;\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((_) => this.loadForm())\n        );\n    }\n\n    /** Load form fields for active item */\n    private loadForm(): void {\n        this.form = new FormGroup({\n            config: new FormControl(\n                JSON.stringify(this.item.config, undefined, 4),\n                [validateJSONString]\n            ),\n            internals: new FormControl(\n                JSON.stringify(this.item.internals, undefined, 4),\n                [validateJSONString]\n            ),\n        });\n        this.subscription(\n            'form',\n            this.form.valueChanges.subscribe(() => this.saveChanges())\n        );\n    }\n\n    /** Save changes to the form fields */\n    private saveChanges(): void {\n        this.timeout(\n            'save',\n            async () => {\n                if (this.form.valid) {\n                    const domain = new PlaceDomain({\n                        ...this.item,\n                        config: JSON.parse(this.form.value.config),\n                        internals: JSON.parse(this.form.value.internals),\n                    });\n                    this._service.update(domain);\n                }\n            },\n            3000\n        );\n    }\n}\n","import { Routes } from '@angular/router';\nimport { DomainsComponent } from './domains.component';\nimport { DomainApplicationsComponent } from './domain-applications.component';\nimport { DomainAuthenticationComponent } from './domain-authentication.component';\nimport { DomainUsersComponent } from './domain-users.component';\nimport { DomainAboutComponent } from './domain-about.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: DomainsComponent,\n        children: [\n            { path: 'about', component: DomainAboutComponent },\n            { path: 'applications', component: DomainApplicationsComponent },\n            { path: 'authentication', component: DomainAuthenticationComponent },\n            { path: 'users', component: DomainUsersComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './domains.routes';\n\nimport { DomainsComponent } from './domains.component';\nimport { DomainApplicationsComponent } from './domain-applications.component';\nimport { DomainAuthenticationComponent } from './domain-authentication.component';\nimport { DomainUsersComponent } from './domain-users.component';\nimport { DomainAboutComponent } from './domain-about.component';\n\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        DomainsComponent,\n        DomainApplicationsComponent,\n        DomainAuthenticationComponent,\n        DomainUsersComponent,\n        DomainAboutComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppDomainsModule {}\n"],"sourceRoot":"webpack:///","file":"142.11a69af9b6eaf07a.js"}