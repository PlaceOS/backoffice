{"version":3,"mappings":"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","names":["RepositoriesStateService","constructor","_state","_dialog","this","BehaviorSubject","_loading","asObservable","item","all_item","pipe","switchMap","PlaceRepository","repo_type","PlaceRepositoryType","next","listRepositoryDrivers","id","limit","of","catchError","_","map","filter","i","listRepositoryCommits","count","details","_a","commit","active_item","pullLatestCommit","pullRepositoryChanges","toPromise","catch","err","notifyError","JSON","stringify","response","message","replaceItem","Object","commit_hash","newDriver","driver","open","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","data","PlaceDriver","name","module_name","repository_id","file_name","save","addDriver","i0","factory","RepositoriesComponent","BaseClass","_service","super","extensions","extensionsForItem","updateTabList","tab_list","driver_count","icon","class","concat","ngOnInit","subscription","driver_list","subscribe","list","length","selectors","RepositoryAboutComponent","local_url","type","location","origin","folder_name","hash","repo_uri","t","uri","replace","pulling","$localize","i18n_5","ctx","ctx_r8","oxw","ROUTES","path","component","children","d","RepositoryDriversComponent","ExtensionOutletComponent","redirectTo","AppRepositoriesModule","CommonModule","FormsModule","RouterModule","SharedContentModule"],"sources":["./apps/backoffice/src/app/repositories/repositories-state.service.ts","./apps/backoffice/src/app/repositories/repositories.component.ts","./apps/backoffice/src/app/repositories/repository-about.component.ts","./apps/backoffice/src/app/repositories/repository-drivers.component.ts","./apps/backoffice/src/app/repositories/repositories.routes.ts","./apps/backoffice/src/app/repositories/repositories.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addDriver,\n    listRepositoryCommits,\n    listRepositoryDrivers,\n    PlaceDriver,\n    PlaceRepository,\n    PlaceRepositoryType,\n    pullRepositoryChanges,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    share,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError } from '../common/notifications';\nimport {\n    CreateEditModalData,\n    ItemCreateUpdateModalComponent,\n} from '../overlays/item-modal/item-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RepositoriesStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n    /** Active module */\n    public readonly item = this._state.item;\n    /** List of available drivers for repository */\n    public readonly driver_list = this._state.all_item.pipe(\n        switchMap((item: PlaceRepository) => {\n            if (\n                !(item instanceof PlaceRepository) ||\n                item.repo_type === PlaceRepositoryType.Interface\n            )\n                return of(null);\n            this._loading.next(true);\n            return listRepositoryDrivers(item.id, { limit: 2000 });\n        }),\n        catchError((_) => []),\n        map((_) => {\n            this._loading.next(false);\n            return _;\n        })\n    );\n    /** Get latest commit for the active repository */\n    public readonly commit = this._state.all_item.pipe(\n        filter((i) => i instanceof PlaceRepository),\n        switchMap((item) =>\n            listRepositoryCommits(item.id, { count: 1 } as any)\n        ),\n        catchError((_) => []),\n        map((details) => details[0]?.commit || 'HEAD')\n    );\n\n    public get active_item(): PlaceRepository {\n        return this._state.active_item as any;\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async pullLatestCommit() {\n        const commit: any = await pullRepositoryChanges(this.active_item.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error pulling latest commit. Error: ${JSON.stringify(\n                        err.response || err.message || 'Pull timed out'\n                    )}`\n                );\n            });\n        if (!commit) return;\n        this._state.replaceItem(\n            new PlaceRepository({\n                ...this.active_item,\n                commit_hash: commit.commit_hash,\n            })\n        );\n    }\n\n    public async newDriver(driver: string) {\n        this._dialog.open<ItemCreateUpdateModalComponent, CreateEditModalData>(\n            ItemCreateUpdateModalComponent,\n            {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: new PlaceDriver({\n                        name: '',\n                        module_name: '',\n                        repository_id: this.active_item.id,\n                        file_name: driver,\n                    }),\n                    name: 'Driver',\n                    save: (item) => addDriver(item),\n                },\n            }\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { extensionsForItem } from '../common/api';\n\nimport { BaseClass } from '../common/base.class';\nimport { RepositoriesStateService } from './repositories-state.service';\n\n@Component({\n    selector: 'app-repositories',\n    template: `\n        <div class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\">\n            <sidebar\n                heading=\"Repositories\"\n                name=\"repositories\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"repo\"\n                route=\"repositories\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class RepositoriesComponent extends BaseClass {\n    /** Number of drivers in the repository */\n    public driver_count: number;\n\n    public readonly name = 'repositories';\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = (this.driver_count < 0 || !this.driver_count\n            ? [{ id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } }]\n            : [\n                  { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                  {\n                      id: 'drivers',\n                      name: 'Drivers',\n                      count: this.driver_count,\n                      icon: { class: 'backoffice-documents' },\n                  },\n              ]\n        ).concat(this.extensions);\n    }\n\n    constructor(protected _service: RepositoriesStateService) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.subscription(\n            'item',\n            this._service.driver_list.subscribe((list) => {\n                this.driver_count = list ? list.length : -1;\n                this.updateTabList();\n            })\n        );\n        this.updateTabList();\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceRepositoryType } from '@placeos/ts-client';\nimport { BaseClass } from '../common/base.class';\nimport { RepositoriesStateService } from './repositories-state.service';\n\n@Component({\n    selector: 'repository-about',\n    template: `\n        <section class=\"mb-4 text-center\">\n            <mat-card class=\"w-52\">\n                <mat-card-content i18n=\"@@repoPullActionDetails\">\n                    Pull the latest commit for<br />\n                    this repository\n                </mat-card-content>\n                <mat-card-actions>\n                    <button\n                        mat-button\n                        class=\"w-40\"\n                        [disabled]=\"pulling\"\n                        (click)=\"pullLatestCommit()\"\n                    >\n                        <ng-container\n                            *ngIf=\"!pulling; else spinner\"\n                            i18n=\"@@repoPullAction\"\n                        >\n                            Pull\n                        </ng-container>\n                    </button>\n                </mat-card-actions>\n            </mat-card>\n        </section>\n        <section class=\"space-y-2\">\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoTypeLabel\">Type:</label>\n                <div class=\"value\" i18n=\"@@driverListEmpty\">\n                    { item.type, select, interface { Interface Repository }\n                    driver { Driver Repository }, other { =Unknown=} }\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoFolderNameLabel\">Folder name:</label>\n                <div\n                    class=\"value select-all\"\n                    [class.underline]=\"item.type === 'interface'\"\n                    [class.pointer-events-none]=\"item.type !== 'interface'\"\n                >\n                    <a [href]=\"local_url\" target=\"_blank\">{{\n                        item.folder_name || 'No folder set'\n                    }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoUriLabel\">Repository URI:</label>\n                <div class=\"value underline select-all\">\n                    <a [href]=\"item.uri | safe: 'url'\" target=\"_blank\">{{\n                        repo_uri || 'No URI set'\n                    }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoBranchLabel\">Branch:</label>\n                <div\n                    class=\"value select-all bg-gray-200 px-2 pb-1 pt-2 text-xs rounded mono dark:text-black\"\n                >\n                    {{ item.branch || 'master' }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoCommitHashLabel\">Commit hash:</label>\n                <div\n                    class=\"value select-text bg-gray-200 px-2 pb-1 pt-2 text-xs rounded mono dark:text-black\"\n                >\n                    {{ item.commit_hash || 'No Commit hash set' }}\n                    <span\n                        class=\"select-text mono\"\n                        *ngIf=\"commit && commit !== item.commit_hash\"\n                    >\n                        ({{ commit }})\n                    </span>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@descriptionLabel\">Description:</label>\n                <div class=\"value select-all\">\n                    {{ item.description || 'No description' }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@@repoUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <ng-template #spinner>\n            <mat-spinner diameter=\"32\"></mat-spinner>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            .mono {\n                font-family: var(--mono-font);\n            }\n        `,\n    ],\n})\nexport class RepositoryAboutComponent extends BaseClass {\n    /** Whether the latest commit is being pulled on the server */\n    public pulling: boolean;\n\n    public commit = '';\n\n    public get item(): any {\n        return this._service.active_item as any;\n    }\n\n    public get local_url() {\n        return this.item.type === PlaceRepositoryType.Interface\n            ? `${location.origin}/${this.item.folder_name}/`\n            : `${location.hash}`;\n    }\n\n    public get repo_uri() {\n        return this.item?.uri.replace(/\\/[a-zA-Z0-9\\-\\.:]*@/, '/...@');\n    }\n\n    constructor(private _service: RepositoriesStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.commit = '';\n        this.subscription(\n            'commit',\n            this._service.commit.subscribe((_) => (this.commit = _))\n        );\n    }\n\n    /**\n     * Send request to server to pull the latest commit for the active repository\n     */\n    public async pullLatestCommit() {\n        this.pulling = true;\n        await this._service.pullLatestCommit();\n        this.pulling = false;\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceRepository } from '@placeos/ts-client';\n\nimport { RepositoriesStateService } from './repositories-state.service';\n\n@Component({\n    selector: 'repository-drivers',\n    template: `\n        <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@repoDriverHeader\">Available Drivers</h3>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(driver_list | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <td class=\"flex-1 p-2\" i18n=\"@@driverListname\">Name</td>\n                    <td class=\"w-12 p-2 h-10\"></td>\n                </div>\n                <div body class=\"overflow-y-auto\">\n                    <div table-row *ngFor=\"let item of driver_list | async\">\n                        <div class=\"flex-1 p-2\" [innerHTML]=\"item | driverFormat\"></div>\n                        <div class=\"w-12 flex justify-center\">\n                            <button mat-icon-button (click)=\"newDriver(item)\">\n                                <app-icon className=\"backoffice-plus\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <p i18n=\"@@driverListEmpty\">No drivers for repository</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@driverListLoading\">Loading driver list...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class RepositoryDriversComponent {\n    /** Whether driver list is loading */\n    public loading: boolean;\n    /** List of drivers available in the repository */\n    public readonly driver_list = this._service.driver_list;\n\n    public get item(): PlaceRepository {\n        return this._service.active_item as any;\n    }\n\n    public readonly newDriver = (d) => this._service.newDriver(d);\n\n    constructor(private _service: RepositoriesStateService) { }\n}\n","import { Routes } from '@angular/router';\n\nimport { RepositoriesComponent } from './repositories.component';\nimport { RepositoryAboutComponent } from './repository-about.component';\nimport { RepositoryDriversComponent } from './repository-drivers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: RepositoriesComponent,\n        children: [\n            { path: 'about', component: RepositoryAboutComponent },\n            { path: 'drivers', component: RepositoryDriversComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './repositories.routes';\n\nimport { RepositoriesComponent } from './repositories.component';\nimport { RepositoryAboutComponent } from './repository-about.component';\nimport { RepositoryDriversComponent } from './repository-drivers.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        RepositoriesComponent,\n        RepositoryAboutComponent,\n        RepositoryDriversComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppRepositoriesModule {}\n"],"sourceRoot":"webpack:///","file":"293.bcd0c246ebafc586.js"}