{"version":3,"file":"512.2e4e1034b4fc04ff.js","mappings":"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","names":["i0","tmp_0_0","ctx_r0","drivers_with_updates","total","$event","driver_r12","_r14","$implicit","ctx_r13","toggleDriver","id","ctx_r11","selected_drivers","includes","name","commit","update_info","DriverUpdateListModalComponent_main_5_ng_container_13_ng_container_1_tr_1_Template","drivers_r9","data","DriverUpdateListModalComponent_main_5_ng_container_13_ng_container_1_Template","_r8","_r17","ctx_r16","toggleAll","checked","DriverUpdateListModalComponent_main_5_ng_container_13_Template","DriverUpdateListModalComponent_main_5_ng_template_15_Template","ctx_r2","all_selected","some_selected","_r19","ctx_r18","updateDrivers","ctx_r3","length","ctx_r4","loading","DriverUpdateListModalComponent","this","driver_count","constructor","_dialog_ref","_change","BehaviorSubject","pipe","switchMap","queryDrivers","update_available","limit","catchError","of","map","_","sort","a","b","localeCompare","d","shareReplay","state","filter","push","_this","_asyncToGenerator","console","log","take","toPromise","_this2","disableClose","selected","Promise","all","driver","updateDriver","resolve","catch","notifyError","notifySuccess","close","next","Date","now","static","t","i1","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","DriverUpdateListModalComponent_span_3_Template","DriverUpdateListModalComponent_button_4_Template","DriverUpdateListModalComponent_main_5_Template","DriverUpdateListModalComponent_footer_7_Template","DriverUpdateListModalComponent_ng_template_8_Template","_r5","DriverStateService","active_item","_state","_dialog","_loading","_last_error","_poll","item","asObservable","last_error","updates_available","is_compiled","PlaceDriver","isDriverCompiled","_ref","err","json","compilation_output","_x","apply","arguments","retryWhen","delay","tap","modules","_ref2","details","queryModules","driver_id","_x2","subscribe","showUpdateList","open","viewError","error","getValue","ViewResponseModalComponent","title","content","openConfirmModal","icon","type","reason","success","recompileDriver","_this3","class","removeModule","device","_this4","extra","system","removeSystemModule","statusText","message","replaceItem","i2","Yz7","factory","ɵfac","providedIn","default_uri","ctx_r1","default_port","_r9","ctx_r8","viewErrors","_r11","ctx_r10","ctx_r5","settings","DriverAboutComponent","_service","compiled","compilation_error","i18n_0","$localize","DriverAboutComponent_div_2_Template","DriverAboutComponent_div_3_Template","DriverAboutComponent_mat_spinner_34_Template","DriverAboutComponent_button_36_Template","DriverAboutComponent_button_49_Template","DriverAboutComponent_section_55_Template","DriverAboutComponent_ng_template_56_Template","_c26","repository_id","module_name","created_at","updated_at","file_name","_r7","module_r6","connected","_c4","system_r16","display_name","DriverModulesComponent_div_5_div_8_i_2_Template","_r18","ctx_r17","loadSystems","DriverModulesComponent_div_5_div_8_div_14_Template","DriverModulesComponent_div_5_div_8_a_15_Template","ctx_r19","running","_c5","custom_name","systems","loading_systems","_c6","DriverModulesComponent_div_5_div_8_Template","DriverModulesComponent","AsyncHandler","super","filter$","combineLatest","filters","search","toLowerCase","mod","querySystems","module_id","features","DriverModulesComponent_div_5_Template","DriverModulesComponent_ng_template_7_Template","DriverModulesComponent_ng_template_9_Template","tmp_1_0","_r4","_r6","scroll","scrollTop","tab_list","ctx_r7","ROUTES","path","component","DriversComponent","extensions","extensionsForItem","debug_position","_debug","position","updateTabList","count","device_count","concat","_drivers","open_menu","newItem","create","ngOnInit","subscription","loadValues","query","offset","i3","DriversComponent_ng_container_10_Template","DriversComponent_button_11_Template","DriversComponent_app_debug_output_15_Template","DriversComponent_app_debug_output_16_Template","children","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppDriversModule","oAB","cJS","CommonModule","FormsModule","RouterModule","forChild","SharedContentModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/drivers/driver-update-list-modal.component.ts","./apps/backoffice/src/app/drivers/driver-state.service.ts","./apps/backoffice/src/app/drivers/driver-about.component.ts","./apps/backoffice/src/app/drivers/driver-devices.component.ts","./apps/backoffice/src/app/drivers/drivers.component.ts","./apps/backoffice/src/app/drivers/drivers.routes.ts","./apps/backoffice/src/app/drivers/drivers.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { queryDrivers, updateDriver } from '@placeos/ts-client';\nimport { BehaviorSubject, of } from 'rxjs';\nimport {\n    catchError,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'driver-update-list-modal',\n    template: `\n        <header class=\"border-b border-base-200\">\n            <h2>\n                Update Drivers\n                <span *ngIf=\"!loading\">\n                    - {{ (drivers_with_updates | async)?.total || 0 }}\n                    updates available\n                </span>\n            </h2>\n            <button btn icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"(drivers_with_updates | async) && !loading; else load_state\"\n            class=\"w-[80vw] max-w-[48rem] max-h-[65vh] overflow-auto\"\n        >\n            <table>\n                <thead class=\"text-left\">\n                    <tr>\n                        <th>\n                            <mat-checkbox\n                                [checked]=\"all_selected\"\n                                [indeterminate]=\"some_selected\"\n                                (change)=\"toggleAll($event.checked)\"\n                            ></mat-checkbox>\n                        </th>\n                        <th>Name</th>\n                        <th>Current Version</th>\n                        <th>Latest Version</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <ng-container\n                        *ngIf=\"drivers_with_updates | async as drivers\"\n                    >\n                        <ng-container\n                            *ngIf=\"drivers.total > 0; else empty_state\"\n                        >\n                            <tr *ngFor=\"let driver of drivers.data\">\n                                <td>\n                                    <mat-checkbox\n                                        [ngModel]=\"\n                                            selected_drivers.includes(driver.id)\n                                        \"\n                                        (ngModelChange)=\"\n                                            toggleDriver(driver.id, $event)\n                                        \"\n                                    ></mat-checkbox>\n                                </td>\n                                <td>{{ driver.name }}</td>\n                                <td>\n                                    <code [matTooltip]=\"driver.commit\">{{\n                                        driver.commit | slice: 0:9\n                                    }}</code>\n                                </td>\n                                <td>\n                                    <code [matTooltip]=\"driver.commit\">{{\n                                        driver.update_info.commit | slice: 0:9\n                                    }}</code>\n                                </td>\n                            </tr>\n                        </ng-container>\n                    </ng-container>\n                    <ng-template #empty_state>\n                        <tr>\n                            <td colspan=\"4\">No drivers require updating.</td>\n                        </tr>\n                    </ng-template>\n                </tbody>\n            </table>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"border-t border-base-200 p-2 flex justify-end space-x-2\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"selected_drivers.length <= 0\"\n                (click)=\"updateDrivers()\"\n            >\n                Update Selected Drivers ({{ selected_drivers.length }})\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div\n                class=\"w-[20rem] h-48 flex flex-col space-y-2 items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading || 'Loading drivers...' }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            th {\n                padding: 0.25rem 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DriverUpdateListModalComponent {\n    public loading = 'Loading drivers...';\n    public driver_count = 0;\n    private readonly _change = new BehaviorSubject(0);\n    public drivers_with_updates = this._change.pipe(\n        switchMap(() => {\n            this.loading = 'Loading drivers...';\n            return queryDrivers({\n                update_available: true,\n                limit: 1000,\n            }).pipe(catchError(() => of({ data: [], total: 0 })));\n        }),\n        map((_) => {\n            _.data = _.data.sort((a, b) => a.name.localeCompare(b.name));\n            this.selected_drivers = _.data.map((d) => d.id);\n            this.driver_count = _.total;\n            this.loading = '';\n            return _;\n        }),\n        shareReplay(1)\n    );\n    public selected_drivers = [];\n\n    public get all_selected() {\n        return this.selected_drivers.length === this.driver_count;\n    }\n\n    public get some_selected() {\n        return this.selected_drivers.length > 0 && !this.all_selected;\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<DriverUpdateListModalComponent>\n    ) {}\n\n    public toggleDriver(id: string, state: boolean) {\n        this.selected_drivers = this.selected_drivers.filter((_) => _ !== id);\n        if (state) this.selected_drivers.push(id);\n    }\n\n    public async toggleAll(state: boolean) {\n        console.log('Toggle all:', state);\n        if (!state) {\n            this.selected_drivers = [];\n            return;\n        }\n        this.selected_drivers = (\n            await this.drivers_with_updates.pipe(take(1)).toPromise()\n        ).data.map((_) => _.id);\n    }\n\n    public async updateDrivers() {\n        this.loading = 'Updating drivers...';\n        this._dialog_ref.disableClose = true;\n        const drivers = await this.drivers_with_updates\n            .pipe(take(1))\n            .toPromise();\n        const selected = drivers.data.filter((_) =>\n            this.selected_drivers.includes(_.id)\n        );\n        await Promise.all(\n            selected.map((driver) =>\n                driver.commit !== driver.update_info.commit\n                    ? updateDriver(driver.id, {\n                          ...driver,\n                          commit: driver.update_info.commit,\n                      }).toPromise()\n                    : Promise.resolve()\n            )\n        ).catch((_) => {\n            notifyError('Error updating drivers', _);\n            this.loading = '';\n            this._dialog_ref.disableClose = false;\n        });\n        notifySuccess(`Successfully updated ${selected.length} drivers`);\n        this.loading = '';\n        if (this.all_selected) this._dialog_ref.close();\n        else this._change.next(Date.now());\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    isDriverCompiled,\n    PlaceDriver,\n    PlaceModule,\n    queryDrivers,\n    queryModules,\n    recompileDriver,\n    removeSystemModule,\n    updateDriver,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, of, throwError } from 'rxjs';\nimport {\n    catchError,\n    delay,\n    filter,\n    map,\n    retryWhen,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\nimport { DriverUpdateListModalComponent } from './driver-update-list-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DriverStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _last_error = new BehaviorSubject<HashMap>(null);\n    private _poll = new BehaviorSubject(0);\n\n    public readonly item = this._state.item;\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly last_error = this._last_error.asObservable();\n\n    public readonly updates_available = this._poll.pipe(\n        switchMap(() =>\n            queryDrivers({ update_available: true, limit: 1 }).pipe(\n                catchError(() => of({ data: [], total: 0 }))\n            )\n        ),\n        map((d) => d.total > 1),\n        shareReplay(1)\n    );\n\n    public readonly is_compiled = this.item.pipe(\n        filter((d) => !!d && d instanceof PlaceDriver),\n        switchMap((driver) => isDriverCompiled(driver.id)),\n        catchError(async (_: Response) => {\n            const err = await _?.json();\n            this._last_error.next(err?.compilation_output || _);\n            if (!err?.compilation_output) throw _;\n        }),\n        retryWhen(delay(5000)),\n        tap((_) => (_ ? this._last_error.next(null) : '')),\n        shareReplay(1)\n    );\n\n    public readonly modules = this.item.pipe(\n        switchMap(async (item) => {\n            if (!item) return { data: [] };\n            this._loading.next(true);\n            const details = await queryModules({\n                driver_id: item.id,\n            }).toPromise();\n            this._loading.next(false);\n            return details;\n        }),\n        map((d) => d.data),\n        shareReplay()\n    );\n\n    public get active_item() {\n        return this._state.active_item;\n    }\n\n    constructor(private _state: ActiveItemService, private _dialog: MatDialog) {\n        this.item.subscribe(() => this._last_error.next(null));\n    }\n\n    public showUpdateList() {\n        this._dialog.open(DriverUpdateListModalComponent, {});\n    }\n\n    public viewError() {\n        const error = this._last_error.getValue();\n        if (!error) return;\n        this._dialog.open<ViewResponseModalComponent>(\n            ViewResponseModalComponent,\n            {\n                data: { title: 'Driver Compilation Error', content: error },\n            }\n        );\n    }\n\n    public async updateDriver() {\n        const item = this._state.active_item as PlaceDriver;\n        if (!item.update_available) return notifyError('No update available.');\n        const details = await openConfirmModal(\n            {\n                title: `Update Driver`,\n                content: `<p>Are you sure you want update this driver?</p><p>New driver code will be loaded and device settings will be updated.</p>`,\n                icon: { type: 'icon', content: 'update' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return details.close();\n        details.loading('Updating driver...');\n        let success = await updateDriver(item.id, {\n            ...item,\n            commit: item.update_info.commit,\n        })\n            .toPromise()\n            .catch((_) => null);\n        if (!success) {\n            details.close();\n            return notifyError('Failed to recompiled driver.');\n        }\n        details.loading('Recompiling driver...');\n        success = await recompileDriver(item.id)\n            .toPromise()\n            .catch((_) => null);\n        details.close();\n        if (!success) return notifyError('Failed to recompiled driver.');\n        notifySuccess('Successfully updated and recompiled driver.');\n    }\n\n    public async recompileDriver() {\n        const details = await openConfirmModal(\n            {\n                title: `Recompile Driver`,\n                content: `<p>Are you sure you want recompile this driver?</p><p>New driver code will be loaded and device settings will be updated.</p>`,\n                icon: { type: 'icon', class: 'backoffice-cycle' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return details.close();\n        details.loading('Recompiling driver...');\n        const success = await recompileDriver(this._state.active_item.id)\n            .toPromise()\n            .catch((_) => null);\n        details.close();\n        if (!success) return notifyError('Failed to recompiled driver.');\n        notifySuccess('Successfully recompiled driver.');\n    }\n\n    public async removeModule(device: PlaceModule) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove module?',\n                content: `Remove ${device.driver_id}?<br>`,\n                extra: [\n                    'error',\n                    'Note that all associated data be deleted immediatedly.',\n                ],\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        const system = await removeSystemModule(this.active_item.id, device.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id}. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed module.`);\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDriver } from '@placeos/ts-client';\nimport { DriverStateService } from './driver-state.service';\n\n@Component({\n    selector: 'driver-about',\n    template: `\n        <section class=\"mb-4 flex space-x-2\">\n            <div\n                class=\"rounded p-2 border border-base-200  space-y-2 min-w-[45%] flex-1\"\n            >\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.default_uri\"\n                >\n                    <label i18n=\"@@driverDefaultURILabel\">Default URI</label>\n                    <div class=\"value\">{{ item.default_uri }}</div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.default_port\"\n                >\n                    <label i18n=\"@@driverDefaultPortLabel\">\n                        Default Port\n                    </label>\n                    <div class=\"value\">{{ item.default_port }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsCommit\">Repository</label>\n                    <div class=\"value\">\n                        <a\n                            [routerLink]=\"[\n                                '/repositories',\n                                item.repository_id,\n                                'about'\n                            ]\"\n                            class=\"underline\"\n                        >\n                            {{ item.repository_id }}</a\n                        >\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsModuleName\">Module Name</label>\n                    <div class=\"value\">{{ item?.module_name }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverCreatedAtLabel\">Created</label>\n                    <div class=\"value\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverUpdatedAtLabel\">Updated</label>\n                    <div class=\"value\">\n                        {{ item.updated_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"rounded p-2 border border-base-200  space-y-2 min-w-[45%] flex-1 flex flex-col\"\n            >\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsCompiled\">Compiled</label>\n                    <div class=\"value\">\n                        {{ (compiled | async) ? 'true' : 'false' }}\n                    </div>\n                    <mat-spinner\n                        diameter=\"24\"\n                        *ngIf=\"!(compiled | async)\"\n                    ></mat-spinner>\n                    <button\n                        btn\n                        *ngIf=\"compilation_error | async\"\n                        (click)=\"viewErrors()\"\n                    >\n                        View Errors\n                    </button>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsCommit\">Commit</label>\n                    <code>{{ item.commit }}</code>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <label i18n=\"@@driverDetailsFileName\">File Name</label>\n                    <div\n                        class=\"font-mono text-sm truncate\"\n                        [title]=\"item.file_name\"\n                    >\n                        {{ item.file_name }}\n                    </div>\n                </div>\n                <div class=\"flex-1\"></div>\n                <button\n                    btn\n                    (click)=\"updateDriver()\"\n                    i18n=\"@@driverReloadAction\"\n                    class=\"w-full\"\n                    *ngIf=\"item.update_available\"\n                >\n                    Update Driver\n                </button>\n                <button\n                    btn\n                    (click)=\"recompileDriver()\"\n                    i18n=\"@@driverReloadAction\"\n                    class=\"w-full\"\n                >\n                    Recompile Driver\n                </button>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">\n            Settings\n        </header>\n        <section *ngIf=\"item.settings; else load_state\">\n            <a-settings-form\n                [merge]=\"true\"\n                [id]=\"item.id\"\n                [settings]=\"item.settings\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@driverLoadingLabel\">Loading driver settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            label {\n                width: 6rem;\n            }\n        `,\n    ],\n})\nexport class DriverAboutComponent {\n    public readonly compiled = this._service.is_compiled;\n    public readonly compilation_error = this._service.last_error;\n\n    public readonly recompileDriver = () => this._service.recompileDriver();\n    public readonly updateDriver = () => this._service.updateDriver();\n    public readonly viewErrors = () => this._service.viewError();\n\n    public get item(): PlaceDriver {\n        return (this._service.active_item || {}) as any;\n    }\n\n    constructor(private _service: DriverStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AsyncHandler } from 'apps/backoffice/src/app/common/async-handler.class';\nimport { DriverStateService } from './driver-state.service';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { PlaceModule, PlaceSystem, querySystems } from '@placeos/ts-client';\n\n@Component({\n    selector: 'driver-devices',\n    template: `\n        <section class=\"flex items-center mb-4\">\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter Devices...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(modules | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"w-12 p-2\">State</div>\n                    <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">Name</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body class=\"overflow-y-auto\">\n                    <div\n                        table-row\n                        *ngFor=\"let module of modules | async; let i = index\"\n                    >\n                        <div class=\"w-12 p-2 flex items-center justify-center\">\n                            <i\n                                *ngIf=\"module.system\"\n                                binding\n                                [(model)]=\"module.connected\"\n                                [sys]=\"module.system.id\"\n                                [mod]=\"module\"\n                                bind=\"connected\"\n                            ></i>\n                            <div\n                                class=\"h-2 w-2 rounded-full bg-base-content\"\n                                [class.bg-error]=\"\n                                    module.running && !module.connected\n                                \"\n                                [class.bg-success]=\"\n                                    module.running && module.connected\n                                \"\n                            ></div>\n                        </div>\n                        <div\n                            flex\n                            class=\"flex-1 p-2 underline\"\n                            i18n=\"@@nameLabel\"\n                        >\n                            <a [routerLink]=\"['/modules', module.id]\">\n                                {{ module.custom_name || module.name }}\n                            </a>\n                        </div>\n                        <div class=\"w-24 p-2\">\n                            <button\n                                btn\n                                icon\n                                matTooltip=\"View Systems\"\n                                [matMenuTriggerFor]=\"menu\"\n                                (click)=\"loadSystems(module)\"\n                            >\n                                <app-icon className=\"backoffice-eye\"></app-icon>\n                            </button>\n                            <mat-menu #menu=\"matMenu\">\n                                <div\n                                    class=\"flex items-center justify-center px-2 pb-2 opacity-70 border-b border-base-200 text-sm\"\n                                >\n                                    {{ systems[module.id]?.length }} System(s)\n                                </div>\n                                <div\n                                    *ngIf=\"loading_systems\"\n                                    class=\"flex items-center space-x-2 p-2 text-sm\"\n                                >\n                                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                                    <span>Loading systems...</span>\n                                </div>\n                                <a\n                                    mat-menu-item\n                                    *ngFor=\"\n                                        let system of systems[module.id] || []\n                                    \"\n                                    class=\"leading-tight\"\n                                    [routerLink]=\"['/systems', system.id]\"\n                                >\n                                    <div\n                                        class=\"flex flex-col justify-center px-2 h-full\"\n                                    >\n                                        <div class=\"text-base\">\n                                            {{\n                                                system.display_name ||\n                                                    system.name\n                                            }}\n                                        </div>\n                                        <div class=\"text-xs opacity-60\">\n                                            {{ system.id }}\n                                        </div>\n                                    </div>\n                                </a>\n                            </mat-menu>\n                            <button\n                                icon\n                                btn\n                                icon\n                                (click)=\"removeModule(module)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading modules...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No modules with driver</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 28rem;\n            }\n        `,\n    ],\n})\nexport class DriverModulesComponent extends AsyncHandler {\n    public loading_systems = false;\n    /** Subject holding the value of the search */\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** Whether systems are being loaded */\n    public readonly loading = this._service.loading;\n    /** Currently active driver */\n    public readonly item = this._service.item;\n    /** List of systems associated with modules */\n    public readonly systems: HashMap<PlaceSystem[]> = {};\n    /** Whether systems are being loaded */\n    /** List of modules */\n    public readonly modules = combineLatest([\n        this.filter$,\n        this._service.modules,\n    ]).pipe(\n        map((details) => {\n            const [filters, modules] = details;\n            const search = filters.toLowerCase();\n            return filters\n                ? modules.filter(\n                      (mod) =>\n                          mod.name.toLowerCase().includes(search) ||\n                          mod.custom_name.toLowerCase().includes(search)\n                  )\n                : modules;\n        })\n    );\n\n    public readonly removeModule = (d) => this._service.removeModule(d);\n\n    constructor(private _service: DriverStateService) {\n        super();\n    }\n\n    public async loadSystems(mod: PlaceModule) {\n        this.loading_systems = true;\n        const systems = await querySystems({ module_id: mod.id })\n            .pipe(map(({ data }) => data))\n            .toPromise();\n        this.systems[mod.id] = systems || [];\n        this.loading_systems = false;\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDriver, queryModules } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport { extensionsForItem } from '../common/api';\nimport { AsyncHandler } from '../common/async-handler.class';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { ActiveItemService } from '../common/item.service';\nimport { DriverStateService } from './driver-state.service';\n\n@Component({\n    selector: 'new-drivers-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-base-200  bg-base-100 \"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <div class=\"flex flex-col h-full flex-1 overflow-hidden w-px\">\n                <div class=\"flex flex-1 h-px\">\n                    <item-sidebar\n                        class=\"hidden sm:block\"\n                        [route]=\"name\"\n                        title=\"Drivers\"\n                    ></item-sidebar>\n                    <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                        <item-selection\n                            class=\"z-20 sm:hidden\"\n                            [route]=\"name\"\n                            title=\"Drivers\"\n                        >\n                            <button\n                                btn\n                                icon\n                                class=\"sm:hidden mr-2\"\n                                (click)=\"open_menu = true\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-menu\"\n                                ></app-icon>\n                            </button>\n                        </item-selection>\n                        <div class=\"flex flex-col flex-1 h-1/2\">\n                            <ng-container *ngIf=\"item?.id\">\n                                <item-details\n                                    [can_edit]=\"true\"\n                                    [item]=\"item\"\n                                    type=\"Driver\"\n                                ></item-details>\n                                <item-tablist\n                                    [base]=\"name\"\n                                    [tabs]=\"tab_list\"\n                                    [scrolled]=\"scroll > 0\"\n                                    class=\"z-10\"\n                                ></item-tablist>\n                                <div\n                                    #el\n                                    class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                                    (scroll)=\"scroll = el.scrollTop\"\n                                >\n                                    <router-outlet></router-outlet>\n                                </div>\n                            </ng-container>\n                        </div>\n                        <button\n                            class=\"absolute bottom-16 left-1 sm:-left-8 w-10 h-10 flex items-center justify-center bg-secondary rounded-lg shadow z-30 text-secondary-content\"\n                            matTooltip=\"Update Drivers\"\n                            matTooltipPosition=\"right\"\n                            matRipple\n                            *ngIf=\"updates_available | async\"\n                            (click)=\"showUpdateList()\"\n                        >\n                            <app-icon class=\"text-3xl\">update</app-icon>\n                        </button>\n                        <button\n                            class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-secondary rounded-lg shadow z-30 text-secondary-content\"\n                            matTooltip=\"New driver\"\n                            matTooltipPosition=\"right\"\n                            matRipple\n                            (click)=\"newItem()\"\n                        >\n                            <app-icon\n                                [className]=\"'backoffice-plus'\"\n                                class=\"text-3xl\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n                <app-debug-output\n                    below\n                    *ngIf=\"debug_position === 'below'\"\n                ></app-debug-output>\n            </div>\n            <app-debug-output\n                side\n                *ngIf=\"debug_position === 'side'\"\n                class=\"h-full max-w-[30rem]\"\n            ></app-debug-output>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DriversComponent extends AsyncHandler {\n    public readonly name = 'drivers';\n\n    public open_menu = false;\n    public device_count: number;\n    public tab_list = [];\n    public updates_available = this._drivers.updates_available;\n\n    public readonly showUpdateList = () => this._drivers.showUpdateList();\n\n    public readonly newItem = () => this._service.create();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public get debug_position() {\n        return this._debug.position;\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'modules',\n                name: 'Modules',\n                count: this.device_count ?? '?',\n                icon: { class: 'backoffice-tablet' },\n            },\n            {\n                id: 'history',\n                name: 'Settings History',\n                icon: { class: 'backoffice-clock' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: ActiveItemService,\n        private _drivers: DriverStateService,\n        private _debug: PlaceDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.device_count = null;\n                this.updateTabList();\n                this.loadValues(item as any);\n            })\n        );\n    }\n\n    protected async loadValues(item: PlaceDriver) {\n        if (!item) return;\n        const query: any = { offset: 0, limit: 1, driver_id: item.id };\n        this.device_count = await queryModules(query)\n            .pipe(map(({ total }) => total))\n            .toPromise()\n            .catch((_) => 0);\n        this.updateTabList();\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { DriverAboutComponent } from './driver-about.component';\nimport { DriverModulesComponent } from './driver-devices.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\nimport { DriversComponent } from './drivers.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: DriversComponent,\n        children: [\n            { path: 'about', component: DriverAboutComponent },\n            { path: 'modules', component: DriverModulesComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './drivers.routes';\n\nimport { DriverAboutComponent } from './driver-about.component';\nimport { DriverModulesComponent } from './driver-devices.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { DriversComponent } from './drivers.component';\nimport { DriverUpdateListModalComponent } from './driver-update-list-modal.component';\n\n@NgModule({\n    declarations: [\n        DriverAboutComponent,\n        DriverModulesComponent,\n        DriversComponent,\n        DriverUpdateListModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppDriversModule {}\n"],"x_google_ignoreList":[]}