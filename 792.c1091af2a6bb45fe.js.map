{"version":3,"file":"792.c1091af2a6bb45fe.js","mappings":"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","names":["interval","period","scheduler","async","isNumeric","schedule","Observable","subscriber","add","dispatch","counter","state","next","this","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","Math","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","merge","ngOnDestroy","instance","static","ɵfac","t","i0","DOCUMENT","ɵprov","token","factory","providedIn","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","_parentDrag","ɵdir","selectors","hostAttrs","inputs","standalone","features","provide","useExisting","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","data","CDK_DRAG_PREVIEW","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","EventEmitter","subscription","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","closest","_getBoundaryElement","boundary","ref","dir","coerceNumberProperty","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","startWith","tap","childHandleElements","switchMap","handleInstance","dragRef","i1$1","contentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","outputs","exportAs","CDK_DROP_LIST_GROUP","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","DragDropModule","ɵmod","ɵinj","providers","imports","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/_esm2015/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"x_google_ignoreList":[0,1]}