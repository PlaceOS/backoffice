{"version":3,"file":"396.fa0732b83c71aeba.js","mappings":"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","names":["SystemStateService","BaseClass","constructor","_state","_debug","_dialog","super","_this","this","item","BehaviorSubject","active_item$","pipe","debounceTime","switchMap","PlaceSystem","systemSettings","id","combineLatest","_change","_","_loading","next","getValue","settings","details","Promise","all","listSystemTriggers","map","d","total","toPromise","catch","listMetadata","length","triggers","metadata","devices","modules","zones","queryModules","control_system_id","complete","limit","i","data","forEach","connected","undefined","sort","a","b","indexOf","_modules","shareReplay","changed","reduce","mapping","device","isListening","mod","custom_name","name","calculateModuleIndex","listSystemZones","asObservable","active_item","startSystem","_this2","confirm","title","content","icon","type","class","reason","loading","err","notifyError","JSON","stringify","response","message","notifySuccess","close","stopSystem","_this3","toggleModuleDebug","unbind","bind","newModule","_this4","edit","PlaceModule","system","joinModule","editModule","_this5","Date","now","selectTrigger","ref","_this6","open","SelectItemModalComponent","service_name","query_fn","queryTriggers","q","resp","race","componentInstance","event","first","afterClosed","t","addTrigger","trigger","addSystemTrigger","_this7","enabled","important","trigger_id","timeout","editTrigger","_this8","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","save","updateTrigger","external_save","url","apiEndpoint","trig","put","removeTrigger","_this9","removeSystemTrigger","statusText","reorderModules","fst","snd","_this10","list","moveItemInArray","updateSystem","replaceItem","reorderZones","order","_this11","addSystemModule","_this12","showSystem","removeModule","_this13","driver_id","removeSystemModule","reloadModule","_this14","recompileDriver","driver","addZones","zone_list","unique","_this15","removeZone","zone","_this16","filter","z","toggleModulePower","running","stopModule","startModule","_this17","viewDetails","ViewResponseModalComponent","openConfirmModal","_this18","i0","factory","SystemAboutComponent","_service","associated_settings","selectors","$localize","ctx","$event","SystemModulesComponent","debug_state","module_bindings","extra","role","PlaceDriverRole","driver_type","handleContextEvent","power","viewState","loadModule","reload","showModule","k","hasOwnProperty","getModules","ViewModuleStateModalComponent","module","then","drop","previousIndex","currentIndex","addModule","new_module","SystemTriggersComponent","filter$","temp_trigger","temp","search","toLowerCase","includes","copyToClipboard","location","origin","webhook_secret","notifyInfo","updateComparisons","comparisons","trigger_state","key","conditions","SystemZonesComponent","pending_zones","zone_order","pending","queryZones","take","every","idx","order_changed","console","log","splice","SystemMetadataComponent","ROUTES","path","component","SystemsComponent","_item","create","bulkAdd","extensions","extensionsForItem","debug_position","position","updateTabList","counts","tab_list","count","concat","ngOnInit","subscription","subscribe","children","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppSystemsModule","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule","DragDropModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/systems/system-state.service.ts","./apps/backoffice/src/app/systems/system-about.component.ts","./apps/backoffice/src/app/systems/system-modules.component.ts","./apps/backoffice/src/app/systems/system-triggers.component.ts","./apps/backoffice/src/app/systems/system-zones.component.ts","./apps/backoffice/src/app/systems/system-metadata.component.ts","./apps/backoffice/src/app/systems/systems.component.ts","./apps/backoffice/src/app/systems/systems.routes.ts","./apps/backoffice/src/app/systems/systems.module.ts"],"sourcesContent":["import { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addSystemModule,\n    addSystemTrigger,\n    apiEndpoint,\n    listSystemTriggers,\n    listSystemZones,\n    PlaceModule,\n    PlaceSystem,\n    PlaceTrigger,\n    PlaceZone,\n    put,\n    queryModules,\n    queryTriggers,\n    recompileDriver,\n    removeSystemModule,\n    removeSystemTrigger,\n    showMetadata,\n    startModule,\n    startSystem,\n    stopModule,\n    stopSystem,\n    systemSettings,\n    updateSystem,\n    updateTrigger,\n    listMetadata,\n    showSystem,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounce,\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { calculateModuleIndex } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { openConfirmModal, unique } from '../common/general';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { ConfirmModalData } from '../overlays/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from '../overlays/item-modal/item-modal.component';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData,\n} from '../overlays/select-item-modal/select-item-modal.component';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SystemStateService extends BaseClass {\n    /** Observable of the active item */\n    public readonly item = this._state.item;\n\n    private _loading = new BehaviorSubject<HashMap<boolean>>({});\n    private _modules = new BehaviorSubject<PlaceModule[]>([]);\n    private _change = new BehaviorSubject<number>(0);\n    /** Observable for associated settings of the active item */\n    public readonly associated_settings = this._state.active_item$.pipe(\n        debounceTime(300),\n        switchMap((item: PlaceSystem) => {\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            return systemSettings(item.id);\n        })\n    );\n    /** Observable of the counts of the active item */\n    public readonly counts = combineLatest([\n        this._state.active_item$,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(async (_) => {\n            const [item] = _;\n            if (!item || !(item instanceof PlaceSystem)) return {};\n            this._loading.next({\n                ...this._loading.getValue(),\n                settings: true,\n            });\n            const details = await Promise.all([\n                listSystemTriggers(item.id)\n                    .pipe(map((d) => d.total))\n                    .toPromise()\n                    .catch((_) => 0),\n                listMetadata(item.id)\n                    .pipe(map((d) => d.length))\n                    .toPromise()\n                    .catch((_) => 0),\n            ]);\n            const [triggers, metadata] = details;\n            this._loading.next({\n                ...this._loading.getValue(),\n                settings: false,\n            });\n            return {\n                devices: (item as any).modules.length,\n                zones: (item as any).zones.length,\n                triggers,\n                metadata,\n            };\n        })\n    );\n    /** Observable for modules associated with system */\n    public readonly modules = combineLatest([this.item, this._change]).pipe(\n        debounceTime(500),\n        switchMap(async (_) => {\n            const item = _[0];\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                modules: true,\n            });\n            const modules = await queryModules({\n                control_system_id: item.id,\n                complete: true,\n                limit: 200,\n            } as any)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            modules.forEach((_) => ((_ as any).connected = undefined));\n            this._loading.next({\n                ...this._loading.getValue(),\n                modules: false,\n            });\n            modules.sort((a, b) => {\n                const index_a =\n                    item.modules.indexOf(a.id) > -1\n                        ? item.modules.indexOf(a.id)\n                        : 9999;\n                const index_b =\n                    item.modules.indexOf(b.id) > -1\n                        ? item.modules.indexOf(b.id)\n                        : 9999;\n                return index_a - index_b;\n            });\n            this._modules.next(modules);\n            return modules;\n        }),\n        shareReplay(1)\n    );\n    /** Observable for debug state of the active modules */\n    public readonly debug_state = combineLatest([\n        this.modules,\n        this._debug.changed,\n    ]).pipe(\n        map(([modules]) => {\n            return modules.reduce((mapping, device) => {\n                mapping[device.id] = this._debug.isListening(device);\n                return mapping;\n            }, {});\n        })\n    );\n    /** Observable for module bindings */\n    public readonly module_bindings = this.modules.pipe(\n        map((modules) =>\n            modules.map(\n                (mod) =>\n                    `${\n                        mod.custom_name || mod.name || 'Blank'\n                    }_${calculateModuleIndex(modules, mod)}`\n            )\n        ),\n        shareReplay()\n    );\n    /** Observable for zones associated with system */\n    public readonly zones = this._state.item.pipe(\n        switchMap(async (item: PlaceSystem) => {\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                zones: true,\n            });\n            const zones = await listSystemZones(item.id)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            zones.sort(\n                (a, b) => item.zones.indexOf(a.id) - item.zones.indexOf(b.id)\n            );\n            this._loading.next({\n                ...this._loading.getValue(),\n                zones: false,\n            });\n            return zones;\n        }),\n        shareReplay()\n    );\n    /** Observable for triggers associated with system */\n    public readonly triggers = combineLatest([this.item, this._change]).pipe(\n        switchMap(async (_) => {\n            const [item] = _;\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                triggers: true,\n            });\n            const triggers = await listSystemTriggers(item.id)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            this._loading.next({\n                ...this._loading.getValue(),\n                triggers: false,\n            });\n            return triggers;\n        }),\n        shareReplay()\n    );\n    /** Observable of the active item */\n    public readonly loading = this._loading.asObservable();\n\n    public readonly getModules = () => this._modules.getValue();\n    /** Observable of the active item */\n    public get active_item(): PlaceSystem {\n        return this._state.active_item || ({} as any);\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _debug: PlaceDebugService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public async startSystem() {\n        const details = await this.confirm({\n            title: 'Start system?',\n            content: `Are you sure you want to start this system?<br>All stopped modules within the system will boot up.`,\n            icon: { type: 'icon', class: 'backoffice-controller-play' },\n        });\n        if (details && details.reason) {\n            details.loading('Starting system...');\n            const resp = await startSystem(this.active_item.id)\n                .toPromise()\n                .catch((err) => {\n                    notifyError(\n                        `Failed to start system: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                    return err;\n                });\n            if (!resp) notifySuccess(`Successfully started system`);\n            details.close();\n        }\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public async stopSystem() {\n        const details = await this.confirm({\n            title: 'Stop system?',\n            content: `Are you sure you want to stop this system?<br>All modules will be immediately stopped regardless of any other systems they may be in.`,\n            icon: { type: 'icon', class: 'backoffice-controller-stop' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Stopping system...');\n        const resp = await stopSystem(this.active_item.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to stop system: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        if (!resp) notifySuccess(`Successfully stopped system`);\n        details.close();\n    }\n\n    public toggleModuleDebug(device: PlaceModule) {\n        if (!device) return;\n        if (this._debug.isListening(device)) {\n            this._debug.unbind(device);\n        } else {\n            this._debug.bind(\n                device,\n                `${\n                    device.custom_name || device.name || 'Blank'\n                }_${calculateModuleIndex(this._modules.getValue(), device)}`\n            );\n        }\n    }\n\n    public async newModule() {\n        const mod = await this._state\n            .edit(\n                new PlaceModule({\n                    system: this.active_item,\n                    control_system_id: this.active_item.id,\n                })\n            )\n            .catch((_) => null);\n        if (!mod) return;\n        this.joinModule(mod.id);\n    }\n\n    public async editModule(device: PlaceModule) {\n        await this._state.edit(device).catch((_) => null);\n        this._change.next(Date.now());\n    }\n\n    public async selectTrigger() {\n        const ref = this._dialog.open<\n            SelectItemModalComponent,\n            SelectItemModalData\n        >(SelectItemModalComponent, {\n            data: {\n                service_name: 'Triggers',\n                query_fn: (_) =>\n                    queryTriggers({ q: _ }).pipe(map((resp) => resp.data)),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'action'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details || !details.reason) return ref.close();\n        const t = await this.addTrigger(ref.componentInstance.item);\n        ref.close();\n        this._change.next(Date.now());\n        return t;\n    }\n\n    public async addTrigger(trigger: PlaceTrigger) {\n        const t = await addSystemTrigger(this.active_item.id, {\n            control_system_id: this.active_item.id,\n            enabled: true,\n            important: false,\n            trigger_id: trigger.id,\n        } as any).toPromise();\n        this.timeout('change', () => this._change.next(Date.now()));\n        return t;\n    }\n\n    public async editTrigger(trigger: PlaceTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: trigger,\n                    name: 'Trigger',\n                    save: (item) => updateTrigger(item.id, item),\n                    external_save: true,\n                },\n            });\n            const details = await Promise.race([\n                ref.componentInstance.event\n                    .pipe(first((_) => _.reason === 'action'))\n                    .toPromise(),\n                ref.afterClosed().toPromise(),\n            ]);\n            if (!details || !details.reason) return;\n            ref.componentInstance.loading = 'Saving trigger settings...';\n\n            const url = `${apiEndpoint()}/systems/${\n                this.active_item.id\n            }/triggers/${trigger.id}`;\n            const trig = await put(url, details.metadata)\n                .toPromise()\n                .catch((err) => {\n                    notifyError(\n                        `Error updating trigger settings. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                    throw err;\n                });\n            ref.close();\n            if (!trig) return trigger;\n            notifySuccess(`Successfully updated trigger settings.`);\n            this.timeout('change', () => this._change.next(Date.now()));\n            return trig;\n        }\n    }\n\n    public async removeTrigger(trigger: PlaceTrigger) {\n        const details = await this.confirm({\n            title: `Remove trigger`,\n            content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        await removeSystemTrigger(this.active_item.id, trigger.id)\n            .toPromise()\n            .catch((err) => {\n                details.close();\n                notifyError(\n                    `Error removing trigger ${trigger.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        details.close();\n        notifySuccess(`Successfully removed trigger from system.`);\n        this._change.next(Date.now());\n    }\n\n    public async reorderModules(fst: number, snd: number) {\n        const details = await this.confirm({\n            title: 'Change order?',\n            content: `Are you sure you want to change the module priority?<br>Settings will be updated immediately for the system.`,\n            icon: { type: 'icon', class: 'backoffice-layers' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Updating module order...');\n        const list: string[] = [...this.active_item.modules];\n        moveItemInArray(list, fst, snd);\n        const resp = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            modules: list,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to reorder system modules: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        details.close();\n        if (resp instanceof PlaceSystem) {\n            notifySuccess(`Successfully reordered system modules.`);\n            this._state.replaceItem(resp);\n        }\n    }\n\n    public async reorderZones(order: string[]) {\n        if (order.length !== this.active_item.zones.length) return;\n        const details = await this.confirm({\n            title: 'Change order?',\n            content: `Are you sure you want to change the zone priority?<br>Settings will be updated immediately for the system.`,\n            icon: { type: 'icon', class: 'backoffice-layers' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Updating zone order...');\n        const resp = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones: order,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to reorder system zones: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        if (resp instanceof PlaceSystem) {\n            notifySuccess(`Successfully reordered system zones.`);\n            this._state.replaceItem(resp);\n        }\n        details.close();\n    }\n\n    /**\n     * Associate module with the active system\n     * @param id ID of the module to associate with the active system\n     */\n    public async joinModule(id: string) {\n        await addSystemModule(this.active_item.id, id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error adding module ${id} to system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        this.timeout('join', async () => {\n            const system = await showSystem(this.active_item.id).toPromise();\n            if (!system) return;\n            this._state.replaceItem(system);\n            notifySuccess(`Successfully added module to system.`);\n            this._change.next(Date.now());\n        });\n    }\n\n    /**\n     * Remove associated module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async removeModule(device: PlaceModule) {\n        const details = await this.confirm({\n            title: 'Remove module?',\n            content: `Remove ${device.driver_id} from this system?<br>If this is not used elsewhere the associated data will be removed immediately.`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        const system = await removeSystemModule(this.active_item.id, device.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed module from system.`);\n    }\n\n    /**\n     * Reload module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async reloadModule(device: PlaceModule) {\n        const details = await this.confirm({\n            title: 'Recompile module?',\n            content: `New driver code will be loaded and the device settings will be reloaded.`,\n            icon: { type: 'icon', class: 'backoffice-install' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Recompiling and reloading driver...');\n        await recompileDriver(device.driver?.id || device.driver_id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        notifySuccess(`Successfully removed module from system.`);\n        details.close();\n    }\n\n    /**\n     * Add list of zones to the system\n     * @param zones List of zones to add\n     */\n    public async addZones(zone_list: PlaceZone[]) {\n        const zones = unique([\n            ...this.active_item.zones,\n            ...zone_list.map((_) => _.id),\n        ]);\n        const system = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error adding ${\n                        zone_list.length\n                    } zone(s) to system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully added zone to system.`);\n    }\n\n    /**\n     * Remove associated module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async removeZone(zone: PlaceZone) {\n        const details = await this.confirm({\n            title: 'Remove zone?',\n            content: `<p>Are you sure you want remove zone \"${zone.name}\" from the system?</p>Configuration will be updated immediately.`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        const zones = this.active_item.zones.filter((z) => z !== zone.id);\n        const system = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing zone ${zone.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed zone from system.`);\n    }\n\n    /**\n     * Toggle the power state\n     * @param device Module to toggle the power state\n     */\n    public async toggleModulePower(device: PlaceModule) {\n        const method = device.running ? stopModule : startModule;\n        await method(device.id)\n            .toPromise()\n            .catch((err) => {\n                if (typeof err === 'string' && err.length < 64) {\n                    notifyError(err);\n                } else {\n                    notifyError(\n                        `Failed to ${\n                            device.running ? 'stop' : 'start'\n                        } module '${device.id}'.\\nView Error?`,\n                        'View',\n                        () => this.viewDetails(err)\n                    );\n                }\n                throw err;\n            });\n        notifySuccess(\n            `Module successfully ${device.running ? 'stopped' : 'started'}`\n        );\n        (device as any).running = !device.running;\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(\n            ViewResponseModalComponent,\n            {\n                data: { content },\n            }\n        );\n    }\n\n    private async confirm(data: ConfirmModalData) {\n        return openConfirmModal(data, this._dialog);\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-about',\n    template: `\n        <section class=\"flex items-center space-x-2 mb-4\">\n            <div\n                class=\"rounded p-2 border border-gray-200 dark:border-neutral-500 space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item?.support_url\"\n                >\n                    <label i18n=\"@@systemUrlLabel\">Support URL:</label>\n                    <div class=\"value\">\n                        <a\n                            class=\"underline\"\n                            [href]=\"item?.support_url\"\n                            target=\"_blank\"\n                            >{{ item?.support_url }}</a\n                        >\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.bookable\">\n                    <label i18n=\"@@systemBookableLabel\">Bookable Room:</label>\n                    <div class=\"value\">{{ item?.bookable ? 'Yes' : 'No' }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.bookable\">\n                    <label i18n=\"@@systemPublicLabel\">\n                        Publicly Available:\n                    </label>\n                    <div class=\"value\">{{ item?.public ? 'Yes' : 'No' }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.code\">\n                    <label i18n=\"@@codeLabel\">Code:&nbsp;</label>\n                    <p>{{ item?.code }}</p>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.email\">\n                    <label i18n=\"@@emailLabel\">Email:&nbsp;</label>\n                    <a\n                        *ngIf=\"item?.email\"\n                        class=\"underline select-all truncate\"\n                        [href]=\"'mailto:' + item?.email\"\n                        target=\"_blank\"\n                        >{{ item?.email }}</a\n                    >\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.capacity\">\n                    <label i18n=\"@@capacityLabel\">Capacity:</label>\n                    <div class=\"value\">{{ item?.capacity }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.map_id\">\n                    <label i18n=\"@@mapIdLabel\">Map ID:</label>\n                    <div class=\"value mono\">{{ item?.map_id }}</div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item?.installed_ui_devices\"\n                >\n                    <label i18n=\"@@systemPanelCountLabel\"\n                        >Installed Touch Panels:</label\n                    >\n                    <div class=\"value\">{{ item?.installed_ui_devices }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item?.timezone\">\n                    <label i18n=\"@@systemTimezoneLabel\">Timezone:</label>\n                    <div class=\"value\">{{ item?.timezone }}</div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item?.created_at\"\n                >\n                    <label i18n=\"@@systemCreatedAtLabel\">Created:</label>\n                    <div class=\"value\">\n                        {{ item?.created_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item?.updated_at\"\n                >\n                    <label i18n=\"@systemUpdatedAtLabel\">Updated:</label>\n                    <div class=\"value\">\n                        {{ item?.updated_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"rounded p-2 border border-gray-200 dark:border-neutral-500 space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <h3 class=\"w-full text-center\">System Controls</h3>\n                <button\n                    mat-button\n                    start\n                    class=\"w-full\"\n                    (click)=\"start()\"\n                    i18n=\"@@systemStartAction\"\n                >\n                    Start System\n                </button>\n                <button\n                    mat-button\n                    stop\n                    class=\"w-full\"\n                    (click)=\"stop()\"\n                    i18n=\"@@systemStopAction\"\n                >\n                    Stop System\n                </button>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">\n            Settings\n        </header>\n        <section *ngIf=\"item?.settings && other_settings; else load_state\">\n            <a-settings-form\n                [id]=\"item?.id\"\n                [merge]=\"true\"\n                [settings]=\"item?.settings\"\n                [merge_settings]=\"(other_settings | async) || []\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"32\"></mat-spinner>\n                <p i18n=\"@@systemLoadingLabel\">Loading system settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            button {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SystemAboutComponent {\n    /** List of settings for associated modules, drivers and zones */\n    public readonly other_settings = this._service.associated_settings;\n\n    public readonly start = () => this._service.startSystem();\n    public readonly stop = () => this._service.stopSystem();\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: SystemStateService) {}\n}\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    loadModule,\n    PlaceDriverRole,\n    PlaceModule,\n    PlaceSystem,\n    queryModules,\n    showModule,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifyError,\n    notifySuccess,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { AppLink, HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    ModuleStateModalData,\n    ViewModuleStateModalComponent,\n} from 'apps/backoffice/src/app/overlays/view-module-state/view-module-state.component';\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-modules',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <section add-module class=\"flex space-x-2 flex-wrap mb-2\">\n                <item-search-field\n                    class=\"flex-grow-1 w-full sm:flex-1 sm:w-auto h-12\"\n                    name=\"module\"\n                    [query_fn]=\"query_fn\"\n                    [exclude]=\"exclude_fn\"\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"new_module = $event.id\"\n                ></item-search-field>\n                <button\n                    mat-button\n                    class=\"flex-1 w-40 sm:w-32 sm:flex-none h-11\"\n                    [disabled]=\"!new_module\"\n                    (click)=\"addModule()\"\n                    i18n=\"@@addExistingAction\"\n                >\n                    Add existing\n                </button>\n                <button\n                    mat-button\n                    class=\"flex-1 w-40 sm:w-32 sm:flex-none h-11\"\n                    (click)=\"newModule()\"\n                    i18n=\"@@newAction\"\n                >\n                    Add new\n                </button>\n            </section>\n            <section\n                exec\n                *ngIf=\"item.id && item.modules && !hide_exec\"\n                class=\"mb-2\"\n            >\n                <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@execHeader\">\n                    Execute command\n                </h3>\n                <execute-method-field [system]=\"item\"></execute-method-field>\n            </section>\n            <section device-list>\n                <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@moduleListHeader\">\n                    Module List\n                </h3>\n                <ng-container\n                    *ngIf=\"!(loading | async).modules; else load_state\"\n                >\n                    <div\n                        role=\"table\"\n                        class=\"overflow-x-auto min-w-[60rem]\"\n                        *ngIf=\"(modules | async)?.length; else empty_state\"\n                    >\n                        <div table-head class=\"text-sm\">\n                            <div class=\"w-10 p-2\"></div>\n                            <div class=\"w-12 p-2\" i18n=\"@@moduleStateLabel\">\n                                State\n                            </div>\n                            <div class=\"flex-1 p-2\" i18n=\"@@moduleNameLabel\">\n                                Name\n                            </div>\n                            <div class=\"w-24 p-2\" i18n=\"@@moduleTypeLabel\">\n                                Type\n                            </div>\n                            <div class=\"w-48 p-2\" i18n=\"@@moduleClassLabel\">\n                                Class\n                            </div>\n                            <div class=\"w-48 p-2\" i18n=\"@@moduleIpLabel\">\n                                IP/URI\n                            </div>\n                            <div\n                                class=\"w-[3.5rem] p-2\"\n                                i18n=\"@@moduleStateLabel\"\n                            >\n                                Debug\n                            </div>\n                            <div class=\"w-24 p-2 h-9\"></div>\n                        </div>\n                        <div\n                            body\n                            cdkDropList\n                            (cdkDropListDropped)=\"drop($event)\"\n                            class=\"overflow-y-auto\"\n                        >\n                            <div\n                                table-row\n                                cdkDrag\n                                *ngFor=\"\n                                    let device of modules | async;\n                                    let i = index\n                                \"\n                                [context-menu]=\"menu\"\n                                (contextAction)=\"\n                                    handleContextEvent($event, device)\n                                \"\n                            >\n                                <div\n                                    class=\"w-full h-10 border-2 border-dashed border-gray-600 bg-gray-300 bg-opacity-25\"\n                                    *cdkDragPlaceholder\n                                ></div>\n                                <div\n                                    class=\"w-10 flex justify-center h-full\"\n                                    style=\"cursor: grab\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-select-arrows\"\n                                        cdkDragHandle\n                                    ></app-icon>\n                                </div>\n                                <div\n                                    class=\"w-12 flex items-center justify-center p-2 h-full relative\"\n                                >\n                                    <div\n                                        dot\n                                        binding\n                                        [sys]=\"item.id\"\n                                        [mod]=\"(bindings | async)[i]\"\n                                        bind=\"connected\"\n                                        [(model)]=\"device.connected\"\n                                        class=\"h-4 w-4 rounded-full\"\n                                        [class.bg-black]=\"!device.running\"\n                                        [class.bg-error]=\"\n                                            device.running &&\n                                            device.connected === false\n                                        \"\n                                        [class.bg-success]=\"\n                                            device.running && !!device.connected\n                                        \"\n                                        [class.bg-pending]=\"\n                                            device.running &&\n                                            device.connected === undefined\n                                        \"\n                                        (click)=\"power(device)\"\n                                    ></div>\n                                    <mat-spinner\n                                        *ngIf=\"\n                                            device.running &&\n                                            device.connected === undefined\n                                        \"\n                                        class=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none\"\n                                        diameter=\"32\"\n                                    ></mat-spinner>\n                                </div>\n                                <div\n                                    class=\"flex items-center flex-1 h-full p-2\"\n                                >\n                                    <div\n                                        class=\"flex-1 flex flex-col justify-center w-px\"\n                                    >\n                                        <a\n                                            [routerLink]=\"[\n                                                '/modules',\n                                                device.id\n                                            ]\"\n                                            (contextmenu)=\"\n                                                $event.stopPropagation()\n                                            \"\n                                            class=\"truncate underline underline-offset-4 w-full\"\n                                            [title]=\"\n                                                device.driver?.name ||\n                                                '<Unnamed>'\n                                            \"\n                                        >\n                                            {{\n                                                device.driver?.name ||\n                                                    '&lt;Unnamed&gt;'\n                                            }}\n                                        </a>\n                                        <div\n                                            class=\"text-xs truncate w-full\"\n                                            *ngIf=\"device.notes\"\n                                        >\n                                            {{ device.notes }}\n                                        </div>\n                                    </div>\n                                    <a\n                                        *ngIf=\"device.edge_id\"\n                                        matRipple\n                                        class=\"text-xs h-6 w-6 rounded-full bg-blue-600 flex items-center justify-center shadow text-white\"\n                                        [matTooltip]=\"device.edge_id\"\n                                        [routerLink]=\"[\n                                            '/admin',\n                                            'edge',\n                                            device.edge_id\n                                        ]\"\n                                    >\n                                        E\n                                    </a>\n                                </div>\n                                <div class=\"w-24 p-2\">\n                                    {{\n                                        driver_type(\n                                            device.role || device.driver?.role\n                                        )\n                                    }}\n                                </div>\n                                <div class=\"w-48 p-2\">\n                                    <span\n                                        class=\"truncate\"\n                                        [title]=\"(bindings | async)[i]\"\n                                        >{{ (bindings | async)[i] }}</span\n                                    >\n                                </div>\n                                <div\n                                    class=\"w-48 text-right flex items-center h-full p-2\"\n                                >\n                                    <app-icon\n                                        *ngIf=\"device.tls\"\n                                        className=\"backoffice-lock\"\n                                    ></app-icon>\n                                    <a\n                                        [href]=\"\n                                            device.ip\n                                                ? (device.tls\n                                                      ? 'https://'\n                                                      : 'http://') + device.ip\n                                                : device.uri\n                                        \"\n                                        target=\"_blank\"\n                                        class=\"truncate underline\"\n                                        >{{ device.ip || device.uri }}</a\n                                    >\n                                </div>\n                                <div\n                                    class=\"w-[3.5rem] flex items-center justify-center p-2 h-full\"\n                                >\n                                    <mat-checkbox\n                                        [disabled]=\"!device.running\"\n                                        [checked]=\"\n                                            (debugging | async)[device.id]\n                                        \"\n                                        [matTooltip]=\"\n                                            ((debugging | async)[device.id]\n                                                ? 'Disable'\n                                                : 'Enable') + ' Debugging'\n                                        \"\n                                        matTooltipPosition=\"left\"\n                                        (change)=\"toggleDebug(device)\"\n                                    >\n                                    </mat-checkbox>\n                                </div>\n                                <div class=\"w-24 flex px-2 justify-center\">\n                                    <button\n                                        mat-icon-button\n                                        (click)=\"editModule(device)\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-edit'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <button\n                                        mat-icon-button\n                                        [matMenuTriggerFor]=\"menu\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-dots-three-vertical'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button\n                                            mat-menu-item\n                                            *ngFor=\"\n                                                let item of device.running\n                                                    ? menu_options\n                                                    : offline_options\n                                            \"\n                                            (click)=\"\n                                                handleContextEvent(item, device)\n                                            \"\n                                        >\n                                            <app-icon\n                                                [icon]=\"item.icon\"\n                                            ></app-icon>\n                                            <div class=\"text\">\n                                                {{ item.name }}\n                                            </div>\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n            </section>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading modules...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No devices for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            button[mat-button] {\n                min-width: 8rem;\n            }\n\n            button.mat-menu-item {\n                display: flex;\n                align-items: center;\n            }\n\n            button .text {\n                margin-left: 1rem;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 48rem;\n            }\n\n            .bg-success {\n                height: 0.5rem !important;\n                width: 0.5rem !important;\n            }\n\n            [dot] {\n                transition: height 200ms, width 200ms;\n            }\n\n            mat-checkbox.mat-checkbox-disabled {\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class SystemModulesComponent extends BaseClass {\n    /** Whether a device should be listened to */\n    public device_listener: HashMap<boolean> = {};\n    /** Store for ID of new module to add to system */\n    public new_module: string;\n    /** Whether to show exec block */\n    public hide_exec: boolean;\n\n    public readonly loading = this._service.loading;\n    public readonly modules = this._service.modules;\n    public readonly debugging = this._service.debug_state;\n    public readonly bindings = this._service.module_bindings;\n    /** Actions available for the context menu */\n    public menu_options: AppLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        {\n            id: 'state',\n            name: 'View State',\n            icon: { type: 'icon', class: 'backoffice-eye' },\n        },\n        {\n            id: 'reload',\n            name: 'Recompile Driver',\n            icon: { type: 'icon', class: 'backoffice-cw' },\n        },\n        {\n            id: 'edit',\n            name: 'Edit Module',\n            icon: { type: 'icon', class: 'backoffice-edit' },\n        },\n        {\n            id: 'remove',\n            name: 'Remove Module',\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n\n    public offline_options: AppLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        {\n            id: 'edit',\n            name: 'Edit Module',\n            icon: { type: 'icon', class: 'backoffice-edit' },\n        },\n        {\n            id: 'remove',\n            name: 'Remove Module',\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n    /** Query method for modules */\n    public readonly query_fn = (_: string) =>\n        queryModules({ q: _ }).pipe(\n            map((_) =>\n                _.data\n                    .map((mod) => ({ ...mod, extra: mod.driver?.name }))\n                    .filter((_) => !_.control_system_id)\n            )\n        );\n    /** Function for excluding modules already within this system */\n    public readonly exclude_fn = (item: PlaceModule) =>\n        item.control_system_id === this.item.id ||\n        item.role === PlaceDriverRole.Logic;\n\n    public readonly newModule = () => this._service.newModule();\n    public readonly removeModule = (d) => this._service.removeModule(d);\n    public readonly editModule = (d) => this._service.editModule(d);\n    public readonly joinModule = (id) => this._service.joinModule(id);\n    public readonly reloadModule = (d) => this._service.reloadModule(d);\n    public readonly toggleDebug = (d) => this._service.toggleModuleDebug(d);\n    public readonly power = (d) => this._service.toggleModulePower(d);\n\n    public driver_type(role: PlaceDriverRole): string {\n        if (role == null) return '';\n        switch (role) {\n            case PlaceDriverRole.Device:\n                return 'Device';\n            case PlaceDriverRole.SSH:\n                return 'SSH';\n            case PlaceDriverRole.Service:\n                return 'Service';\n            case PlaceDriverRole.Websocket:\n                return 'Websocket';\n        }\n        return 'Logic';\n    }\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(\n        private _service: SystemStateService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    /**\n     * Handle context menu event\n     * @param event Event posted by the context menu\n     * @param device Module associated with the context menu event\n     */\n    public handleContextEvent(event: AppLink, device: PlaceModule) {\n        if (event) {\n            switch (event.id) {\n                case 'power':\n                    this.power(device);\n                    break;\n                case 'state':\n                    this.viewState(device);\n                    break;\n                case 'reload':\n                    this.reloadModule(device);\n                    break;\n                case 'remove':\n                    this.removeModule(device);\n                    break;\n                case 'load':\n                    this.loadModule(device);\n                    break;\n                case 'edit':\n                    this.editModule(device);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Update the state of the module\n     * @param device Module to reload\n     */\n    public async reload(device: PlaceModule) {\n        const item = await showModule(device.id).toPromise();\n        for (const k in item) {\n            if (item.hasOwnProperty(k)) {\n                device[k] = item[k];\n            }\n        }\n    }\n\n    public async viewState(device: PlaceModule) {\n        const modules = this._service.getModules();\n        this._dialog.open<ViewModuleStateModalComponent, ModuleStateModalData>(\n            ViewModuleStateModalComponent,\n            { data: { system: this.item, module: device, devices: modules } }\n        );\n    }\n\n    public loadModule(device: PlaceModule) {\n        loadModule(device.id)\n            .toPromise()\n            .then(\n                () =>\n                    notifySuccess(\n                        `Successfully loaded module \"${\n                            device.name || device.id\n                        }\"`\n                    ),\n                (err) =>\n                    notifyError(\n                        `Error loading module. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n\n    /**\n     * Handle drop event for reordering the devices\n     * @param event Drag drop details\n     */\n    public drop(event: CdkDragDrop<any[]>) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderModules(\n                event.previousIndex,\n                event.currentIndex\n            );\n        }\n    }\n\n    public addModule() {\n        if (!this.new_module) return;\n        this.joinModule(this.new_module);\n        this.new_module = '';\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceTrigger } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { copyToClipboard, unique } from '../common/general';\nimport { notifyInfo } from '../common/notifications';\n\nimport { HashMap } from '../common/types';\nimport { SystemStateService } from './system-state.service';\n\nexport interface TriggerInstanceState {\n    triggered: boolean;\n    trigger_count: number;\n    action_errors: number;\n    comparison_errors: number;\n    conditions: HashMap<boolean>;\n}\n\n@Component({\n    selector: 'system-triggers',\n    template: `\n        <section class=\"flex items-center mb-4 space-x-2\">\n            <button\n                mat-button\n                style=\"min-width: 8rem\"\n                (click)=\"selectTrigger()\"\n            >\n                Add Trigger\n            </button>\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter triggers...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <ng-container *ngIf=\"!(loading | async).triggers; else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(triggers | async)?.length; else empty_state\"\n                >\n                    <div table-head>\n                        <div class=\"w-12 p-2\"></div>\n                        <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">\n                            Name\n                        </div>\n                        <div class=\"w-16 p-2\" i18n=\"@@triggerCountLabel\">\n                            Count\n                        </div>\n                        <div class=\"w-16 p-2\" i18n=\"@@triggerErrorsLabel\">\n                            Errors\n                        </div>\n                        <div class=\"w-28 p-2\" i18n=\"@@descriptionLabel\">\n                            Added\n                        </div>\n                        <div class=\"w-32 p-2\"></div>\n                    </div>\n                    <div table-body class=\"overflow-y-auto\">\n                        <div\n                            table-row\n                            *ngFor=\"\n                                let trigger of triggers | async;\n                                let i = index\n                            \"\n                        >\n                            <i\n                                hidden\n                                binding\n                                [sys]=\"item.id\"\n                                mod=\"_TRIGGER__1\"\n                                [bind]=\"trigger.id\"\n                                [(model)]=\"trigger_state[trigger.id]\"\n                                (modelChange)=\"updateComparisons(trigger.id)\"\n                            ></i>\n                            <div\n                                class=\"w-12 flex items-center justify-center h-full p-2\"\n                            >\n                                <div\n                                    class=\"h-2 w-2 rounded-full\"\n                                    [class.bg-black]=\"\n                                        !trigger_state[trigger.id]?.triggered\n                                    \"\n                                    [class.bg-success]=\"\n                                        trigger_state[trigger.id]?.triggered\n                                    \"\n                                ></div>\n                            </div>\n                            <div flex class=\"flex-1 p-2\">\n                                <a\n                                    class=\"truncate\"\n                                    [routerLink]=\"['/triggers', trigger.id]\"\n                                    >{{ trigger.name }}</a\n                                >\n                            </div>\n                            <div desc class=\"w-16 p-2\">\n                                {{ trigger_state[trigger.id]?.trigger_count }}\n                            </div>\n                            <div desc class=\"w-16 p-2\">\n                                {{\n                                    trigger_state[trigger.id]?.action_errors +\n                                        trigger_state[trigger.id]\n                                            ?.comparison_errors || '0'\n                                }}\n                            </div>\n                            <div desc class=\"w-28 p-2\">\n                                {{ +trigger.created_at * 1000 | dateFrom }}\n                            </div>\n                            <div class=\"w-32 p-2 items-center justify-center\">\n                                <button\n                                    mat-icon-button\n                                    (click)=\"copyWebhookURL(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-link\"\n                                    ></app-icon>\n                                </button>\n                                <button\n                                    mat-icon-button\n                                    (click)=\"editTrigger(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-edit\"\n                                    ></app-icon>\n                                </button>\n                                <button\n                                    mat-icon-button\n                                    (click)=\"deleteTrigger(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-trash\"\n                                    ></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading triggers...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No triggers for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [flex] {\n                min-width: 8rem;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 36rem;\n            }\n        `,\n    ],\n})\nexport class SystemTriggersComponent {\n    public readonly filter$ = new BehaviorSubject<string>('');\n\n    public readonly loading = this._service.loading;\n\n    public readonly trigger_state: HashMap<TriggerInstanceState> = {};\n\n    public readonly comparisons: HashMap<string> = {};\n\n    public readonly temp_trigger = new BehaviorSubject<PlaceTrigger>(null);\n\n    public readonly triggers = combineLatest([\n        this.filter$,\n        this._service.triggers,\n        this.temp_trigger,\n    ]).pipe(\n        map(([filter, triggers, temp]) => {\n            const search = filter.toLowerCase();\n            const list = unique(temp ? [...triggers, temp] : triggers, 'id');\n            return filter\n                ? list.filter((t) => t.name.toLowerCase().includes(search))\n                : list;\n        })\n    );\n\n    public readonly copyWebhookURL = (t) => {\n        copyToClipboard(\n            `${location.origin}/api/engine/v2/webhook/${t.id}/notify?secret=${t.webhook_secret}`\n        );\n        notifyInfo('Webhook link copied to clipboard');\n    };\n    public readonly editTrigger = async (t) =>\n        this.temp_trigger.next((await this._service.editTrigger(t)) as any);\n    public readonly deleteTrigger = (t) => this._service.removeTrigger(t);\n    public readonly selectTrigger = async () =>\n        this.temp_trigger.next((await this._service.selectTrigger()) || null);\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    constructor(private _service: SystemStateService) {}\n\n    public updateComparisons(id: string): void {\n        this.comparisons[id] = '';\n        if (this.trigger_state[id]) {\n            for (const key in this.trigger_state[id].conditions) {\n                if (this.trigger_state[id].conditions.hasOwnProperty(key)) {\n                    if (this.comparisons[id]) {\n                        this.comparisons[id] += '\\n';\n                    }\n                    this.comparisons[\n                        id\n                    ] += `${key}: ${this.trigger_state[id].conditions[key]}`;\n                }\n            }\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem, PlaceZone, queryZones } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-zones',\n    template: `\n        <section class=\"flex items-center space-x-2 mb-4\">\n            <item-search-field\n                name=\"zone\"\n                class=\"flex-1 h-12\"\n                [query_fn]=\"query_fn\"\n                [exclude]=\"exclude_fn\"\n                [clear_on_select]=\"true\"\n                [ngModel]=\"null\"\n                (ngModelChange)=\"addPendingZone($event)\"\n            ></item-search-field>\n            <button\n                mat-button\n                [disabled]=\"!this.pending_zones.getValue().length\"\n                (click)=\"savePendingZones()\"\n            >\n                Save Pending\n            </button>\n        </section>\n        <section class=\"relative\">\n            <button\n                mat-button\n                *ngIf=\"order_changed\"\n                class=\"shadow z-50 mb-2\"\n                (click)=\"saveZoneOrder()\"\n            >\n                Save Zone Order\n            </button>\n            <ng-container *ngIf=\"!(loading | async).zones; else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(zones | async)?.length\"\n                >\n                    <div table-head>\n                        <div class=\"w-12 p-2\"></div>\n                        <div class=\"w-48 p-2\" i18n=\"@@nameLabel\">Name</div>\n                        <div desc class=\"flex-1 p-2\" i18n=\"@@descriptionLabel\">\n                            Description\n                        </div>\n                        <div class=\"w-16 p-2\"></div>\n                    </div>\n                    <div\n                        body\n                        cdkDropList\n                        (cdkDropListDropped)=\"drop($event)\"\n                        class=\"overflow-y-auto\"\n                    >\n                        <div\n                            table-row\n                            cdkDrag\n                            class=\"bg-opacity-40\"\n                            [class.bg-pending]=\"changed[zone.id]\"\n                            [matTooltip]=\"\n                                changed[zone.id] ? 'Zone order changed' : ''\n                            \"\n                            *ngFor=\"let zone of zones | async; let i = index\"\n                        >\n                            <div\n                                class=\"w-full h-10 border-2 border-dashed border-gray-600 bg-gray-300 bg-opacity-25\"\n                                *cdkDragPlaceholder\n                            ></div>\n                            <div\n                                class=\"w-12 flex justify-center h-full p-2\"\n                                style=\"cursor: grab\"\n                                [class.pointer-events-none]=\"zone.pending\"\n                                [class.text-pending]=\"zone.pending\"\n                            >\n                                <app-icon\n                                    [className]=\"\n                                        zone.pending\n                                            ? 'backoffice-warning'\n                                            : 'backoffice-select-arrows'\n                                    \"\n                                    cdkDragHandle\n                                ></app-icon>\n                            </div>\n                            <div class=\"w-48 p-2\">\n                                <a [routerLink]=\"['/zones', zone.id]\">\n                                    {{ zone.name }}\n                                </a>\n                            </div>\n                            <div desc class=\"flex-1 truncate\">\n                                {{ zone.description }}\n                            </div>\n                            <div class=\"w-16 p-2 items-center justify-center\">\n                                <button\n                                    mat-icon-button\n                                    *ngIf=\"(zones | async).length > 1\"\n                                    (click)=\"removeZone(zone)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-trash\"\n                                    ></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading zones...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [desc] {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SystemZonesComponent {\n    public order_changed = false;\n\n    public changed: Record<string, boolean> = {};\n    /** ID of a zone that the user wishes to add to the system */\n    public readonly pending_zones = new BehaviorSubject<PlaceZone[]>([]);\n    /** ID of a zone that the user wishes to add to the system */\n    public readonly zone_order = new BehaviorSubject<string[]>([]);\n    /** Whether zones for active item are loading */\n    public readonly loading = this._service.loading;\n    /** List of zones assoicated with the active item */\n    public readonly zones = combineLatest([\n        this._service.zones,\n        this.pending_zones,\n        this.zone_order,\n    ]).pipe(\n        map(([zones, pending, order]) =>\n            [...zones, ...pending.map((_) => ({ ..._, pending: true }))].sort(\n                (a, b) => order.indexOf(a.id) - order.indexOf(b.id)\n            )\n        )\n    );\n\n    /** Query function for systems */\n    public readonly query_fn = (_) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n\n    public readonly exclude_fn = (zone: PlaceZone) =>\n        this.item.zones.indexOf(zone.id) >= 0;\n\n    public readonly removeZone = (z) =>\n        z.pending\n            ? this.pending_zones.next(\n                  this.pending_zones.getValue().filter((_) => _.id !== z.id)\n              )\n            : this._service.removeZone(z);\n\n    public readonly addPendingZone = (z) =>\n        this.pending_zones.next([...this.pending_zones.getValue(), z]);\n\n    public readonly savePendingZones = async () => {\n        if (!this.pending_zones.getValue().length) return;\n        await this._service.addZones(this.pending_zones.getValue());\n        this.pending_zones.next([]);\n    };\n\n    public readonly saveZoneOrder = async () => {\n        const zones = await this._service.zones.pipe(take(1)).toPromise();\n        let zone_order = this.zone_order.getValue();\n        if (zones.every(({ id }, idx) => zone_order[idx] === id)) return;\n        await this._service.reorderZones(zone_order);\n        this.order_changed = false;\n        this.changed = {};\n        this.zone_order.next([]);\n    };\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: SystemStateService) {}\n\n    public async drop(event) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            console.log('Index:', event.previousIndex, event.currentIndex);\n            const zones = await this._service.zones.pipe(take(1)).toPromise();\n            let zone_order = this.zone_order.getValue();\n            if (zone_order.length !== zones.length) {\n                zone_order = zones.map((_) => _.id);\n            }\n            console.log('Order:', zone_order);\n            const item = zone_order.splice(event.previousIndex, 1);\n            this.changed[item[0]] = true;\n            zone_order.splice(event.currentIndex, 0, item[0]);\n            this.zone_order.next(zone_order);\n            this.order_changed = !zones.every(\n                ({ id }, idx) => zone_order[idx] === id\n            );\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'system-metadata',\n    template: `\n        <metadata-display *ngIf=\"item\" [item]=\"item\"></metadata-display>\n    `,\n    styles: [``],\n})\nexport class SystemMetadataComponent {\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {}\n}\n","import { Component } from '@angular/core';\nimport { extensionsForItem } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { ActiveItemService } from '../common/item.service';\nimport { SettingsService } from '../common/settings.service';\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'new-systems-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <div class=\"flex flex-col h-full flex-1 overflow-hidden w-px\">\n                <div class=\"flex flex-1 h-px\">\n                    <item-sidebar class=\"hidden sm:block\"></item-sidebar>\n                    <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                        <item-selection class=\"z-20 sm:hidden\">\n                            <button\n                                mat-icon-button\n                                class=\"sm:hidden mr-2\"\n                                (click)=\"open_menu = true\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-menu\"\n                                ></app-icon>\n                            </button>\n                        </item-selection>\n                        <div class=\"flex flex-col flex-1 h-1/2\">\n                            <ng-container *ngIf=\"item?.id\">\n                                <item-details\n                                    [can_edit]=\"true\"\n                                    [item]=\"item\"\n                                    type=\"System\"\n                                ></item-details>\n                                <item-tablist\n                                    [base]=\"name\"\n                                    [tabs]=\"tab_list\"\n                                    [scrolled]=\"scroll > 0\"\n                                    class=\"z-10\"\n                                ></item-tablist>\n                                <div\n                                    #el\n                                    class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                                    (scroll)=\"scroll = el.scrollTop\"\n                                >\n                                    <router-outlet></router-outlet>\n                                </div>\n                            </ng-container>\n                        </div>\n                        <button\n                            class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                            matTooltip=\"New system\"\n                            matTooltipPosition=\"right\"\n                            matRipple\n                            (click)=\"newItem()\"\n                        >\n                            <app-icon\n                                [className]=\"'backoffice-plus'\"\n                                class=\"text-3xl\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            class=\"absolute bottom-16 left-2 sm:-left-8 w-10 h-10 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                            matTooltip=\"Bulk add systems\"\n                            matTooltipPosition=\"right\"\n                            matRipple\n                            (click)=\"bulkAdd()\"\n                        >\n                            <app-icon class=\"text-2xl\">playlist_add</app-icon>\n                        </button>\n                    </div>\n                </div>\n                    <app-debug-output\n                        below\n                        *ngIf=\"debug_position === 'below'\"\n                    ></app-debug-output>\n            </div>\n            <app-debug-output\n                side\n                *ngIf=\"debug_position === 'side'\"\n                class=\"h-full max-w-[30rem]\"\n            ></app-debug-output>\n        </div>\n    `,\n    styles: [``],\n})\nexport class SystemsComponent extends BaseClass {\n    public readonly name = 'systems';\n    public open_menu = false;\n    public scroll = 0;\n\n    public tab_list = [];\n\n    public readonly newItem = () => this._item.create();\n    public readonly bulkAdd = () => this._item.bulkAdd();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public get debug_position() {\n        return this._debug.position;\n    }\n\n    public updateTabList(counts?: Record<string, number>) {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'modules',\n                name: 'Modules',\n                count: counts?.devices ?? '?',\n                icon: { class: 'backoffice-tablet' },\n            },\n            {\n                id: 'zones',\n                name: 'Zones',\n                count: counts?.zones ?? '?',\n                icon: { class: 'backoffice-layers' },\n            },\n            {\n                id: 'triggers',\n                name: 'Triggers',\n                count: counts?.triggers ?? '?',\n                icon: { class: 'backoffice-stopwatch' },\n            },\n            {\n                id: 'metadata',\n                name: 'Metadata',\n                count: counts?.metadata ?? '?',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'history',\n                name: 'Settings History',\n                icon: { class: 'backoffice-clock' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: SystemStateService,\n        private _item: ActiveItemService,\n        private _debug: PlaceDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item-change',\n            this._item.active_item$.subscribe(() => this.updateTabList({}))\n        );\n        this.subscription(\n            'counts',\n            this._service.counts.subscribe((counts) =>\n                this.updateTabList(counts)\n            )\n        );\n    }\n}\n","import { Routes } from '@angular/router';\nimport { SystemAboutComponent } from './system-about.component';\nimport { SystemModulesComponent } from './system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers.component';\nimport { SystemZonesComponent } from './system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\nimport { SystemsComponent } from './systems.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: SystemsComponent,\n        children: [\n            { path: 'about', component: SystemAboutComponent },\n            { path: 'modules', component: SystemModulesComponent },\n            { path: 'triggers', component: SystemTriggersComponent },\n            { path: 'zones', component: SystemZonesComponent },\n            { path: 'metadata', component: SystemMetadataComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './systems.routes';\n\nimport { SystemAboutComponent } from './system-about.component';\nimport { SystemModulesComponent } from './system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers.component';\nimport { SystemZonesComponent } from './system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { SystemsComponent } from './systems.component';\n\n@NgModule({\n    declarations: [\n        SystemAboutComponent,\n        SystemModulesComponent,\n        SystemTriggersComponent,\n        SystemZonesComponent,\n        SystemMetadataComponent,\n        SystemsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule,\n    ],\n})\nexport class AppSystemsModule {}\n"],"x_google_ignoreList":[]}