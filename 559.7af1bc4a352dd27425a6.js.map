{"version":3,"sources":["./apps/backoffice/src/app/triggers/triggers.component.ts","./apps/backoffice/src/app/triggers/trigger-state.service.ts","./apps/backoffice/src/app/triggers/trigger-about.component.ts","./apps/backoffice/src/app/triggers/trigger-instances.component.ts","./apps/backoffice/src/app/triggers/triggers.routes.ts","./apps/backoffice/src/app/triggers/triggers.module.ts"],"names":["TriggersComponent","_service","_dialog","super","name","show_options","this","tab_list","active_item","id","icon","class","count","instance_count","concat","extensions","subscription","item","subscribe","loadValues","updateTabList","toPromise","length","TriggerStateService","instances","pipe","switchMap","of","shareReplay","condition","template","ref","open","width","height","data","trigger","JSON","parse","stringify","undefined","system","result","Promise","race","componentInstance","event","first","_","reason","afterClosed","replaceItem","metadata","action","type","fst","snd","details","title","content","list","actions","functions","mailers","loading","resp","toJSON","catch","response","message","conditions","comparisons","time_dependents","index","findIndex","i","splice","err","close","emails","responseText","$event","ROUTES","path","component","children","TriggerAboutComponent","query_fn","q","map","editCondition","c","template_system","removeCondition","editAction","a","removeAction","previousIndex","currentIndex","reorderAction","TriggerInstancesComponent","connected","deleteTrigger","s","removeTriggerFromSystem","redirectTo","AppTriggersModule"],"mappings":"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","file":"559.7af1bc4a352dd27425a6.js","sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listTriggerInstances, PlaceTrigger } from '@placeos/ts-client';\nimport { extensionsForItem } from '../common/api';\n\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\n\n@Component({\n    selector: 'app-triggers',\n    template: `\n        <div class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\">\n            <sidebar\n                heading=\"Triggers\"\n                name=\"triggers\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"trigger\"\n                route=\"triggers\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class TriggersComponent extends BaseClass {\n    /** Number of system triggers */\n    public instance_count: number;\n\n    public readonly name = 'triggers';\n\n    public readonly show_options = this._service.show_options;\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'instances',\n                name: 'Instances',\n                count: this.instance_count,\n                icon: { class: 'backoffice-documents' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: ActiveItemService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadValues(item as any);\n            })\n        );\n        this.updateTabList();\n    }\n\n    protected async loadValues(item: PlaceTrigger) {\n        if (!item) return;\n        // Get trigger count\n        this.instance_count = (\n            await listTriggerInstances(item.id).toPromise()\n        ).length;\n        this.updateTabList();\n    }\n}\n","import { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceSystem,\n    PlaceTrigger,\n    listTriggerInstances,\n    removeSystemTrigger,\n    TriggerComparison,\n    TriggerFunction,\n    TriggerMailer,\n    TriggerTimeCondition,\n    updateTrigger,\n} from '@placeos/ts-client';\nimport { Observable, of } from 'rxjs';\nimport { first, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\nimport {\n    TriggerActionModalComponent,\n    TriggerActionModalData,\n} from '../overlays/trigger-action-modal/trigger-action-modal.component';\nimport {\n    TriggerConditionData,\n    TriggerConditionModalComponent,\n} from '../overlays/trigger-condition-modal/trigger-condition-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TriggerStateService {\n    public readonly item: Observable<PlaceTrigger> = this._service.item as any;\n\n    public readonly instances: Observable<PlaceTrigger[]> = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceTrigger)) return of([]);\n            return listTriggerInstances(item.id);\n        }),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(\n        private _service: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    /**\n     * Add new condition to trigger\n     */\n    public async editCondition(\n        condition: TriggerComparison | TriggerTimeCondition = null,\n        template: PlaceSystem\n    ) {\n        if (!template) return;\n        const ref = this._dialog.open<\n            TriggerConditionModalComponent,\n            TriggerConditionData\n        >(TriggerConditionModalComponent, {\n            width: 'auto',\n            height: 'auto',\n            data: {\n                trigger: this.active_item,\n                condition: condition\n                    ? JSON.parse(JSON.stringify(condition))\n                    : undefined,\n                system: template,\n            },\n        });\n        const result: DialogEvent | null = (await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])) as any;\n        if (!result?.reason) return;\n        this._service.replaceItem(result.metadata.trigger);\n    }\n\n    /**\n     * Edit existing action on active trigger\n     * @param action Action to edit\n     */\n    public async editAction(\n        action: TriggerFunction | TriggerMailer = null,\n        template: PlaceSystem\n    ) {\n        if (!template) return;\n        const ref = this._dialog.open<\n            TriggerActionModalComponent,\n            TriggerActionModalData\n        >(TriggerActionModalComponent, {\n            data: {\n                trigger: this.active_item,\n                action,\n                system: template,\n            },\n        });\n        const result: DialogEvent | null = (await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])) as any;\n        if (!result?.reason) return;\n        this._service.replaceItem(result.metadata.trigger);\n    }\n\n    /**\n     * Re-order action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public async reorderAction(\n        type: 'function' | 'mailer',\n        fst: number,\n        snd: number\n    ): Promise<void> {\n        const details = await openConfirmModal(\n            {\n                title: `Reoreder trigger ${type} action`,\n                content: `Are you sure you want remove this trigger condition?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        const list: any[] = [\n            ...(type === 'function'\n                ? this.active_item.actions.functions\n                : this.active_item.actions.mailers),\n        ];\n        moveItemInArray(list, fst, snd);\n        const actions = {\n            functions:\n                type === 'function' ? list : this.active_item.actions.functions,\n            mailers:\n                type === 'function' ? this.active_item.actions.mailers : list,\n        };\n        details.loading('Re-ordering triggger actions...');\n        const resp = await updateTrigger(this.active_item.id, {\n            ...this.active_item.toJSON(),\n            actions,\n        })\n            .toPromise()\n            .catch((_) => _);\n        if (!(resp instanceof PlaceTrigger))\n            return notifyError(\n                `Error re-ordered trigger ${type} action. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        this._service.replaceItem(resp);\n        notifySuccess(`Successfully re-ordered trigger ${type} action.`);\n    }\n\n    public async removeCondition(\n        condition: TriggerComparison | TriggerTimeCondition\n    ) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger condition`,\n                content: `Are you sure you want remove this trigger condition?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger condition...');\n        const item = this.active_item;\n        const conditions = {\n            comparisons: [...item.conditions.comparisons],\n            time_dependents: [...item.conditions.time_dependents],\n        };\n        const index = ((condition as TriggerTimeCondition).type\n            ? item.conditions.time_dependents\n            : item.conditions.comparisons\n        ).findIndex((i) => JSON.stringify(i) === JSON.stringify(condition));\n        conditions.time_dependents.splice(index, 1);\n        ((condition as TriggerTimeCondition).type\n            ? conditions.time_dependents\n            : conditions.comparisons\n        ).splice(index, 1);\n        const resp = await updateTrigger(item.id, {\n            ...item.toJSON(),\n            conditions,\n        })\n            .toPromise()\n            .catch((err) => err);\n        details.close();\n        if (!(resp instanceof PlaceTrigger)) {\n            return notifyError(\n                `Error removing trigger condition. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        }\n        this._service.replaceItem(resp);\n        notifySuccess('Successfully removed trigger condition.');\n    }\n\n    public async removeAction(action: TriggerFunction | TriggerMailer) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger action`,\n                content: `Are you sure you want remove this trigger action?<br>All systems using this trigger will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger action...');\n        const item = this.active_item;\n        const actions = {\n            functions: [...item.actions.functions],\n            mailers: [...item.actions.mailers],\n        };\n        const index = ((action as TriggerMailer).emails\n            ? item.actions.mailers\n            : item.actions.functions\n        ).findIndex((i) => JSON.stringify(i) === JSON.stringify(action));\n        ((action as TriggerMailer).emails\n            ? actions.mailers\n            : actions.functions\n        ).splice(index, 1);\n        const resp = await updateTrigger(item.id, { ...item.toJSON(), actions })\n            .toPromise()\n            .catch((err) => err);\n        details.close();\n        if (!(resp instanceof PlaceTrigger)) {\n            return notifyError(\n                `Error removing trigger action. Error: ${JSON.stringify(\n                    resp.response || resp.message || resp\n                )}`\n            );\n        }\n        this._service.replaceItem(resp);\n        notifySuccess('Successfully removed trigger action.');\n    }\n\n    public async removeTriggerFromSystem(system: PlaceSystem) {\n        const details = await openConfirmModal(\n            {\n                title: `Remove trigger from system`,\n                content: `Are you sure you want remove this trigger from ${system.name}?<br>The system will be updated <strong>immediately</strong>.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details?.reason) return;\n        details.loading('Removing trigger from system...');\n        const err = await removeSystemTrigger(system.id, this.active_item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing trigger from system. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed trigger from system.');\n    }\n}\n","import { Component } from '@angular/core';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    PlaceTrigger,\n    PlaceSystem,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerFunction,\n    TriggerMailer,\n    querySystems,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { TriggerStateService } from './trigger-state.service';\n\n@Component({\n    selector: 'trigger-about',\n    template: `\n        <section class=\"space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.created_at\">\n                <label i18n=\"@@triggerCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.updated_at\">\n                <label i18n=\"@triggerUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <div class=\"flex items-center space-x-2\">\n            <label\n                for=\"driver\"\n                class=\"whitespace-nowrap\"\n                matTooltip=\"System to use for available status variables and function calls\"\n                i18n=\"@@triggerTemplateSystemLabel\"\n                >Template System:\n            </label>\n            <item-search-field\n                class=\"h-12\"\n                name=\"system\"\n                [query_fn]=\"query_fn\"\n                [(ngModel)]=\"template_system\"\n            ></item-search-field>\n        </div>\n        <header class=\"flex items-center my-4\">\n            <button\n                mat-icon-button\n                [disabled]=\"!template_system\"\n                (click)=\"editCondition()\"\n            >\n                <app-icon className=\"backoffice-plus\"></app-icon>\n            </button>\n            <div class=\"font-medium text-lg\" i18n=\"@@triggerConditionsHeader\">\n                Conditions\n            </div>\n        </header>\n        <section\n            role=\"table\"\n            *ngIf=\"\n                comparisons.length || time_dependents.length;\n                else no_conditions\n            \"\n        >\n            <div\n                table-head\n                i18n=\"@@triggerComparisonLabel\"\n                *ngIf=\"comparisons.length\"\n            >\n                <div class=\"flex-1 p-2\">Variable Comparison Condtions</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let comparison of comparisons\">\n                    <div class=\"w-12\"></div>\n                    <div class=\"flex-1 p-2\">\n                        {{ comparison.left | json }} {{ comparison.operator }}\n                        {{ comparison.right | json }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editCondition(comparison)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"removeCondition(comparison)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div\n                table-head\n                i18n=\"@@triggerTimeLabel\"\n                *ngIf=\"time_dependents.length\"\n            >\n                <div class=\"flex-1 p-2\">Time Dependent Conditions</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let time of time_dependents\">\n                    <div class=\"w-12\"></div>\n                    <div class=\"flex-1 p-2\">\n                        {{ time.type === 'at' ? 'At time' : 'CRON' }}\n                        {{ time.type === 'at' ? time.time : time.cron }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editCondition(time)\"\n                        >\n                            <app-icon className=\"backoffice-edit\"></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeCondition(time)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <header class=\"flex items-center space-x-2 my-4\">\n            <button\n                mat-icon-button\n                [disabled]=\"!template_system\"\n                (click)=\"editAction()\"\n            >\n                <app-icon className=\"backoffice-plus\"></app-icon>\n            </button>\n            <div class=\"font-medium text-lg\" i18n=\"@@triggerActionsHeader\">\n                Actions\n            </div>\n        </header>\n        <section\n            role=\"table\"\n            *ngIf=\"functions.length || mailers.length; else no_actions\"\n        >\n            <div\n                table-head\n                i18n=\"@@triggerFunctionsLabel\"\n                *ngIf=\"functions.length\"\n            >\n                <div class=\"flex-1 p-2\">Function Call Actions</div>\n            </div>\n            <div\n                table-body\n                cdkDropList\n                (cdkDropListDropped)=\"confirmReorder('function', $event)\"\n            >\n                <div table-row *ngFor=\"let action of functions\" cdkDrag>\n                    <div\n                        class=\"w-12 flex items-center justify-center\"\n                        cdkDragHandle\n                    >\n                        <app-icon\n                            [icon]=\"{ class: 'backoffice-select-arrows' }\"\n                        ></app-icon>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        {{ action.mod }}, {{ action.method }}({{\n                            action.args | json\n                        }})\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editAction(action)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeAction(action)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                    <div\n                        class=\"p-4 border-4 border-dashed border-black bg-gray-300\"\n                        *cdkDragPlaceholder\n                    ></div>\n                </div>\n            </div>\n            <div table-head i18n=\"@@triggerEmailsLabel\" *ngIf=\"mailers.length\">\n                <div class=\"flex-1 p-2\">Email Actions</div>\n            </div>\n            <div\n                table-body\n                cdkDropList\n                (cdkDropListDropped)=\"confirmReorder('mailer', $event)\"\n            >\n                <div table-row *ngFor=\"let action of mailers\" cdkDrag>\n                    <div\n                        class=\"w-12 flex items-center justify-center\"\n                        cdkDragHandle\n                    >\n                        <app-icon\n                            [icon]=\"{ class: 'backoffice-select-arrows' }\"\n                        ></app-icon>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        <span\n                            [matTooltip]=\"action.emails | formatList\"\n                            i18n=\"@@emailCountDisplay\"\n                            >{{ action.emails.length }} { action.emails.length,\n                            plural, =1 { Address } other { Addresses } }</span\n                        >&nbsp; | Body Length: {{ action.content.length }}\n                    </div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (click)=\"editAction(action)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button mat-icon-button (click)=\"removeAction(action)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                    <div\n                        class=\"p-4 border-4 border-dashed border-black bg-gray-300\"\n                        *cdkDragPlaceholder\n                    ></div>\n                </div>\n            </div>\n        </section>\n        <ng-template #no_conditions>\n            <div\n                class=\"flex flex-col items-center p-8\"\n                i18n=\"@@triggerConditionsEmpty\"\n            >\n                No condtions for trigger\n            </div>\n        </ng-template>\n        <ng-template #no_actions>\n            <div\n                class=\"flex flex-col items-center p-8\"\n                i18n=\"@@triggerActionsEmpty\"\n            >\n                No actions for trigger\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TriggerAboutComponent extends BaseClass {\n    /** System to use for conditions with systen variables and functions */\n    public template_system: PlaceSystem;\n    /** List of variable comparison trigger conditions */\n    public comparisons: TriggerComparison[] = [];\n    /** List of time dependent trigger conditions */\n    public time_dependents: TriggerTimeCondition[] = [];\n    /** List of function call trigger actions */\n    public functions: TriggerFunction[] = [];\n    /** List of email trigger actions */\n    public mailers: TriggerMailer[] = [];\n    /** Query function for systems */\n    public readonly query_fn = (_) =>\n        querySystems({ q: _ }).pipe(map((resp) => resp.data));\n\n    public readonly editCondition = (c?) =>\n        this._service.editCondition(c, this.template_system);\n    public readonly removeCondition = (c) => this._service.removeCondition(c);\n    public readonly editAction = (a?) =>\n        this._service.editAction(a, this.template_system);\n    public readonly removeAction = (a) => this._service.removeAction(a);\n\n    public get item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: TriggerStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                if (this.item && this.item.conditions) {\n                    this.comparisons = this.item.conditions.comparisons || [];\n                    this.time_dependents =\n                        this.item.conditions.time_dependents || [];\n                    this.functions = this.item.actions.functions || [];\n                    this.mailers = this.item.actions.mailers || [];\n                }\n            })\n        );\n    }\n    /**\n     * Open confirmation modal for re-ordering action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public confirmReorder(\n        type: 'function' | 'mailer',\n        event: CdkDragDrop<any[]>\n    ): void {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderAction(\n                type,\n                event.previousIndex,\n                event.currentIndex\n            );\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceTrigger } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport { TriggerStateService } from './trigger-state.service';\n\n@Component({\n    selector: 'trigger-systems',\n    template: `\n        <div role=\"table\" *ngIf=\"(instances | async)?.length; else empty_state\">\n            <div table-head>\n                <td class=\"w-12 h-10\"></td>\n                <td\n                    class=\"flex-1 h-10 flex items-center\"\n                    i18n=\"@@systemTableName\"\n                >\n                    Parent ID\n                </td>\n                <td\n                    class=\"w-32 h-10 flex items-center\"\n                    i18n=\"@@systemTableAdded\"\n                >\n                    Added\n                </td>\n                <td class=\"w-12 h-10\"></td>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of instances | async\">\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <div\n                            class=\"h-2 w-2 rounded-full bg-black\"\n                            [class.active]=\"item.bookable\"\n                        ></div>\n                    </div>\n                    <div class=\"flex-1 p-2\">\n                        <a\n                            *ngIf=\"item.id\"\n                            class=\"underline\"\n                            [routerLink]=\"\n                                item.zone_id\n                                    ? ['/zones', item.zone_id]\n                                    : ['/systems', item.control_system_id]\n                            \"\n                            [matTooltip]=\"\n                                item.zone_id || item.control_system_id\n                            \"\n                        >\n                            {{\n                                item.name ||\n                                    item.zone_id ||\n                                    item.control_system_id\n                            }}\n                        </a>\n                    </div>\n                    <div class=\"w-32 p-2\">\n                        {{ +item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"deleteTrigger(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <div class=\"text\" i18n=\"@@systemTableEmpty\">\n                    No instances of trigger\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            .active {\n                background-color: var(--success) !important;\n            }\n        `,\n    ],\n})\nexport class TriggerInstancesComponent {\n    /** List of systems associated with the trigger */\n    public readonly instances = this._service.instances;\n    /** Map of systems ids to connected status */\n    public connected: HashMap<boolean> = {};\n\n    public readonly deleteTrigger = (s) =>\n        this._service.removeTriggerFromSystem(s);\n\n    public get item(): PlaceTrigger {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: TriggerStateService) {}\n}\n","import { Routes } from '@angular/router';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about.component';\nimport { TriggerInstancesComponent } from './trigger-instances.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: TriggersComponent,\n        children: [\n            { path: 'about', component: TriggerAboutComponent },\n            { path: 'instances', component: TriggerInstancesComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './triggers.routes';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about.component';\nimport { TriggerInstancesComponent } from './trigger-instances.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        TriggersComponent,\n        TriggerAboutComponent,\n        TriggerInstancesComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule,\n    ],\n})\nexport class AppTriggersModule {}\n"],"sourceRoot":"webpack:///"}