{"version":3,"mappings":"iQAuCO,IAAMA,EAAb,MAAM,gBAAgCC,IA6BlCC,YAAoBC,GAChBC,QADgBC,gBAvBJA,UAAO,UAEPA,kBAAeA,KAAKF,SAASG,aAEtCD,cAAW,GAEPE,iBACP,OAAOC,QAAkBH,KAAKF,SAASM,YAAaJ,KAAKK,MAGtDC,gBACHN,KAAKO,SAAW,CACZ,CAAEC,GAAI,QAASH,KAAM,QAASI,KAAM,CAAEC,MAAO,gCAC7C,CACIF,GAAI,UACJH,KAAM,UACNM,MAAOX,KAAKY,aACZH,KAAM,CAAEC,MAAO,yBAEnB,CAAEF,GAAI,UAAWH,KAAM,mBAAoBI,KAAM,CAAEC,MAAO,sBAC5DG,OAAOb,KAAKE,YAOXY,WACHd,KAAKe,aACD,OACAf,KAAKF,SAASkB,KAAKC,UAAWD,IAC1BhB,KAAKkB,WAAWF,GAChBhB,KAAKM,mBAGbN,KAAKM,gBAGOY,WAAWF,iDACvB,IAAKA,EAAM,OACX,MAAMG,EAAa,CAAEC,OAAQ,EAAGC,MAAO,EAAGC,UAAWN,EAAKR,IAE1DR,KAAKY,oBAAsBW,SAAaJ,GAAOK,aAAaC,sDAhDvD9B,GAAgB+B,qCAAhB/B,EAAgBgC,kYA7BrBD,iBAGIA,qBAKAA,0BAMJA,eAHQA,sRAkBH/B,GAAb,8HCnBO,IAAMiC,EAAb,MAAM,QA2CF/B,YAAoBgC,EAAmCC,GAAnC9B,cAAmCA,eA1C/CA,cAAW,IAAI+B,KAAyB,GAEhC/B,aAAUA,KAAKgC,SAASC,eAExBjC,UAAgCA,KAAK6B,OAAOb,KAAKkB,QAC7DC,KAAQC,GAAMA,aAAaC,QAGfrC,yBAAsBA,KAAK6B,OAAOS,SAASJ,QACvDK,KAAa,MACbC,OAAWxB,GACFA,GAAUA,aAAgBqB,OACxBI,SAAezB,EAAKR,IADyB,KAK5CR,YAASA,KAAKgB,KAAKkB,MAC/BM,OAAWxB,MAAS0B,OAAW1B,EAAK2B,eACpCC,KAAY,IAGA5C,YAASA,KAAKgB,KAAKkB,MAC/BM,OAAWxB,GAAUA,EAAK6B,WAAYC,SAAW9B,EAAK6B,YAAaE,QAAG,UACtEH,KAAY,IAGA5C,iBAAcA,KAAKgB,KAAKkB,MACpCM,OAAWxB,IACPhB,KAAKgC,SAASgB,MAAK,GACnBC,QAAQC,IAAI,yBACL3B,OAAa,CAAED,UAAWN,EAAKR,UAE1C2C,KAAKC,GAAYA,EAAQC,OACzBC,OAAW,IAAM,KACjBC,OAAKnB,GAAMpC,KAAKgC,SAASgB,MAAK,OAC9BJ,KAAY,IAGLxC,kBACP,OAAOJ,KAAK6B,OAAOzB,YAKVoD,kEAET,MAAMC,QADSzD,KAAKI,YAAYsD,QAAUC,MAAaC,OAC5B5D,KAAKI,YAAYI,IACvCgB,YACAqC,MAAOC,GAAQA,GAChBL,EACqB,iBAAVA,GAAsBA,EAAMM,OAAS,IAC5CC,QAAYP,MAEZO,MACI,aAAahE,KAAKI,YAAYsD,QAAU,OAAS,mBAC7C1D,KAAKI,YAAYI,oBAErB,OACA,IAAMR,KAAKiE,YAAYR,MAKnCS,QAAc,wBAAuBlE,KAAKI,YAAYsD,QAAU,UAAY,YAC3E1D,KAAKI,YAAoBsD,SAAW1D,KAAKI,YAAYsD,WAIlDO,YAAYE,GAChBnE,KAAK8B,QAAQsC,KAAiCC,IAA4B,CACtEhB,KAAM,CAAEc,2DAvEPvC,GAAkBF,mDAAlBE,EAAkB0C,QAAlB1C,EAAkB,qBAFf,SAEHA,GAAb,wECXYF,iBACIA,6BAAsCA,QACtCA,iBAAmBA,SAAgBA,QACvCA,8BADuBA,uDAEvBA,iBACIA,6BAAgCA,QAChCA,iBAAmBA,SAAaA,QACpCA,8BADuBA,oDAEvBA,iBACIA,6BAAoCA,QACpCA,iBAAmBA,SAAeA,QACtCA,8BADuBA,sDAUvBA,iBACIA,6BAA6CA,QAC7CA,iBAAmBA,6BAAuCA,QAC9DA,8BADuBA,2EAEvBA,iBACIA,6BAA4CA,QAC5CA,iBAAmBA,6BAAuCA,QAC9DA,8BADuBA,qHAEvBA,iBACIA,6BAA2CA,QAC3CA,gBACIA,0BACJA,QACJA,8BAHyBA,yDACjBA,8IAGRA,iBACIA,6BAAqDA,QACrDA,iCACIA,0BACJA,QACJA,8BAHyBA,gEACjBA,4EAOJA,8BAEAA,6FACAA,kFAKRA,mBACIA,+CAMJA,8BALQA,+BAAc,WAAdA,CAAc,2BAAdA,CAAc,mFAOlBA,kBACIA,0BACAA,yBAA2DA,QAC/DA,SAaL,IAAM6C,GAAb,MAAM,QAcF1E,YAAoBC,mBAZJE,YAASA,KAAKF,SAAS0E,OAEvBxE,YAASA,KAAKF,SAAS2E,OAEvBzE,oBAAiBA,KAAKF,SAAS4E,oBAIpC1D,WACP,OAAOhB,KAAKF,SAASM,YAKZoD,kEACTxD,KAAK2E,UAAW,QACV3E,KAAKF,SACXE,KAAK2E,UAAW,kDAnBXJ,GAAoB7C,mCAApB6C,EAAoB5C,uGAhEaiD,gGAIAA,gGAkCqBA,oGAlDnBA,oGAIHA,6FAIEA,kGAYMA,2GAIDA,0GAIAA,yGAMAA,mHAUhCA,oLAD2DA,+FAC3DC,YAkB6BD,6pBAhEzClD,qBACIA,uBAIAA,uBAIAA,uBAIAA,iBACIA,4BAAkCA,QAClCA,iBAAmBA,SAAcA,QACrCA,QACAA,iBACIA,8BAAkCA,QAClCA,kBAAmBA,UAAcA,QACrCA,QACAA,wBAIAA,wBAIAA,0CAMAA,2CAMJA,QACAA,iBACAA,oBACIA,qBAAyCA,gCAASoD,wBAC9CpD,yBAGAA,iCACJA,QACJA,QACAA,iBACAA,mCAAmEA,QACnEA,gDAQAA,qEA5D8CA,oCAIAA,iCAIAA,mCAMnBA,2BAIAA,2BAEmBA,yCAIAA,yCAIAA,6CAMAA,6CASvBA,sCACIA,mCAGSA,kCAK1BA,sEAAiD,sNAyBtD6C,GAAb,sHCzCoB7C,kBAOIA,kBACIA,gBAA0CA,SAExCA,QACNA,QACAA,kBACIA,SACJA,QACAA,kBACIA,6BACJA,QACJA,kCAVWA,8CAAuCA,uBAK1CA,oDAGAA,+EA3BhBA,iBAKIA,iBACIA,8BAAoDA,QACpDA,8BAAsDA,QACtDA,8BAAmDA,QACvDA,QACAA,kBACIA,2CAmBJA,QACJA,+BAhBHA,+EAhBDA,mBACIA,0CAgCJA,+CA7BSA,wEAAqC,sCA+B1CA,kBACIA,0BACAA,aAAGA,8BAAkBA,QACzBA,eAFiBA,sDAKjBA,kBACIA,aAAGA,kCAAsBA,QAC7BA,SAaL,IAAMqD,GAAb,MAAM,QAqBFlF,YAAoBC,mBAnBJE,aAAU,IAAI+B,IAAwB,IAEtC/B,aAAUA,KAAKF,SAASkF,QAExBhF,kBAAciF,SAAc,CACxCjF,KAAKkF,QACLlF,KAAKF,SAASqF,cACfjD,MACCiB,OAAKC,IACD,MAAOjB,EAAQiD,GAAWhC,EACpBiC,EAASlD,EAAOmD,cACtB,OAAOnD,EACDiD,EAAQjD,OAAQoD,GACZA,EAAIlF,KAAKiF,cAAcE,SAASH,IAEpCD,mDAjBLL,GAAsBrD,mCAAtBqD,EAAsBpD,oFAjDiCiD,4FACLA,qGACCA,+0BAxBxDlD,qBACIA,4BACIA,sBAIAA,mBAEIA,yCAAiBoD,oBAFrBpD,QAOJA,QACJA,QACAA,6CAkCAA,2CAMAA,kEAhDYA,6BAQFA,6CAA0B,wPAwD/BqD,GAAb,6BCjFO,MAAMU,GAAiB,CAC1B,CACIC,KAAM,MACNC,UAAWhG,EACXiG,SAAU,CACN,CAAEF,KAAM,QAASC,UAAWpB,IAC5B,CAAEmB,KAAM,UAAWC,UAAWZ,IAC9B,CAAEW,KAAM,aAAcC,UAAWE,MACjC,CAAEH,KAAM,UAAWC,UAAWG,MAC9B,CAAEJ,KAAM,KAAMK,WAAY,WAGlC,CAAEL,KAAM,KAAMK,WAAY,qBCKvB,IAAMC,GAAb,MAAM,sDAAOA,4DAPA,CACLC,KACAC,KACAC,cAAsBV,IACtBW,SAGKJ,GAAb","names":["ModulesComponent","BaseClass","constructor","_service","super","this","show_options","extensions","extensionsForItem","active_item","name","updateTabList","tab_list","id","icon","class","count","system_count","concat","ngOnInit","subscription","item","subscribe","loadValues","query","offset","limit","module_id","querySystems","toPromise","total","i0","selectors","ModuleStateService","_state","_dialog","BehaviorSubject","_loading","asObservable","pipe","filter","_","PlaceModule","all_item","debounceTime","switchMap","moduleSettings","showDriver","driver_id","shareReplay","system_id","showSystem","of","next","console","log","map","details","data","catchError","tap","toggleModuleState","error","running","stopModule","startModule","catch","err","length","notifyError","viewDetails","notifySuccess","content","open","ViewResponseModalComponent","factory","ModuleAboutComponent","driver","system","associated_settings","stopping","$localize","i18n_23","ctx","ModuleSystemsComponent","loading","combineLatest","filter$","system_list","systems","search","toLowerCase","sys","includes","ROUTES","path","component","children","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppModulesModule","CommonModule","FormsModule","RouterModule","SharedContentModule"],"sources":["./apps/backoffice/src/app/modules/modules.component.ts","./apps/backoffice/src/app/modules/module-state.service.ts","./apps/backoffice/src/app/modules/module-about.component.ts","./apps/backoffice/src/app/modules/module-systems.component.ts","./apps/backoffice/src/app/modules/modules.routes.ts","./apps/backoffice/src/app/modules/modules.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { querySystems, PlaceModule } from '@placeos/ts-client';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\n\n@Component({\n    selector: 'app-modules',\n    template: `\n        <div\n            class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\"\n        >\n            <sidebar\n                heading=\"Modules\"\n                name=\"modules\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"module\"\n                route=\"modules\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class ModulesComponent extends BaseClass {\n    /** Number of systems for the active device */\n    public system_count: number;\n    /** Whether the list of devices should show only the disconnected devices */\n    public only_disconnected: boolean;\n\n    public readonly name = 'modules';\n\n    public readonly show_options = this._service.show_options;\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n            {\n                id: 'systems',\n                name: 'Systems',\n                count: this.system_count,\n                icon: { class: 'backoffice-documents' },\n            },\n            { id: 'history', name: 'Settings History', icon: { class: 'backoffice-clock' } },\n        ].concat(this.extensions);\n    }\n\n    constructor(private _service: ActiveItemService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadValues(item as any);\n                this.updateTabList();\n            })\n        );\n        this.updateTabList();\n    }\n\n    protected async loadValues(item: PlaceModule) {\n        if (!item) return;\n        const query: any = { offset: 0, limit: 1, module_id: item.id };\n        // Get system count\n        this.system_count = (await querySystems(query).toPromise()).total;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    moduleSettings,\n    PlaceModule,\n    querySystems,\n    showDriver,\n    showSystem,\n    startModule,\n    stopModule,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, debounceTime, filter, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ModuleStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n    /** Active module */\n    public readonly item: Observable<PlaceModule> = this._state.item.pipe(\n        filter((_) => _ instanceof PlaceModule)\n    ) as any;\n    /** Observable for associated settings of the active item */\n    public readonly associated_settings = this._state.all_item.pipe(\n        debounceTime(300),\n        switchMap((item: PlaceModule) => {\n            if (!item || !(item instanceof PlaceModule)) return [];\n            return moduleSettings(item.id);\n        })\n    );\n    /** Driver associated with the active module */\n    public readonly driver = this.item.pipe(\n        switchMap((item) => showDriver(item.driver_id)),\n        shareReplay(1)\n    );\n    /** System assoicated with the active module */\n    public readonly system = this.item.pipe(\n        switchMap((item) => (item.system_id ? showSystem(item.system_id) : of(null))),\n        shareReplay(1)\n    );\n    /** System assoicated with the active module */\n    public readonly system_list = this.item.pipe(\n        switchMap((item) => {\n            this._loading.next(true);\n            console.log('Loading Systems...');\n            return querySystems({ module_id: item.id });\n        }),\n        map((details) => details.data),\n        catchError(() => []),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceModule {\n        return this._state.active_item as any;\n    }\n\n    constructor(private _state: ActiveItemService, private _dialog: MatDialog) {}\n\n    public async toggleModuleState() {\n        const method = this.active_item.running ? stopModule : startModule;\n        const error = await method(this.active_item.id)\n            .toPromise()\n            .catch((err) => err);\n        if (error) {\n            if (typeof error === 'string' && error.length < 64) {\n                notifyError(error);\n            } else {\n                notifyError(\n                    `Failed to ${this.active_item.running ? 'stop' : 'start'} device '${\n                        this.active_item.id\n                    }'.\\nView Error?`,\n                    'View',\n                    () => this.viewDetails(error)\n                );\n            }\n            return;\n        }\n        notifySuccess(`Module successfully ${this.active_item.running ? 'stopped' : 'started'}`);\n        (this.active_item as any).running = !this.active_item.running;\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { content },\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceModule } from '@placeos/ts-client';\n\nimport { ModuleStateService } from './module-state.service';\n\n@Component({\n    selector: 'module-about',\n    template: `\n        <section class=\"space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.notes\">\n                <label i18n=\"@moduleNotesLabel\">Notes:</label>\n                <div class=\"value\">{{ item.notes }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.ip\">\n                <label i18n=\"@moduleIPLabel\">IP:</label>\n                <div class=\"value\">{{ item.ip }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.port\">\n                <label i18n=\"@modulePortLabel\">Port:</label>\n                <div class=\"value\">{{ item.port }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@moduleTLSLabel\">TLS:</label>\n                <div class=\"value\">{{ item.tls }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <label i18n=\"@moduleUDPLabel\">UDP:</label>\n                <div class=\"value\">{{ item.udp }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.created_at\">\n                <label i18n=\"@@moduleCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item.updated_at\">\n                <label i18n=\"@moduleUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"driver | async\">\n                <label i18n=\"@moduleUpdatedAtLabel\">Driver:</label>\n                <a class=\"underline\" [routerLink]=\"['/drivers', item.driver_id]\">\n                    {{ (driver | async).name || '&lt;Unnamed&gt;' }}\n                </a>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"system | async\">\n                <label i18n=\"@moduleUpdatedAtLabel\">Logic for system:</label>\n                <a class=\"underline\" [routerLink]=\"['/systems', (system | async).id, 'modules']\">\n                    {{ (system | async).name }}\n                </a>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <section>\n            <button mat-button [disabled]=\"stopping\" (click)=\"toggleModuleState()\">\n                <div class=\"text\" *ngIf=\"!stopping\" i18n=\"@@moduleStateToggle\">\n                    { item.running, select, true { Stop Module } false { Start Module } }\n                </div>\n                <mat-spinner diameter=\"32\" *ngIf=\"stopping\"></mat-spinner>\n            </button>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">Settings</header>\n        <section *ngIf=\"item.settings && (other_settings | async); else load_state\">\n            <a-settings-form\n                [id]=\"item.id\"\n                [merge]=\"true\"\n                [settings]=\"item.settings\"\n                [merge_settings]=\"(other_settings | async) || []\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"p-8 flex flex-col items-center justify-center m-auto\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@moduleDetailsLoading\">Loading module settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class ModuleAboutComponent {\n    /** Driver for the active item */\n    public readonly driver = this._service.driver;\n    /** Control System for the active item */\n    public readonly system = this._service.system;\n    /** List of settings for associated modules, drivers and zones */\n    public readonly other_settings = this._service.associated_settings;\n    /** Whether module is being stopped */\n    public stopping: boolean;\n\n    public get item(): PlaceModule {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ModuleStateService) {}\n\n    public async toggleModuleState() {\n        this.stopping = true;\n        await this._service;\n        this.stopping = false;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PlaceModule, PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { Subject, Observable, of, BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    switchMap,\n    catchError,\n    map,\n} from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\nimport { ModuleStateService } from './module-state.service';\n\n@Component({\n    selector: 'module-systems',\n    template: `\n        <section class=\"flex items-center mb-4\">\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter systems...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section *ngIf=\"!(loading | async); else load_state\">\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(system_list | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">Name</div>\n                    <div class=\"w-48 p-2\" i18n=\"@@systemLabel\">No. Modules</div>\n                    <div class=\"w-36 p-2\" i18n=\"@@createdLabel\">Created</div>\n                </div>\n                <div table-body class=\"overflow-y-auto\">\n                    <div\n                        table-row\n                        *ngFor=\"\n                            let system of system_list | async;\n                            let i = index\n                        \"\n                    >\n                        <div flex class=\"flex-1 p-2 underline\">\n                            <a [routerLink]=\"['/systems', system.id]\">{{\n                                system.name\n                            }}</a>\n                        </div>\n                        <div class=\"w-48 p-2\">\n                            {{ system.installed_ui_devices || '0' }}\n                        </div>\n                        <div class=\"w-36 p-2\">\n                            {{ system.created_at * 1000 | dateFrom }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading systems...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No systems with module</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class ModuleSystemsComponent {\n    /** Subject holding the value of the search */\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** Whether systems are being loaded */\n    public readonly loading = this._service.loading;\n\n    public readonly system_list = combineLatest([\n        this.filter$,\n        this._service.system_list,\n    ]).pipe(\n        map((details) => {\n            const [filter, systems] = details;\n            const search = filter.toLowerCase();\n            return filter\n                ? systems.filter((sys) =>\n                      sys.name.toLowerCase().includes(search)\n                  )\n                : systems;\n        })\n    );\n\n    constructor(private _service: ModuleStateService) {}\n}\n","import { Routes } from '@angular/router';\n\nimport { ModulesComponent } from './modules.component';\nimport { ModuleAboutComponent } from './module-about.component';\nimport { ModuleSystemsComponent } from './module-systems.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: ModulesComponent,\n        children: [\n            { path: 'about', component: ModuleAboutComponent },\n            { path: 'systems', component: ModuleSystemsComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './modules.routes';\n\nimport { ModulesComponent } from './modules.component';\nimport { ModuleAboutComponent } from './module-about.component';\nimport { ModuleSystemsComponent } from './module-systems.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        ModulesComponent,\n        ModuleAboutComponent,\n        ModuleSystemsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppModulesModule {}\n"],"sourceRoot":"webpack:///","file":"260.64fd850c9b88d13e.js"}