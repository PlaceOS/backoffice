{"version":3,"mappings":"8KAgBO,IAAMA,EAAb,MAAM,QAKFC,cAJQC,cAAW,IAAIC,IAA8B,IAErCD,aAAUA,KAAKE,SAASC,eAGpCH,KAAKI,cAGFC,UAAUC,GAEb,MAAMC,EAASC,KADUN,SAASO,WACPC,KAAMC,GAAMA,EAAEL,KAAOA,GAChD,OAAKC,EACEK,KAAKC,MAAMN,EAAOA,QAAU,MADf,KAIXH,4DACT,MAAMI,UAAoBM,OAAkB,CACxCC,aAAc,GACdC,GAAKL,GAAMA,EACXM,KAAM,WAELC,MAAKC,OAAKR,GAAMA,EAAES,OAClBC,YACLC,QAAQC,IAAI,eAAgBf,GAC5BA,EAAYgB,KAAK,CAACC,EAAGC,KAAK,MAAC,OAAM,QAANC,IAAEC,YAAIC,eAAEC,cAAcJ,EAAEE,QACnD5B,KAAKE,SAAS6B,KAAKvB,KAGVwB,WAAWzB,iDACpB,IAAIC,EAAcR,KAAKE,SAASO,WAChC,MAAMwB,EAAU,CACZlB,aAAc,GACdC,GAAKL,GAAMA,EACXuB,UAAW3B,EACXU,KAAM,UAEJkB,QAAoB5B,EAAOD,MAC3B8B,OAAMC,+BACCJ,GAAO,CACV3B,GAAIC,EAAOD,GACXgC,OAAQ,YAEZC,SAAMF,iBAAkBJ,KAC5BZ,YACFb,EAAc,IACPA,EAAYgC,OAAQ7B,GAAMJ,EAAOD,KAAOK,EAAEL,IAC7C6B,GAEJ3B,EAAYgB,KAAK,CAACC,EAAGC,KAAK,MAAC,OAAM,QAANe,IAAEb,YAAIC,eAAEC,cAAcJ,EAAEE,QACnD5B,KAAKE,SAAS6B,KAAKvB,mDAlDdV,gCAAkB4C,QAAlB5C,EAAkB,qBAFf,SAEHA,GAAb","names":["SchemaStateService","constructor","this","BehaviorSubject","_schemas","asObservable","loadSchemas","getSchema","id","schema","schema_list","getValue","find","_","JSON","parse","query","query_params","fn","path","pipe","map","data","toPromise","console","log","sort","a","b","t","name","_a","localeCompare","next","saveSchema","details","form_data","new_schema","update","Object","method","create","filter","r","factory"],"sources":["./apps/backoffice/src/app/engine/schema-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { create, query, update } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface JsonSchema {\n    id?: string;\n    name: string;\n    description?: string;\n    schema: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SchemaStateService {\n    private _schemas = new BehaviorSubject<JsonSchema[]>([]);\n\n    public readonly schemas = this._schemas.asObservable();\n\n    constructor() {\n        this.loadSchemas();\n    }\n\n    public getSchema(id: string): HashMap {\n        const schema_list = this._schemas.getValue();\n        const schema = schema_list.find((_) => _.id === id);\n        if (!schema) return null;\n        return JSON.parse(schema.schema || '{}');\n    }\n\n    public async loadSchemas() {\n        const schema_list = await query<JsonSchema>({\n            query_params: {},\n            fn: (_) => _ as any,\n            path: 'schema',\n        })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        console.log('Schema List:', schema_list);\n        schema_list.sort((a, b) => a.name?.localeCompare(b.name));\n        this._schemas.next(schema_list);\n    }\n\n    public async saveSchema(schema: JsonSchema) {\n        let schema_list = this._schemas.getValue();\n        const details = {\n            query_params: {},\n            fn: (_) => _,\n            form_data: schema,\n            path: 'schema',\n        };\n        const new_schema = await (schema.id\n            ? update<JsonSchema>({\n                  ...details,\n                  id: schema.id,\n                  method: 'patch',\n              })\n            : create<JsonSchema>({ ...details })\n        ).toPromise();\n        schema_list = [\n            ...schema_list.filter((_) => schema.id !== _.id),\n            new_schema,\n        ];\n        schema_list.sort((a, b) => a.name?.localeCompare(b.name));\n        this._schemas.next(schema_list);\n    }\n}\n"],"sourceRoot":"webpack:///","file":"common.1d4beeef308b3267.js"}