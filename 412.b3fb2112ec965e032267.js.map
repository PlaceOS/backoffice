{"version":3,"sources":["./apps/backoffice/src/app/users/users.component.ts","./apps/backoffice/src/app/users/user-about.component.ts","./apps/backoffice/src/app/users/user-history.component.ts","./apps/backoffice/src/app/users/users-state.service.ts","./apps/backoffice/src/app/users/user-metadata.component.ts","./apps/backoffice/src/app/users/users.routes.ts","./apps/backoffice/src/app/users/users.module.ts"],"names":["UsersComponent","_service","super","name","show_options","this","tab_list","active_item","details","id","icon","class","count","metadata","concat","extensions","subscription","item","subscribe","updateTabList","UserAboutComponent","UserHistoryComponent","logs","loadUserLogs","offset","UsersStateService","_dialog","_loading","BehaviorSubject","_change","loading","asObservable","counts","combineLatest","all_item","pipe","debounceTime","switchMap","d","next","Promise","all","map","length","toPromise","catch","_","of","catchError","shareReplay","setTimeout","getValue","$event","stopPropagation","ROUTES","path","component","children","UserMetadataComponent","_schemas","form_map","edited","schema_map","name_list","control","indexOf","value","generateForms","push","Math","floor","random","description","new","field","open","maxWidth","data","form","ref","title","content","type","componentInstance","event","reason","filter","prop","err","response","message","close","markAllAsTouched","valid","controls","JSON","parse","index","findIndex","i","stringify","splice","forEach","group","validateName","editors","undefined","schema","valueChanges","getSchema","e","redirectTo","AppUsersModule"],"mappings":"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","file":"412.b3fb2112ec965e032267.js","sourcesContent":["import { Component } from '@angular/core';\nimport { PlaceUser } from '@placeos/ts-client';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\n\n@Component({\n    selector: 'app-users',\n    template: `\n        <div\n            class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\"\n        >\n            <sidebar\n                heading=\"Users\"\n                name=\"users\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"user\"\n                route=\"users\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class UsersComponent extends BaseClass {\n    public readonly name = 'users';\n\n    public readonly show_options = this._service.show_options;\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(details?: HashMap) {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n            {\n                id: 'metadata',\n                name: 'Metadata',\n                count: details?.metadata,\n                icon: { class: 'backoffice-gist' },\n            },\n            { id: 'history', name: 'History', icon: { class: 'backoffice-list' } }\n        ].concat(this.extensions);\n    }\n\n    constructor(protected _service: ActiveItemService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription('item', this._service.item.subscribe(() => this.updateTabList()));\n        this.updateTabList();\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceUser } from '@placeos/ts-client';\n\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'user-about',\n    template: `\n        <section class=\"mb-4 space-y-2\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@userCreatedAtLabel\">Email:</label>\n                <div class=\"value\">\n                    <a [href]=\"'mailto:' + item?.email\">{{ item?.email }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@userCreatedAtLabel\">Created:</label>\n                <div class=\"value\">\n                    {{ item?.created_at * 1000 | dateFrom }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.updated_at\">\n                <label i18n=\"@userUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">\n                    {{ item?.updated_at * 1000 | dateFrom }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.authority_id\">\n                <label i18n=\"@userUpdatedAtLabel\">Authority ID:</label>\n                <div class=\"value mono\">\n                    {{ item?.authority_id }}\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.groups\">\n                <label class=\"my-1\" for=\"groups\" i18n=\"@@userGroupsLabel\"\n                    >User Groups:</label\n                >\n                <div\n                    class=\"value\"\n                    *ngIf=\"item.groups?.length; else empty_group_state\"\n                >\n                    <mat-chip-list name=\"groups\">\n                        <mat-chip *ngFor=\"let group of item.groups\">{{\n                            group\n                        }}</mat-chip>\n                    </mat-chip-list>\n                </div>\n            </div>\n        </section>\n        <section>\n            <div role=\"table\">\n                <div table-head>\n                    <div class=\"w-40 p-2\" i18n=\"@@techSupportRole\">\n                        User Role\n                    </div>\n                    <div class=\"flex-1 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row>\n                        <div class=\"w-40 p-2\" i18n=\"@@techSupportRole\">\n                            Tech Support\n                        </div>\n                        <div class=\"flex-1 p-2\">\n                            {{ item?.support === true }}\n                        </div>\n                    </div>\n                    <div table-row>\n                        <div class=\"w-40 p-2\" i18n=\"@@systemAdminRole\">\n                            System Admin\n                        </div>\n                        <div class=\"flex-1 p-2\">\n                            {{ item?.sys_admin === true }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #empty_group_state>\n            <div class=\"value\">No Access Groups</div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class UserAboutComponent {\n    public get item(): PlaceUser {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {}\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { PlaceUser } from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'user-history',\n    template: `\n        <div role=\"table\" *ngIf=\"logs?.length; else empty_state\">\n            <div table-head>\n                <div class=\"w-1/3\" i18n=\"@@logEventStart\">Session Start</div>\n                <div class=\"w-1/3\" i18n=\"@@logEventEnd\">Ended</div>\n                <div class=\"w-1/3\" i18n=\"@@logEventAction\">\n                    Systems Accessed\n                </div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of logs\">\n                    <div class=\"w-1/3\">\n                        {{ item.start | date: 'MMM d, y, h:mm a' }}\n                    </div>\n                    <div class=\"w-1/3\">\n                        {{ item.end | date: 'MMM d, y, h:mm a' }}\n                    </div>\n                    <div class=\"w-1/3\">\n                        <div>{{ item.systems.length }}</div>\n                        <div>View</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 text-center\" i18n=\"@@logTableEmpty\">\n                No logs found\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserHistoryComponent extends BaseClass {\n    public logs: { start: number; end: number; systems: string[] }[] = [];\n\n    public get item(): PlaceUser {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {\n        super();\n    }\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadUserLogs();\n            })\n        );\n    }\n\n    public loadUserLogs(offset: number = 0) {}\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceMetadata, PlaceUser, PlaceZone, listMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, debounceTime, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { ActiveItemService } from '../common/item.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UsersStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _change = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly item = this._service.item;\n\n    public readonly counts = combineLatest([this._service.all_item, this._change]).pipe(\n        debounceTime(300),\n        switchMap(async (d) => {\n            const [item] = d;\n            if (!(item instanceof PlaceZone)) return {};\n            this._loading.next(true);\n            const details = await Promise.all([\n                listMetadata(item.id)\n                    .pipe(map((d) => d.length))\n                    .toPromise()\n                    .catch((_) => 0),\n            ]);\n            const [metadata] = details;\n            this._loading.next(false);\n            return {\n                metadata,\n            };\n        })\n    );\n\n    public readonly metadata: Observable<PlaceMetadata[]> = this.item.pipe(\n        switchMap((item) => {\n            if (!(item instanceof PlaceUser)) return of([]);\n            return listMetadata(item.id);\n        }),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceZone {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService, private _dialog: MatDialog) {\n        setTimeout(() => this._change.next(!this._change.getValue()), 1000);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n    PlaceMetadata,\n    removeMetadata,\n    updateMetadata,\n    PlaceUser,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    FormGroup,\n    FormControl,\n    Validators,\n    AbstractControl,\n} from '@angular/forms';\nimport { validateJSONString } from 'apps/backoffice/src/app/common/validation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MetadataDetailsModalComponent } from 'apps/backoffice/src/app/overlays/metadata-details-modal/metadata-details-modal.component';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { SchemaStateService } from '../engine/schema-state.service';\nimport { UsersStateService } from './users-state.service';\n\n@Component({\n    selector: 'user-metadata',\n    template: `\n        <div class=\"p-4\" *ngIf=\"item\">\n            <button\n                mat-button\n                (click)=\"newMetadata()\"\n                i18n=\"@@addMetadataAction\"\n            >\n                Add new Metadata Field\n            </button>\n            <div class=\"mt-4\" *ngIf=\"metadata?.length; else empty_state\">\n                <mat-accordion>\n                    <ng-container *ngFor=\"let item of metadata\">\n                        <mat-expansion-panel\n                            [class.no-padding]=\"true\"\n                            *ngIf=\"form_map[item.name]\"\n                            [formGroup]=\"form_map[item.name]\"\n                        >\n                            <mat-expansion-panel-header>\n                                <mat-panel-title>\n                                    <div edit class=\"flex-1\">\n                                        {{\n                                            form_map[item.name].controls.name\n                                                .value\n                                        }}\n                                    </div>\n                                    <ng-container *ngIf=\"edited[item.name]\">\n                                        <button\n                                            mat-button\n                                            save\n                                            *ngIf=\"\n                                                !loading[item.name];\n                                                else load_state\n                                            \"\n                                            (click)=\"$event.stopPropagation()\"\n                                            (click)=\"saveMetadata(item)\"\n                                            i18n=\"@@saveAction\"\n                                        >\n                                            Save\n                                        </button>\n                                    </ng-container>\n                                    <button\n                                        mat-icon-button\n                                        matTooltip=\"Edit Metadata Settings\"\n                                        (click)=\"\n                                            editMetadataDetails(item);\n                                            $event.stopPropagation()\n                                        \"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-edit'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <div class=\"contents\" *ngIf=\"!item.new\">\n                                        <button\n                                            mat-icon-button\n                                            matTooltip=\"Remove Metadata\"\n                                            (click)=\"deleteMetadata(item.name)\"\n                                        >\n                                            <app-icon\n                                                [icon]=\"{\n                                                    class: 'backoffice-trash'\n                                                }\"\n                                            ></app-icon>\n                                        </button>\n                                    </div>\n                                </mat-panel-title>\n                            </mat-expansion-panel-header>\n                            <div class=\"settings\">\n                                <settings-form-field\n                                    formControlName=\"details\"\n                                    lang=\"json\"\n                                    [schema]=\"this.schema_map[item.name]\"\n                                    [readonly]=\"false\"\n                                ></settings-form-field>\n                            </div>\n                        </mat-expansion-panel>\n                    </ng-container>\n                </mat-accordion>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 text-center\" i18n=\"@@userMetadataEmpty\">\n                No user metadata found\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <mat-spinner diameter=\"32\"></mat-spinner>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [edit] app-icon {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n\n            [edit]:hover app-icon {\n                opacity: 1;\n            }\n\n            mat-panel-title {\n                display: flex;\n                align-items: center;\n                height: 1.2em;\n                overflow: visible;\n            }\n\n            mat-panel-title [save] {\n                font-size: 0.8em;\n                background: none;\n                border: none;\n                text-decoration: underline;\n                color: inherit;\n            }\n\n            mat-form-field {\n                height: 3em;\n            }\n\n            .settings {\n                width: 100%;\n            }\n\n            .contents {\n                display: flex;\n                justify-content: flex-end;\n                flex: 1;\n                min-width: 2em;\n            }\n\n            .contents button {\n                text-decoration: none;\n            }\n        `,\n    ],\n})\nexport class UserMetadataComponent extends BaseClass implements OnInit {\n    /** List of metadata associated with the user */\n    public metadata: PlaceMetadata[];\n    /** Map of form field groups to metadata fields */\n    public form_map: HashMap<FormGroup> = {};\n    /** Map of metadata fields to whether they have been edited */\n    public edited: HashMap<boolean> = {};\n    /** Map of metadata properties to whether they are saving */\n    public loading: HashMap<boolean> = {};\n    /** Map of metadata schemas to the associated metadata */\n    public schema_map: HashMap<HashMap | string> = {};\n\n    public get item(): PlaceUser {\n        return this._service.active_item as any;\n    }\n\n    private validateName(name_list: string[]) {\n        return (control: AbstractControl) => {\n            return name_list.indexOf(control.value) >= 0\n                ? { name: true }\n                : null;\n        };\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _service: UsersStateService,\n        private _schemas: SchemaStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'metadata',\n            this._service.metadata.subscribe((d) => {\n                this.metadata = d;\n                this.generateForms();\n            })\n        );\n    }\n\n    public newMetadata() {\n        this.metadata.push({\n            name: `new_field_${Math.floor(Math.random() * 999_999_999)}`,\n            description: '',\n            new: true,\n            details: {},\n        } as any);\n        this.generateForms();\n    }\n\n    public editMetadataDetails(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        this._dialog.open(MetadataDetailsModalComponent, {\n            maxWidth: '95vw',\n            data: {\n                form,\n            },\n        });\n    }\n\n    /**\n     * Delete the given metadata field\n     * @param field Name of the field to remove\n     */\n    public deleteMetadata(field: string) {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want delete the metadata property \"${field}\"?</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    removeMetadata(this.item.id, { name: field }).subscribe(\n                        () => {\n                            notifySuccess(\n                                `Successfully removed \"${field}\" metadata.`\n                            );\n                            this.metadata = this.metadata.filter(\n                                (prop) => prop.name !== field\n                            );\n                            this.generateForms();\n                        },\n                        (err) =>\n                            notifyError(\n                                `Error removing old \"${field}\" metadata. Error: ${\n                                    err.response || err.message || err\n                                }`\n                            )\n                    );\n                }\n                ref.close();\n            })\n        );\n    }\n\n    public saveMetadata(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        form.markAllAsTouched();\n        if (!form.valid)\n            return notifyError(\n                `JSON for property \"${form.controls.name.value}\" is invalid`\n            );\n        const value = form.value;\n        this.loading[field.name] = true;\n        updateMetadata(this.item.id, {\n            ...value,\n            details: JSON.parse(value.details),\n        }).subscribe(\n            (item: PlaceMetadata) => {\n                this.loading[field.name] = false;\n                const index = this.metadata.findIndex(\n                    (i) => i.name === field.name\n                );\n                this.edited[field.name] = false;\n                if (field.name !== item.name) {\n                    removeMetadata(this.item.id, field)\n                        .toPromise()\n                        .catch((err) =>\n                            notifyError(\n                                `Error removing old \"${\n                                    field.name\n                                }\" metadata. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            )\n                        );\n                }\n                if (index >= 0) {\n                    this.metadata.splice(index, 1, {\n                        ...item,\n                        new: false,\n                    } as any);\n                }\n                notifySuccess(`Saved \"${value.name}\" metadata.`);\n                this.generateForms();\n            },\n            (err) => {\n                this.loading[field.name] = false;\n                notifyError(\n                    `Error saving \"${\n                        value.name\n                    }\" metadata. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    private generateForms() {\n        delete this.form_map;\n        this.form_map = {};\n        this.metadata.forEach((group) => {\n            const details =\n                typeof group.details === 'string'\n                    ? JSON.parse(group.details)\n                    : group.details;\n            this.form_map[group.name] = new FormGroup({\n                name: new FormControl(group.name, [\n                    Validators.required,\n                    this.validateName(\n                        this.metadata\n                            .filter((i) => i.name !== group.name)\n                            .map((i) => i.name)\n                    ),\n                ]),\n                description: new FormControl(group.description),\n                editors: new FormControl(group.editors),\n                details: new FormControl(\n                    JSON.stringify(details || {}, undefined, 4),\n                    [Validators.required, validateJSONString]\n                ),\n                schema: new FormControl(group.schema),\n            });\n            this.subscription(\n                `${group.name}_changes`,\n                this.form_map[group.name].valueChanges.subscribe(\n                    () => (this.edited[group.name] = true)\n                )\n            );\n            this.subscription(\n                `${group.name}_schema`,\n                this.form_map[\n                    group.name\n                ].controls.schema.valueChanges.subscribe((_) => {\n                    let schema = this._schemas.getSchema(_);\n                    if (!schema) {\n                        try {\n                            schema = JSON.parse(_);\n                        } catch (e) {\n                            schema = {};\n                        }\n                    }\n                    this.schema_map[group.name] = schema;\n                })\n            );\n        });\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { UsersComponent } from './users.component';\nimport { UserAboutComponent } from './user-about.component';\nimport { UserHistoryComponent } from './user-history.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { UserMetadataComponent } from './user-metadata.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: UsersComponent,\n        children: [\n            { path: 'about', component: UserAboutComponent },\n            { path: 'metadata', component: UserMetadataComponent },\n            { path: 'history', component: UserHistoryComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './users.routes';\n\nimport { UsersComponent } from './users.component';\nimport { UserAboutComponent } from './user-about.component';\nimport { UserHistoryComponent } from './user-history.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { UserMetadataComponent } from './user-metadata.component';\n\n@NgModule({\n    declarations: [\n        UsersComponent,\n        UserAboutComponent,\n        UserHistoryComponent,\n        UserMetadataComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppUsersModule {}\n"],"sourceRoot":"webpack:///"}