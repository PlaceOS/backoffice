{"version":3,"sources":["./apps/backoffice/src/app/domains/domain-state.service.ts","./apps/backoffice/src/app/domains/domains.component.ts","./apps/backoffice/src/app/domains/domain-applications.component.ts","./apps/backoffice/src/app/domains/domain-authentication.component.ts","./apps/backoffice/src/app/domains/domain-users.component.ts","./apps/backoffice/src/app/domains/domain-about.component.ts","./apps/backoffice/src/app/domains/domains.routes.ts","./apps/backoffice/src/app/domains/domains.module.ts"],"names":["DomainStateService","_state","_dialog","_loading","BehaviorSubject","_changed","item","this","loading","asObservable","users","combineLatest","pipe","filter","_","switchMap","authority","id","map","data","catchError","shareReplay","auth_sources","q","list","forEach","array","concat","applications","counts","details","Promise","all","total","toPromise","saml","oauth","ldap","active_item","domain","replaceItem","owner_id","ref","open","height","width","maxHeight","maxWidth","name","save","i","race","componentInstance","event","first","reason","afterClosed","next","Date","valueOf","title","content","icon","type","class","err","catch","close","responseText","message","auth_source","method","DomainsComponent","_service","super","tab_list","count","extensions","updateTabList","subscription","subscribe","c","DomainApplicationsComponent","show_secret","newApplication","editApplication","deleteApplication","secret","DomainAuthenticationComponent","source_types","newAuthSource","editAuthSource","source","deleteAuthSource","DomainUsersComponent","ROUTES","path","component","children","DomainAboutComponent","loadForm","form","config","JSON","stringify","undefined","internals","valueChanges","saveChanges","timeout","valid","parse","value","update","redirectTo","AppDomainsModule"],"mappings":"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","file":"336.de4302b2fb132f7e5ac4.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addApplication,\n    PlaceApplication,\n    PlaceDomain,\n    PlaceLDAPSource,\n    PlaceOAuthSource,\n    PlaceSAMLSource,\n    PlaceUser,\n    queryApplications,\n    queryLDAPSources,\n    queryOAuthSources,\n    querySAMLSources,\n    queryUsers,\n    removeApplication,\n    removeLDAPSource,\n    removeOAuthSource,\n    removeSAMLSource,\n    updateApplication,\n    updateDomain,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, merge, Observable, of } from 'rxjs';\nimport { catchError, filter, first, map, share, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { AuthSourceModalComponent } from '../overlays/auth-source-modal/auth-source-modal.component';\nimport { ItemCreateUpdateModalComponent } from '../overlays/item-modal/item-modal.component';\n\nexport type PlaceAuthSource = PlaceOAuthSource | PlaceSAMLSource | PlaceLDAPSource;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DomainStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _changed = new BehaviorSubject<number>(0);\n\n    public readonly item: Observable<PlaceDomain> = this._state.item as any;\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly users: Observable<PlaceUser[]> = combineLatest([this._changed, this.item]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => queryUsers({ authority: item.id } as any)),\n        map((_) => _.data),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly auth_sources: Observable<PlaceAuthSource[]> = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => {\n            const q = { authority: item.id };\n            return combineLatest([\n                querySAMLSources(q as any).pipe(map((_) => _.data)),\n                queryOAuthSources(q as any).pipe(map((_) => _.data)),\n                queryLDAPSources(q as any).pipe(map((_) => _.data)),\n            ]);\n        }),\n        map((_) => {\n            let list = [];\n            _.forEach((array) => (list = list.concat(array)));\n            return list;\n        }),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly applications: Observable<PlaceApplication[]> = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(([_, item]) => queryApplications({ authority: item.id } as any)),\n        map((_) => _.data),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n\n    public readonly counts = combineLatest([\n        this._changed,\n        this.item,\n    ]).pipe(\n        filter(([_, item]) => item instanceof PlaceDomain),\n        switchMap(async ([_, item]) => {\n            const q = { authority: item?.id };\n            const details = await Promise.all([\n                queryApplications(q as any)\n                    .pipe(map((_) => _.total))\n                    .toPromise(),\n                combineLatest([\n                    querySAMLSources(q as any),\n                    queryOAuthSources(q as any),\n                    queryLDAPSources(q as any),\n                ])\n                    .pipe(map(([saml, oauth, ldap]) => saml.total + oauth.total + ldap.total))\n                    .toPromise(),\n                queryUsers(q as any)\n                    .pipe(map((_) => _.total))\n                    .toPromise(),\n            ]);\n            const [applications, auth_sources, users] = details;\n            return {\n                applications,\n                auth_sources: auth_sources || 0,\n                users,\n            };\n        }),\n        shareReplay(1)\n    );\n\n    public get active_item() {\n        return this._state.active_item;\n    }\n\n    constructor(private _state: ActiveItemService, private _dialog: MatDialog) {}\n\n    public async update(domain: PlaceDomain) {\n        const item = await updateDomain(domain.id, domain).toPromise();\n        this._state.replaceItem(item);\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public async editApplication(item?: PlaceApplication) {\n        item = item || new PlaceApplication({ owner_id: this.active_item.id });\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Application',\n                save: (i) => (i.id ? updateApplication(i.id, i) : addApplication(i)),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')).toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details) return;\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Remove application from domain\n     * @param item Application to delete\n     */\n    public async deleteApplication(item: PlaceApplication) {\n        const details = await openConfirmModal(\n            {\n                title: `Delete application`,\n                content: `<p>Are you sure you want delete the application ${item.name}?</p><p>Configuration will be <strong>immediately</strong> updated</p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Deleting domain application...');\n        const err = await removeApplication(item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing domain application. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed domain application.');\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public async editAuthSource(item?: PlaceAuthSource) {\n        const ref = this._dialog.open(AuthSourceModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                auth_source: item,\n                domain: this.active_item,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')).toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details) return;\n        this._changed.next(new Date().valueOf());\n    }\n\n    /**\n     * Remove application from domain\n     * @param item Application to delete\n     */\n    public async deleteAuthSource(item: PlaceAuthSource) {\n        const details = await openConfirmModal(\n            {\n                title: `Delete auth source`,\n                content: `<p>Are you sure you want delete this auth source?</p><p>Deleting this will remove this auth source <strong>immediately</strong></p>`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Deleting domain auth source...');\n        const method =\n            item instanceof PlaceSAMLSource\n                ? removeSAMLSource\n                : item instanceof PlaceOAuthSource\n                ? removeOAuthSource\n                : removeLDAPSource;\n        const err = await method(item.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing domain auth source. Error: ${\n                    err.responseText || err.message || err\n                }`\n            );\n        notifySuccess('Successfully removed domain auth source.');\n        this._changed.next(new Date().valueOf());\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain, queryApplications, queryLDAPSources, queryOAuthSources, querySAMLSources, queryUsers } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { DomainStateService } from './domain-state.service';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\n\n@Component({\n    selector: 'app-domains',\n    template: `\n        <div\n            class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\"\n        >\n            <sidebar\n                heading=\"Domains\"\n                name=\"domains\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"domain\"\n                route=\"domains\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2\"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class DomainsComponent extends BaseClass {\n    /** Number of triggers for the active system */\n    public applications: number;\n    /** Number of triggers for the active system */\n    public auth_sources: number;\n    /** Number of triggers for the active system */\n    public user_count: number;\n\n    public readonly name = 'domains';\n\n    constructor(private _service: DomainStateService) {\n        super();\n    }\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(count: HashMap<number>) {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'applications',\n                name: 'Applications',\n                count: count.applications || 0,\n                icon: { class: 'backoffice-publish' },\n            },\n            {\n                id: 'authentication',\n                name: 'Authentication',\n                count: count.auth_sources || 0,\n                icon: { class: 'backoffice-lock-open' },\n            },\n            {\n                id: 'users',\n                name: 'Users',\n                count: count.users || 0,\n                icon: { class: 'backoffice-users' },\n            },\n        ].concat(this.extensions);\n    }\n\n    public ngOnInit(): void {\n        this.updateTabList({});\n        this.subscription(\n            'item',\n            this._service.counts.subscribe((c) => this.updateTabList(c as any))\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain, PlaceApplication } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport { copyToClipboard } from 'apps/backoffice/src/app/common/general';\nimport { notifyInfo } from 'apps/backoffice/src/app/common/notifications';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-applications',\n    template: `\n        <button\n            mat-button\n            class=\"w-full sm:w-40 mb-4\"\n            (click)=\"newApplication()\"\n            i18n=\"@@newAction\"\n        >\n            New Application\n        </button>\n        <div\n            role=\"table\"\n            class=\"overflow-x-auto\"\n            *ngIf=\"(applications | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"w-40 p-2\" i18n=\"@@applicationTableName\">Name</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@applicationTableRedirect\">\n                    Redirect\n                </div>\n                <div class=\"w-48 p-2\" i18n=\"@@applicationTableClientId\">\n                    Client ID\n                </div>\n                <div class=\"w-48 p-2\" i18n=\"@@applicationTableClientSecret\">\n                    Secret\n                </div>\n                <div class=\"w-24 p-2\" i18n=\"@@applicationTableScope\">Scope</div>\n                <div class=\"w-24\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of applications | async\">\n                    <div class=\"w-40 p-2\" [matTooltip]=\"item.id\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"flex-1 p-2 underline overflow-hidden\">\n                        <a [href]=\"item.redirect_uri\" class=\"truncate\">{{\n                            item.redirect_uri\n                        }}</a>\n                    </div>\n                    <div class=\"w-48 p-2 truncate text-xs\">{{ item.uid }}</div>\n                    <div\n                        class=\"w-48 p-2 truncate underline text-center text-xs\"\n                        (click)=\"\n                            !show_secret[item.id]\n                                ? (show_secret[item.id] = true)\n                                : copySecret(item)\n                        \"\n                    >\n                        {{ show_secret[item.id] ? item.secret : 'Show' }}\n                    </div>\n                    <div class=\"w-24 p-2\">{{ item.scopes }}</div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"editApplication(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"deleteApplication(item)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div empty-state>\n                <p i18n=\"@@applicationTableEmpty\">No applications found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            [role='table'] > div {\n                min-width: 56rem;\n            }\n        `,\n    ],\n})\nexport class DomainApplicationsComponent {\n    /** List of applications associated with the active domain */\n    public readonly applications = this._service.applications;\n\n    public show_secret: HashMap<boolean> = {};\n\n    public readonly newApplication = () => this._service.editApplication();\n    public readonly editApplication = (item) =>\n        this._service.editApplication(item);\n    public readonly deleteApplication = (item) =>\n        this._service.deleteApplication(item);\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n\n    public copySecret(item: PlaceApplication) {\n        this.show_secret[item.id] = false;\n        copyToClipboard(item.secret);\n        notifyInfo('Copied client secret to clipboard');\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-authentication',\n    template: `\n        <button\n            mat-button\n            class=\"w-full sm:w-40 mb-4\"\n            (click)=\"newAuthSource()\"\n            i18n=\"@@newAction\"\n        >\n            New Auth Source\n        </button>\n        <div\n            role=\"table\"\n            *ngIf=\"(auth_sources | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\" i18n=\"@@authTableName\">Name</div>\n                <div class=\"w-32 p-2\" i18n=\"@@authTableType\">Type</div>\n                <div class=\"w-24 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of auth_sources | async\">\n                    <div class=\"flex-1 p-2\" [matTooltip]=\"item.id\">\n                        {{ item.name }}\n                    </div>\n                    <div class=\"w-32 p-2 uppercase\">{{ item.type }}</div>\n                    <div class=\"w-24 flex items-center justify-center\">\n                        <button mat-icon-button (click)=\"editAuthSource(item)\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-edit' }\"\n                            ></app-icon>\n                        </button>\n                        <button\n                            mat-icon-button\n                            (click)=\"deleteAuthSource(item)\"\n                        >\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-trash' }\"\n                            ></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div empty-state>\n                <p i18n=\"@@authTableEmpty\">No authentication sources found</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainAuthenticationComponent {\n    /** List of auth sources associated with the active domain */\n    public readonly auth_sources = this._service.auth_sources;\n    /** Mapping of auth sources to their type */\n    public source_types: HashMap<'oauth' | 'saml' | 'ldap'> = {};\n\n    public readonly newAuthSource = () => this._service.editAuthSource();\n    public readonly editAuthSource = (source) =>\n        this._service.editAuthSource(source);\n    public readonly deleteAuthSource = (source) =>\n        this._service.deleteAuthSource(source);\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'domain-users',\n    template: `\n        <div role=\"table\" *ngIf=\"(users | async)?.length; else empty_state\">\n            <div table-head>\n                <div class=\"w-64 p-2\" i18n=\"@@userTableName\">Name</div>\n                <div class=\"flex-1 p-2\" i18n=\"@@userTableEmail\">Email</div>\n                <div class=\"w-24 p-2\" i18n=\"@@userTableRole\">Role</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of users | async\">\n                    <div class=\"w-64 p-2 underline\">\n                        <a\n                            [routerLink]=\"['/users', item.id]\"\n                            [matTooltip]=\"item.id\"\n                            matTooltipPosition=\"right\"\n                        >\n                            {{ item.name }}\n                        </a>\n                    </div>\n                    <div class=\"flex-1 p-2 underline\">\n                        <a [href]=\"'mailto:' + item.email\">{{ item.email }}</a>\n                    </div>\n                    <div class=\"w-24 p-2\">\n                        <span class=\"text-black\" [class.text-opacity-20]=\"!item.sys_admin && !item.support\">\n                            {{ item.sys_admin ? 'Admin' : item.support ? 'Support' : 'None' }}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <p i18n=\"@@userTableEmpty\">No users associated with domain</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainUsersComponent {\n    public readonly users = this._service.users;\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { PlaceDomain } from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { validateJSONString } from 'apps/backoffice/src/app/common/validation';\nimport { DomainStateService } from './domain-state.service';\n\n@Component({\n    selector: 'app-domain-about',\n    template: `\n        <h3 class=\"text-lg font-medium mb-2\">Settings</h3>\n        <section *ngIf=\"form\" [formGroup]=\"form\">\n            <mat-tab-group [(selectedIndex)]=\"index\">\n                <mat-tab label=\"Config\"> </mat-tab>\n                <mat-tab label=\"Internals\"> </mat-tab>\n            </mat-tab-group>\n            <settings-form-field\n                *ngIf=\"index !== 1\"\n                formControlName=\"config\"\n                lang=\"json\"\n                [readonly]=\"false\"\n            ></settings-form-field>\n            <settings-form-field\n                *ngIf=\"index === 1\"\n                formControlName=\"internals\"\n                lang=\"json\"\n                [readonly]=\"false\"\n            ></settings-form-field>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DomainAboutComponent extends BaseClass implements OnInit {\n    /** Form group for edit domain settings */\n    public form: FormGroup;\n    /** Index of the active tab */\n    public index: number;\n\n    public get item(): PlaceDomain {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: DomainStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((_) => this.loadForm())\n        );\n    }\n\n    /** Load form fields for active item */\n    private loadForm(): void {\n        this.form = new FormGroup({\n            config: new FormControl(\n                JSON.stringify(this.item.config, undefined, 4),\n                [validateJSONString]\n            ),\n            internals: new FormControl(\n                JSON.stringify(this.item.internals, undefined, 4),\n                [validateJSONString]\n            ),\n        });\n        this.subscription(\n            'form',\n            this.form.valueChanges.subscribe(() => this.saveChanges())\n        );\n    }\n\n    /** Save changes to the form fields */\n    private saveChanges(): void {\n        this.timeout(\n            'save',\n            async () => {\n                if (this.form.valid) {\n                    const domain = new PlaceDomain({\n                        ...this.item,\n                        config: JSON.parse(this.form.value.config),\n                        internals: JSON.parse(this.form.value.internals),\n                    });\n                    this._service.update(domain);\n                }\n            },\n            3000\n        );\n    }\n}\n","import { Routes } from '@angular/router';\nimport { DomainsComponent } from './domains.component';\nimport { DomainApplicationsComponent } from './domain-applications.component';\nimport { DomainAuthenticationComponent } from './domain-authentication.component';\nimport { DomainUsersComponent } from './domain-users.component';\nimport { DomainAboutComponent } from './domain-about.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: DomainsComponent,\n        children: [\n            { path: 'about', component: DomainAboutComponent },\n            { path: 'applications', component: DomainApplicationsComponent },\n            { path: 'authentication', component: DomainAuthenticationComponent },\n            { path: 'users', component: DomainUsersComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './domains.routes';\n\nimport { DomainsComponent } from './domains.component';\nimport { DomainApplicationsComponent } from './domain-applications.component';\nimport { DomainAuthenticationComponent } from './domain-authentication.component';\nimport { DomainUsersComponent } from './domain-users.component';\nimport { DomainAboutComponent } from './domain-about.component';\n\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        DomainsComponent,\n        DomainApplicationsComponent,\n        DomainAuthenticationComponent,\n        DomainUsersComponent,\n        DomainAboutComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppDomainsModule {}\n"],"sourceRoot":"webpack:///"}