{"version":3,"file":"349.7a65bc14aaf9b5f0.js","mappings":"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","names":["i0","PlaceComponent","BaseClass","constructor","_settings","_service","_users","_debug","super","this","extensions","extensionsForItem","active_item","dark_mode","debug_position","position","updateTabList","tab_list","id","name","icon","class","concat","ngOnInit","title","selectors","PlaceDatabase","reindex","backfill","url","apiEndpoint","post","toPromise","t","factory","PlaceDatabaseDetailsComponent","_engine_service","reindexing","then","err","notifyError","JSON","stringify","response","message","backfilling","ctx","PlaceDetailsComponent","_dialog","user","backoffice_version","VERSION","stamp","backoffice_tag","tag","backoffice_hash","hash","backoffice_build","format","loadApiDetails","loadPlatformDetails","changelog","log","open","ChangelogModalComponent","data","copy","content","copyToClipboard","notifyInfo","get","details","api_details","version","catch","_this","changelog_data","replace","backend_version","backoffice_logs","fetch","text","$localize","AdminClusterNodeComponent","used_memory","humanReadableByteCount","node","memory_usage","total_memory","memory_total","memory_percentage","generateCharts","ngOnChanges","changes","history","list","length","unshift","slice","Math","max","map","event","idx","x","y","value","points","PlaceClusterItemComponent","cluster","cluster_nodes","edge_nodes","cpu_history","PlaceClusterTaskListComponent","EventEmitter","BehaviorSubject","interval","pipe","startWith","filter","loading","switchMap","queryProcesses","include_status","catchError","_","console","error","of","l","sort","a","b","module_instances","tap","shareReplay","combineLatest","process_list","processes","toLowerCase","includes","confirmKillProcess","process","ref","ConfirmModalComponent","CONFIRM_METADATA","type","subscription","componentInstance","subscribe","reason","killing","killProcess","close","terminateProcess","PlaceClusterDetailsComponent","active_cluster","queryClusters","resp","cluster_list","date","Date","now","forEach","nodes","hostname","push","core_cpu","shift","clusters$","AdminInterfacesComponent","loadInterfaces","interfaces","listInterfaceRepositories","Object","keys","AdminBrokersComponent","loadBrokers","newBroker","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","item","PlaceMQTTBroker","save","addBroker","editBroker","updateBroker","deleteBroker","openConfirmModal","removeBroker","notifySuccess","brokers","queryBrokers","_this2","$event","ExtensionModalComponent","_data","_hotkey","FormGroup","FormControl","Validators","conditions","listen","submit","form","patchValue","addCondition","controls","removeCondition","condition","setValue","c","markAllAsTouched","valid","emit","metadata","MAT_DIALOG_DATA","PlaceExtensionsComponent","domain_list","queryDomains","r","setDomain","domain","config","backoffice","extend","extension_list","localeCompare","editExtension","parse","undefined","first","i","updateDomain","removeExtension","_this3","e","ext","_this4","updated","PlaceDomain","BookingLimitsModalComponent","_dialog_ref","tenant","booking_limits","limits","k","amount","disableClose","FIELD_NAME_MAPPING","issuer","conference_type","signing_key","sub","client_id","client_secret","scopes","user_agent","StaffTenantModalComponent","delegated","platform","service_account","credentials","office_form","google_form","fields","handleDelegation","field","disable","setValidators","enable","updateValueAndValidity","valueChanges","removeControl","addControl","app_id","app_domain","app_resource","source_location","base_path","getInvalidFields","reduce","m","show_outlook","key","outlook_config","cleanObject","put","PlaceStaffAPIComponent","tenants","getValue","next","editTenant","afterClosed","editLimits","removeTenant","system","del","statusText","EdgeModalComponent","edge","description","new_edge","updateEdge","addEdge","PlaceEdgeComponent","_clipboard","_change","debounceTime","queryEdges","_edge_list","_hide","hide","retrieveEdgeToken","token","sessionStorage","setItem","last_change","removeEdge","removeItem","edge_data","getItem","copyKey","AdminSchemasComponent","_state","schemas","copySchema","active_schema","schema_copy","newSchema","schema","saveSchema","getTime","dirtyDate","requiredArgs","arguments","toDate","timestamp","getUnixTime","floor","PlaceAPIKeyDetails","user_id","authority_id","permissions","created_at","updated_at","secret","x_api_key","ctx_r19","APIKeyModalComponent","available_scopes","users","sys_admin","support","ENTER","COMMA","SPACE","setTimeout","_input_el","nativeElement","focus","s","setSearch","addChipItem","removeChipItem","scope_list","join","APIKeyService","_last_key","asObservable","_domain","limit","query","query_params","fn","d","path","_search","q","queryUsers","newKey","Promise","race","create","form_data","removeKey","remove","ROUTES","component","canActivate","AuthorisedAdminGuard","children","AdminAPIKeysComponent","active_domain","available_domains","available_keys","last_key","take","ExtensionOutletComponent","redirectTo","AppPlaceModule","imports","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule","period","scheduler","async","isNumeric","schedule","Observable","subscriber","add","dispatch","counter","state"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/admin/admin.component.ts","./apps/backoffice/src/app/common/database.service.ts","./apps/backoffice/src/app/admin/database-details.component.ts","./apps/backoffice/src/app/admin/details.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-node.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-item.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-task-list.component.ts","./apps/backoffice/src/app/admin/cluster-details/cluster-details.component.ts","./apps/backoffice/src/app/admin/interfaces.component.ts","./apps/backoffice/src/app/admin/brokers.component.ts","./apps/backoffice/src/app/admin/extension-modal/extension-modal.component.html","./apps/backoffice/src/app/admin/extension-modal/extension-modal.component.ts","./apps/backoffice/src/app/admin/extensions.component.ts","./apps/backoffice/src/app/admin/booking-limits-modal.component.ts","./apps/backoffice/src/app/admin/staff-tenant-modal.component.ts","./apps/backoffice/src/app/admin/staff-api.component.ts","./apps/backoffice/src/app/admin/edge-modal.component.ts","./apps/backoffice/src/app/admin/edge.component.ts","./apps/backoffice/src/app/admin/schemas.component.ts","./node_modules/date-fns/esm/getTime/index.js","./node_modules/date-fns/esm/getUnixTime/index.js","./apps/backoffice/src/app/admin/api-keys/api-key-details.class.ts","./apps/backoffice/src/app/admin/api-keys/api-key-modal.component.ts","./apps/backoffice/src/app/admin/api-keys/api-keys.service.ts","./apps/backoffice/src/app/admin/api-keys/api-keys.component.ts","./apps/backoffice/src/app/admin/admin.routes.ts","./apps/backoffice/src/app/admin/admin.module.ts","./node_modules/rxjs/_esm2015/internal/observable/interval.js"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { ActiveItemService } from '../common/item.service';\nimport { SettingsService } from '../common/settings.service';\nimport { BackofficeUsersService } from '../users/users.service';\n\n@Component({\n    selector: 'app-engine',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <div class=\"flex flex-col h-full flex-1 overflow-hidden w-px\">\n                <div\n                    class=\"flex flex-1 z-0 h-1/2 dark:text-white dark:bg-neutral-700\"\n                >\n                    <div\n                        class=\"h-full relative sm:w-56 px-2 my-4 border-r border-gray-400 border-opacity-30 z-10 pt-10 sm:pt-0\"\n                    >\n                        <a\n                            *ngFor=\"let item of tab_list\"\n                            class=\"flex items-center space-x-2 m-2 rounded h-8 px-3 hover:bg-primary hover:bg-opacity-25\"\n                            [routerLink]=\"['/admin', item.id]\"\n                            routerLinkActive=\"active\"\n                        >\n                            <app-icon [icon]=\"item.icon\"></app-icon>\n                            <span class=\"hidden sm:block\">{{ item.name }}</span>\n                        </a>\n                    </div>\n                    <div\n                        class=\"relative flex-1 w-1/2 h-full z-0 px-4 dark:text-white overflow-auto\"\n                    >\n                        <router-outlet></router-outlet>\n                    </div>\n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2 absolute top-2 left-4 z-40\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </div>\n                <app-debug-output\n                    below\n                    *ngIf=\"debug_position === 'below'\"\n                ></app-debug-output>\n            </div>\n            <app-debug-output\n                side\n                *ngIf=\"debug_position === 'side'\"\n                class=\"h-full max-w-[30rem]\"\n            ></app-debug-output>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n\n            .active {\n                background-color: var(--primary) !important;\n                color: #fff;\n                margin-right: -1px;\n            }\n        `,\n    ],\n})\nexport class PlaceComponent extends BaseClass {\n    public tab_list = [];\n    public open_menu = false;\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, 'admin');\n    }\n\n    public get dark_mode() {\n        return this._users.dark_mode;\n    }\n\n    public get debug_position() {\n        return this._debug.position;\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            { id: 'about', name: 'About', icon: { class: 'backoffice-info' } },\n            {\n                id: 'database',\n                name: 'Database',\n                icon: { class: 'backoffice-database' },\n            },\n            {\n                id: 'clusters',\n                name: 'Clusters',\n                icon: { class: 'backoffice-server' },\n            },\n            { id: 'edge', name: 'Edges', icon: { class: 'backoffice-server' } },\n            {\n                id: 'interfaces',\n                name: 'Interfaces',\n                icon: { class: 'backoffice-browser' },\n            },\n            {\n                id: 'brokers',\n                name: 'MQTT Brokers',\n                icon: { class: 'backoffice-server' },\n            },\n            {\n                id: 'staff-api',\n                name: 'Staff API',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'extensions',\n                name: 'Extensions',\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'api-keys',\n                name: 'API Keys',\n                icon: { class: 'backoffice-key' },\n            },\n            {\n                id: 'schemas',\n                name: 'Custom Schemas',\n                icon: { class: 'backoffice-list' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _service: ActiveItemService,\n        private _users: BackofficeUsersService,\n        private _debug: PlaceDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.title = 'Admin';\n        this.updateTabList();\n    }\n}\n","import { post, apiEndpoint } from '@placeos/ts-client';\nimport { Injectable } from '@angular/core';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PlaceDatabase extends BaseClass {\n    public reindex(backfill: boolean = true) {\n        const url = `${apiEndpoint()}/reindex${\n            backfill ? '?backfill=true' : ''\n        }`;\n        return post(url, null).toPromise();\n    }\n\n    public backfill() {\n        const url = `${apiEndpoint()}/backfill`;\n        return post(url, null).toPromise();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { PlaceDatabase } from 'apps/backoffice/src/app/common/database.service';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\n\n@Component({\n    selector: 'app-database-details',\n    template: `\n        <div class=\"flex w-full p-4 space-x-4\">\n            <div\n                class=\"rounded p-2 border border-gray-200 dark:border-neutral-500 space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <p class=\"text-center p-2\">\n                    Re-index elasticsearch for the<br />current state of the\n                    database\n                </p>\n                <button\n                    mat-button\n                    class=\"w-[calc(100%-0.5rem)]\"\n                    [disabled]=\"reindexing\"\n                    (click)=\"reindex()\"\n                >\n                    <ng-container *ngIf=\"!reindexing; else spinner\">\n                        Re-index\n                    </ng-container>\n                </button>\n            </div>\n            <div\n                class=\"rounded p-2 border border-gray-200 dark:border-neutral-500 space-y-2 w-1/3 flex-1 flex flex-col\"\n            >\n                <p class=\"text-center p-2\">\n                    Backfill elasticsearch with the<br />current state of the\n                    database\n                </p>\n                <button\n                    mat-button\n                    class=\"w-[calc(100%-0.5rem)]\"\n                    [disabled]=\"backfilling\"\n                    (click)=\"backfill()\"\n                >\n                    <ng-container *ngIf=\"!backfilling; else spinner\">\n                        Backfill\n                    </ng-container>\n                </button>\n            </div>\n        </div>\n        <ng-template #spinner>\n            <div class=\"flex justify-center w-full my-1\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding-top: 1em;\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            button {\n                min-width: 10em;\n                margin: 0.25em;\n            }\n\n            mat-card {\n                margin: 0.5em;\n                text-align: center;\n            }\n        `,\n    ],\n})\nexport class PlaceDatabaseDetailsComponent {\n    /** Whether backend is reindexing the database */\n    public reindexing: boolean;\n    /** Whether backend is reindexing the database */\n    public backfilling: boolean;\n\n    constructor(private _engine_service: PlaceDatabase) {}\n\n    public reindex() {\n        this.reindexing = true;\n        this._engine_service.reindex().then(\n            () => (this.reindexing = false),\n            (err) => {\n                this.reindexing = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    public backfill() {\n        this.backfilling = true;\n        this._engine_service.backfill().then(\n            () => (this.backfilling = false),\n            (err) => {\n                this.backfilling = false;\n                notifyError(\n                    `Error reindexing database. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { get, apiEndpoint } from '@placeos/ts-client';\n\nimport { VERSION } from '../../environments/version';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ChangelogModalComponent,\n    ChangelogModalData,\n} from 'apps/backoffice/src/app/overlays/changelog-modal/changelog-modal.component';\nimport { BackofficeUsersService } from 'apps/backoffice/src/app/users/users.service';\nimport {\n    notifyError,\n    notifyInfo,\n} from 'apps/backoffice/src/app/common/notifications';\n\nimport { copyToClipboard } from '../common/general';\nimport { format } from 'date-fns';\n\nexport interface PlaceServiceDetails {\n    /** Name of the service */\n    service: string;\n    /** Commit hash of the service */\n    commit: string;\n    /** Current version number of the service */\n    version: string;\n    /** Build time of the active version of the service */\n    build_time: string;\n    /** Version of the backend service platform */\n    platform_version: string;\n}\n\n@Component({\n    selector: 'app-engine-details',\n    template: `\n        <div class=\"flex items-center space-x-2\">\n            <h3 class=\"text-lg font-medium\" i18n=\"@@backoffice\">\n                Application Details (Backoffice)\n            </h3>\n            <button\n                *ngIf=\"backoffice_logs\"\n                class=\"p-2 text-xs underline\"\n                (click)=\"changelog(backoffice_logs)\"\n            >\n                View Changelog\n            </button>\n        </div>\n        <section class=\"space-y-2 mb-4 flex flex-col px-2\">\n            <div class=\"flex items-center\">\n                <label for=\"version\" class=\"w-24\" i18n=\"@@version\"\n                    >Version:</label\n                >\n                <code\n                    name=\"version\"\n                    (click)=\"copy('version', backoffice_version)\"\n                >\n                    {{ backoffice_version }}\n                </code>\n                <code\n                    name=\"tag\"\n                    class=\"ml-2\"\n                    (click)=\"copy('tag', backoffice_tag)\"\n                >\n                    {{ backoffice_tag }}\n                </code>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"hash\" class=\"w-24\" i18n=\"@@commitHash\"\n                    >Commit Hash:</label\n                >\n                <code name=\"hash\" (click)=\"copy('hash', backoffice_hash)\">\n                    {{ backoffice_hash }}\n                </code>\n            </div>\n            <div class=\"flex items-center\">\n                <label for=\"build-time\" class=\"w-24\" i18n=\"@@buildTime\"\n                    >Build:</label\n                >\n                <div\n                    name=\"build-time\"\n                    class=\"text-sm\"\n                    (click)=\"copy('build time', backoffice_build)\"\n                >\n                    {{ backoffice_build }}\n                </div>\n            </div>\n        </section>\n        <div class=\"flex items-center space-x-2\">\n            <div class=\"text-lg font-medium\" i18n=\"@@apiHeader\">\n                API Services\n            </div>\n            <code *ngIf=\"backend_version\">{{ backend_version }}</code>\n            <button\n                *ngIf=\"changelog_data\"\n                class=\"p-2 text-xs underline\"\n                (click)=\"changelog(changelog_data)\"\n            >\n                View Changelog\n            </button>\n        </div>\n        <section class=\"flex flex-wrap py-2\">\n            <ng-container *ngIf=\"!api_details?.length; else empty_state\">\n                <div\n                    class=\"bg-white dark:bg-neutral-700 rounded border border-gray-200 dark:border-neutral-500 m-2 min-w-[40%] flex-1 overflow-hidden\"\n                    *ngFor=\"let api of api_details\"\n                >\n                    <h3\n                        class=\"w-full px-4 py-2 mb-1 border-b border-gray-200 dark:border-neutral-500 mono\"\n                    >\n                        {{ api.service }}\n                    </h3>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\"\n                    >\n                        <label class=\"w-24\">Commit Hash</label>\n                        <code>\n                            {{ api.commit | slice: 0:8 }}\n                        </code>\n                    </div>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\"\n                    >\n                        <label class=\"w-24\">Version</label>\n                        <code>\n                            {{ api.version }}\n                        </code>\n                    </div>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-gray-400/20\"\n                    >\n                        <label class=\"w-24\">Build time</label>\n                        <div class=\"text-sm\">\n                            {{ api.build_time | date: 'MMM d, y, h:mm a' }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"flex items-center px-4 py-1 hover:bg-gray-400/20 mb-1\"\n                    >\n                        <label class=\"w-24\">Platform</label>\n                        <code>\n                            {{ api.platform_version }}\n                        </code>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #empty_state>\n            <div class=\"w-full p-24 flex flex-col items-center justify-center\">\n                <div\n                    class=\"p-4 border rounded-lg border-gray-200 dark:border-neutral-500 opacity-60\"\n                >\n                    No API service details available.\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                padding: 1rem;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class PlaceDetailsComponent extends BaseClass implements OnInit {\n    /** Current details about the API */\n    public api_details: PlaceServiceDetails[];\n    public changelog_data: string = '';\n    public backend_version = '';\n    public backoffice_logs = '';\n\n    public get user() {\n        return this._users.user;\n    }\n\n    public get backoffice_version() {\n        return VERSION?.stamp || '';\n    }\n\n    public get backoffice_tag() {\n        return VERSION?.tag || '';\n    }\n\n    public get backoffice_hash() {\n        return VERSION?.hash || '';\n    }\n\n    public get backoffice_build() {\n        return `${format(VERSION.time, 'dd MMM yyyy')} at ${format(\n            VERSION.time,\n            ' h:mma'\n        )}`;\n    }\n\n    constructor(\n        private _users: BackofficeUsersService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadApiDetails();\n        this.loadPlatformDetails();\n    }\n\n    public changelog(log: string) {\n        this._dialog.open<ChangelogModalComponent, ChangelogModalData>(\n            ChangelogModalComponent,\n            {\n                data: { changelog: log },\n            }\n        );\n    }\n\n    public copy(name: string, content: string) {\n        copyToClipboard(content);\n        notifyInfo(`Copied ${name} to clipboard`);\n    }\n\n    public loadApiDetails(): void {\n        get(`${apiEndpoint()}/cluster/versions`)\n            .toPromise()\n            .then(\n                (details) => (this.api_details = details as any),\n                (err) =>\n                    notifyError(\n                        `Error loading API details. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n\n    public async loadPlatformDetails() {\n        const { changelog, version } = await get(`${apiEndpoint()}/platform`)\n            .toPromise()\n            .catch((err) =>{\n                notifyError(\n                    `Error loading API details. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                )\n                throw err;\n            });\n        this.changelog_data = changelog.replace('# Changelog\\n\\n', '');\n        this.backend_version = version;\n        this.backoffice_logs = await (await fetch('https://raw.githubusercontent.com/PlaceOS/backoffice/develop/CHANGELOG.md')).text();\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { humanReadableByteCount } from '@placeos/ts-client';\n\nimport { differenceInSeconds } from 'date-fns';\nimport { Point } from '../../common/types';\n\ninterface PlaceClusterRunCounts {\n    modules: number;\n    drivers: number;\n}\n\nexport interface PlaceClusterNode {\n    hostname: string;\n    cpu_count: number;\n    core_cpu: number;\n    total_cpu: number;\n    memory_total: number;\n    memory_usage: number;\n    core_memory: number;\n    run_count?: PlaceClusterRunCounts;\n}\n\nexport interface PlaceClusterUsageStamp {\n    id: number;\n    value: number;\n}\n\n@Component({\n    selector: 'admin-cluster-node',\n    template: `\n        <h4>{{ node?.hostname }}</h4>\n        <div class=\"mb-2 h-40 w-64\">\n            <div basic-line-graph [points]=\"points\"></div>\n        </div>\n        <div class=\"memory-utilisation\">\n            <div class=\"flex items-center space-x-2 p-2\">\n                <label i18n=\"@@cluserMemoryUsed\">Memory Used</label>\n                <div class=\"value\">\n                    {{ used_memory }} / {{ total_memory }} ({{\n                        memory_percentage.toFixed(2)\n                    }}%)\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 bg-black bg-opacity-5 rounded p-2\"\n            >\n                <label i18n=\"@@clusterCpuUsage\">CPU Usage</label>\n                <div class=\"value\">{{ node?.total_cpu }}%</div>\n            </div>\n        </div>\n    `,\n    styles: [],\n})\nexport class AdminClusterNodeComponent implements OnChanges, OnInit {\n    /** Node to display on the view */\n    @Input() public node: PlaceClusterNode;\n    /** Historical data for node */\n    @Input() public history: PlaceClusterUsageStamp[];\n    /** Store for the chart data object */\n    // private _chart: Chart;\n    /**  */\n    public points: Point[] = [];\n\n    public get used_memory() {\n        return humanReadableByteCount((this.node?.memory_usage || 0) * 1024);\n    }\n\n    public get total_memory() {\n        return humanReadableByteCount((this.node?.memory_total || 0) * 1024);\n    }\n\n    public get memory_percentage() {\n        return (\n            ((this.node?.memory_usage || 0) / (this.node?.memory_total || 1)) *\n            100\n        );\n    }\n\n    @ViewChild('chart', { static: true })\n    public _chart_el: ElementRef<HTMLCanvasElement>;\n\n    public ngOnInit() {\n        this.generateCharts();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.history && this.history) {\n            this.generateCharts();\n        }\n    }\n\n    public generateCharts(): void {\n        const list = [...this.history] || [];\n        while (list.length < 12) {\n            list.unshift({} as any);\n        }\n        const data = list\n            .slice(Math.max(0, list.length - 12))\n            .map((event, idx) => ({\n                x: idx,\n                y: event.value || 0,\n            }));\n        this.points = [...data];\n    }\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { PlaceCluster } from '@placeos/ts-client';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    PlaceClusterNode,\n    PlaceClusterUsageStamp,\n} from './cluster-node.component';\n\n@Component({\n    selector: 'engine-cluster-item',\n    template: `\n        <ng-container *ngFor=\"let node of cluster_nodes\">\n            <admin-cluster-node\n                [node]=\"node\"\n                [history]=\"cpu_history[node.hostname] || []\"\n            ></admin-cluster-node>\n        </ng-container>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterItemComponent implements OnChanges {\n    /** Cluster to display details for */\n    @Input() public cluster: PlaceCluster;\n    /** List of historical data for cluster's CPU usage */\n    @Input() public cpu_history: HashMap<PlaceClusterUsageStamp[]> = {};\n    /** List of nodes contained by the cluster */\n    public cluster_nodes: PlaceClusterNode[];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.cluster && this.cluster) {\n            this.cluster_nodes = [this.cluster, ...this.cluster.edge_nodes];\n            this.cpu_history = this.cpu_history || {};\n        }\n    }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceCluster,\n    PlaceProcess,\n    terminateProcess,\n    queryProcesses,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal.component';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { BehaviorSubject, combineLatest, interval, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    startWith,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Component({\n    selector: 'engine-cluster-task-list',\n    template: `\n        <div class=\"flex items-center mb-4\">\n            <button mat-icon-button (click)=\"close.emit()\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'backoffice-arrow-left' }\"\n                ></app-icon>\n            </button>\n            <h3 class=\"text-lg font-medium\" i18n=\"@@clusterHeader\">\n                Cluster - {{ cluster?.hostname }}\n            </h3>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"h-12\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass\"\n                ></app-icon>\n                <input\n                    matInput\n                    [ngModel]=\"filter.getValue()\"\n                    (ngModelChange)=\"filter.next($event)\"\n                    placeholder=\"Filter processes...\"\n                />\n            </mat-form-field>\n        </div>\n        <div\n            role=\"table\"\n            class=\"h-1/2 flex-1\"\n            *ngIf=\"(filtered_list | async)?.length; else empty_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Name</div>\n                <div class=\"w-24 p-2\">CPU %</div>\n                <div class=\"w-24 p-2\">Memory</div>\n                <div class=\"w-24 p-2\">Instances</div>\n                <div class=\"w-12 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let element of filtered_list | async\">\n                    <div class=\"flex-1 p-2\" [title]=\"element.id\">\n                        <code\n                            class=\"truncate\"\n                            [innerHTML]=\"element.id | driverFormat\"\n                        ></code>\n                    </div>\n                    <div class=\"w-24 p-2 text-right justify-end\">\n                        {{ element.cpu_usage.toFixed(2) }}%\n                    </div>\n                    <div class=\"w-24 p-2 text-right justify-end\">\n                        {{ element.used_memory }}\n                    </div>\n                    <div class=\"w-24 p-2 text-right justify-end\">\n                        {{ element.module_instances }}\n                    </div>\n                    <div class=\"w-12 flex items-center justify-center\">\n                        <button\n                            mat-icon-button\n                            (click)=\"confirmKillProcess(element)\"\n                        >\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <p i18n=\"@@processTableEmpty\">No tasks running on cluster</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceClusterTaskListComponent extends BaseClass {\n    /** Cluster to display tasks details for */\n    @Input() public cluster: PlaceCluster;\n    /** Emitter for close events */\n    @Output() public close = new EventEmitter<void>();\n    /** Whether the task list is updating */\n    public loading: boolean;\n    /** ID of the process being killed */\n    public killing: string;\n\n    public column_list: string[] = [\n        'id',\n        'cpu_usage',\n        'memory_usage',\n        'module_instances',\n        'running',\n    ];\n\n    public filter = new BehaviorSubject('');\n\n    public readonly process_list: Observable<PlaceProcess[]> = interval(\n        5000\n    ).pipe(\n        startWith(0),\n        filter(() => !this.loading),\n        switchMap(() => {\n            this.loading = true;\n            return queryProcesses(this.cluster.id, {\n                include_status: true,\n            } as any).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            );\n        }),\n        map((l) =>\n            (l || []).sort((a, b) => b.module_instances - a.module_instances)\n        ),\n        tap(() => (this.loading = false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_list = combineLatest([\n        this.filter,\n        this.process_list,\n    ]).pipe(\n        map(([filter, processes]) => {\n            return processes.filter((_) =>\n                _.id.toLowerCase().includes(filter.toLowerCase())\n            );\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public confirmKillProcess(process: PlaceProcess): void {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want kill the process for \"${process.id}\"?</p>\n                    <p>The process will be terminated <strong>immediately</strong>.\n                    The process may be restarted after a short while.</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm_kill',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.killing = process.id;\n                    ref.componentInstance.loading = 'Processing request...';\n                    this.killProcess(process).then(\n                        () => {\n                            this.killing = null;\n                            ref.close();\n                        },\n                        (err) => {\n                            ref.componentInstance.loading = null;\n                            this.killing = null;\n                            notifyError(\n                                `Error killing process. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            );\n                            ref.close();\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public killProcess(process: PlaceProcess) {\n        return terminateProcess(this.cluster.id, process.id).toPromise();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n    map,\n    catchError,\n    switchMap,\n    tap,\n    filter,\n    startWith,\n} from 'rxjs/operators';\n\nimport { PlaceCluster, queryClusters } from '@placeos/ts-client';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\n\nimport { PlaceClusterUsageStamp } from './cluster-node.component';\nimport { interval } from 'rxjs';\n\n@Component({\n    selector: 'engine-cluster-details',\n    template: `\n        <div class=\"flex flex-wrap overflow-auto max-h-full\">\n            <ng-container\n                *ngIf=\"cluster_list && cluster_list.length; else empty_state\"\n            >\n                <ng-container *ngIf=\"!active_cluster; else process_state\">\n                    <ng-container *ngFor=\"let cluster of cluster_list\">\n                        <mat-card class=\"m-2 text-center\">\n                            <mat-card-header>\n                                <mat-card-title clas=\"capitalize\"\n                                    >{{\n                                        cluster.hostname || 'Undefined Cluster'\n                                    }}\n                                </mat-card-title>\n                            </mat-card-header>\n                            <mat-card-content>\n                                <engine-cluster-item\n                                    [cluster]=\"cluster\"\n                                    [cpu_history]=\"\n                                        cpu_history[cluster.id] || []\n                                    \"\n                                ></engine-cluster-item>\n                            </mat-card-content>\n                            <mat-card-actions>\n                                <button\n                                    mat-button\n                                    (click)=\"active_cluster = cluster\"\n                                    i18n=\"@@viewClusterProcesses\"\n                                >\n                                    View Processes\n                                </button>\n                            </mat-card-actions>\n                        </mat-card>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center p-8 space-y-2\"\n            >\n                <app-icon\n                    class=\"text-3xl\"\n                    [icon]=\"{ class: 'backoffice-cross' }\"\n                ></app-icon>\n                <div class=\"text\" i18n=\"@@clusterListEmpty\">\n                    No Cluster details to show\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #process_state>\n            <engine-cluster-task-list\n                [cluster]=\"active_cluster\"\n                (close)=\"active_cluster = null\"\n            ></engine-cluster-task-list>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class PlaceClusterDetailsComponent extends BaseClass implements OnInit {\n    /** List of available clusters on this instance of engine */\n    public cluster_list: PlaceCluster[] = [];\n    /** Map of clusters to CPU usage history */\n    public cpu_history: HashMap<HashMap<PlaceClusterUsageStamp[]>> = {};\n    /** Active cluster to show details for */\n    public active_cluster: PlaceCluster;\n    /** Whether cluster details are being loaded */\n    public loading: boolean;\n\n    public readonly clusters$ = interval(2000).pipe(\n        startWith(0),\n        filter(() => !this.active_cluster && !this.loading),\n        switchMap(() => {\n            this.loading = true;\n            return queryClusters({ include_status: true } as any).pipe(\n                catchError((_) => ({ data: [] } as any))\n            );\n        }),\n        map((resp: { data: any[] }) => resp.data),\n        map((list) => {\n            this.cluster_list = list || [];\n            const date = Date.now();\n            this.cluster_list.forEach((cluster) => {\n                if (!this.cpu_history[cluster.id]) {\n                    this.cpu_history[cluster.id] = {};\n                }\n                const nodes = [cluster, ...cluster.edge_nodes] as any;\n                for (const node of nodes) {\n                    if (!this.cpu_history[cluster.id][node.hostname]) {\n                        this.cpu_history[cluster.id][node.hostname] = [];\n                    }\n                    this.cpu_history[cluster.id][node.hostname].push({\n                        id: date,\n                        value: node.core_cpu,\n                    });\n                    if (\n                        this.cpu_history[cluster.id][node.hostname].length > 120\n                    ) {\n                        this.cpu_history[cluster.id][node.hostname].shift();\n                    }\n                }\n            });\n        }),\n        tap(() => (this.loading = false))\n    );\n\n    public ngOnInit(): void {\n        this.subscription('load_cluster', this.clusters$.subscribe());\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { listInterfaceRepositories } from '@placeos/ts-client';\n\nimport { Identity } from 'apps/backoffice/src/app/common/types';\n\n@Component({\n    selector: 'app-interfaces',\n    template: `\n        <div\n            role=\"table\" \n            class=\"pt-4\"\n            *ngIf=\"interfaces && interfaces.length; else load_state\"\n        >\n            <div table-head>\n                <div class=\"flex-1 p-2\">Repository</div>\n                <div class=\"w-[20rem] p-2\">Commit Hash</div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of interfaces\">\n                    <div class=\"flex-1 p-2\">{{ item.id }}</div>\n                    <div class=\"w-[20rem] p-2\">\n                        <code>\n                            {{ item.name || \"~No Commit Hash~\" }}\n                        </code>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <app-icon class=\"mb-4\" className=\"backoffice-cross\"></app-icon>\n                <p>No interfaces</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AdminInterfacesComponent implements OnInit {\n    /** List of interfaces */\n    public interfaces: Identity[] = [];\n\n    ngOnInit() {\n        this.loadInterfaces();\n    }\n\n    private async loadInterfaces() {\n        const interfaces = await listInterfaceRepositories().toPromise();\n        this.interfaces = Object.keys(interfaces).map((id) => ({\n            id,\n            name: interfaces[id],\n        }));\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {\n    PlaceMQTTBroker,\n    updateBroker,\n    addBroker,\n    queryBrokers,\n    removeBroker,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { ItemCreateUpdateModalComponent } from 'apps/backoffice/src/app/overlays/item-modal/item-modal.component';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { openConfirmModal } from 'apps/backoffice/src/app/common/general';\n\n@Component({\n    selector: 'app-brokers',\n    template: `\n        <button mat-button class=\"my-4\" (click)=\"newBroker()\">\n            <div class=\"flex items-center\">\n                <app-icon className=\"backoffice-plus\"></app-icon>\n                <div class=\"text\">Add Broker</div>\n            </div>\n        </button>\n        <div class=\"overflow-auto\">\n            <div\n                role=\"table\"\n                *ngIf=\"brokers && brokers.length; else load_state\"\n                class=\"min-w-[52rem]\"\n            >\n                <div table-head>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"w-24 p-2\">Auth Type</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-32 p-2 truncate\">Host</div>\n                    <div class=\"w-16 p-2\">Port</div>\n                    <div class=\"w-16 p-2\">TLS</div>\n                    <div class=\"w-32 p-2\">Filters</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of brokers\">\n                        <div class=\"w-32 p-2\">{{ item.name }}</div>\n                        <div class=\"w-24 p-2\">\n                            { item.auth_type, select, 0 { Certificate }, 2 {\n                            User Password }, other { No Auth }}\n                        </div>\n                        <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.host }}</div>\n                        <div class=\"w-16 p-2\">{{ item.port }}</div>\n                        <div class=\"w-16 p-2\">\n                            { item.tls, select, true { Yes }, false { No } }\n                        </div>\n                        <div class=\"w-32 p-2\">{{ item.filters | json }}</div>\n                        <div class=\"w-24 p-2 flex items-center\">\n                            <button mat-icon-button (click)=\"editBroker(item)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"deleteBroker(item)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No Brokers</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n            }\n        `,\n    ],\n})\nexport class AdminBrokersComponent extends BaseClass implements OnInit {\n    public brokers: PlaceMQTTBroker[] = [];\n\n    constructor(private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loadBrokers();\n    }\n\n    public newBroker(): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new PlaceMQTTBroker(),\n                name: 'Broker',\n                save: (item) => addBroker(item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public editBroker(item: PlaceMQTTBroker): void {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item,\n                name: 'Broker',\n                save: (item) => updateBroker(item.id, item),\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.loadBrokers();\n                }\n            })\n        );\n    }\n\n    public async deleteBroker(item: PlaceMQTTBroker): Promise<void> {\n        if (item) {\n            const details = await openConfirmModal(\n                {\n                    title: `Delete MQTT Broker`,\n                    content: `<p>Are you sure you want delete this boker?</p><p>The broker will be deleted <strong>immediately.</strong></p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n                this._dialog\n            );\n            if (!details) return;\n            details.loading('Deleting broker...');\n            const err = await removeBroker(item.id)\n                .toPromise()\n                .catch((_) => _);\n            details.close();\n            if (err)\n                return notifyError(\n                    `Error deleting broker. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            notifySuccess(`Successfully deleted broker \"${item.name}\".`);\n            this.loadBrokers();\n        }\n    }\n\n    private async loadBrokers() {\n        const brokers = await queryBrokers()\n            .pipe(map((resp) => resp.data))\n            .toPromise();\n        this.brokers = brokers;\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ item ? 'Edit' : 'New' }} Extension</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"form && !loading; else load_state\" [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\">\n                <label for=\"type\" i18n=\"@@typeLabel\">Type<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select formControlName=\"type\">\n                        <mat-option *ngFor=\"let type of available_types\" [value]=\"type\">\n                            <span class=\"capitalize\">{{ type }}</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"name\" i18n=\"@@nameLabel\">Name<span>*</span>: </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Extension Display Name\"\n                        i18n-placeholder=\"@@extensionNamePlaceholder\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error i18n=\"@@nameError\">A valid name is required</mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\">\n            <label for=\"url\" i18n=\"@@urlLabel\">URL<span>*</span>: </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"url\"\n                    placeholder=\"Extension URL\"\n                    i18n-placeholder=\"@@extensionUrlPlaceholder\"\n                    formControlName=\"url\"\n                />\n                <mat-error i18n=\"@@urlError\">A valid URL is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"w-full\">\n            <label *ngIf=\"form.controls.conditions.value?.length\">Conditions</label>\n            <div class=\"fieldset\" *ngFor=\"let condition of form.controls.conditions.value\">\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"url\"\n                            [(ngModel)]=\"condition[0]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Field\"\n                            i18n-placeholder=\"@@conditionPlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [(ngModel)]=\"condition[1]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Operation\"\n                        >\n                            <mat-option *ngFor=\"let type of condition_ops\" [value]=\"type\">\n                                <span class=\"capitalize\">{{ type }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"value\"\n                            [disabled]=\"condition[1] === 'truthy' || condition[1] === 'falsy'\"\n                            [(ngModel)]=\"condition[2]\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Condition Value\"\n                            i18n-placeholder=\"@@conditionValuePlaceholder\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button mat-icon-button (click)=\"removeCondition(condition)\">\n                    <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                </button>\n            </div>\n            <button mat-button class=\"w-full\" (click)=\"addCondition()\">Add Condition</button>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (click)=\"submit()\">{{ item ? 'Save' : 'Add' }} [S]</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HotkeysService } from 'apps/backoffice/src/app/common/hotkeys.service';\nimport { DialogEvent } from 'apps/backoffice/src/app/common/types';\n\nimport { BackofficeExtension } from '../extensions.component';\n\n@Component({\n    selector: 'extension-modal',\n    templateUrl: './extension-modal.component.html',\n    styleUrls: ['./extension-modal.component.scss'],\n})\nexport class ExtensionModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly available_types = [\n        'admin',\n        'systems',\n        'modules',\n        'zones',\n        'drivers',\n        'repositories',\n        'triggers',\n        'users',\n        'domains',\n    ];\n    public readonly condition_ops = ['includes', 'equals', 'truthy', 'falsy'];\n    public readonly item = this._data.item;\n    public loading = false;\n    public form = new FormGroup({\n        type: new FormControl('systems', [Validators.required]),\n        name: new FormControl('', [Validators.required]),\n        url: new FormControl('', [Validators.required]),\n        conditions: new FormControl([]),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { item: BackofficeExtension },\n        private _hotkey: HotkeysService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'save',\n            this._hotkey.listen(['KeyS'], () => this.submit())\n        );\n        this.form.patchValue(this.item);\n    }\n\n    public addCondition() {\n        const conditions = this.form.controls.conditions.value;\n        conditions.push(['', '', '']);\n    }\n\n    public removeCondition(condition: [string, string, any]) {\n        this.form.controls.conditions.setValue(\n            this.form.controls.conditions.value.filter((c) => c !== condition)\n        );\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        const value = this.form.value;\n        value.conditions = value.conditions.filter((c) => c[0] && c[1]);\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PlaceDomain, queryDomains, updateDomain } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { notifyError } from 'apps/backoffice/src/app/common/notifications';\nimport { ApplicationIcon } from 'apps/backoffice/src/app/common/types';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n} from 'apps/backoffice/src/app/overlays/confirm-modal.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\n\nexport interface BackofficeExtension {\n    /** Section of backoffice to extend */\n    type:\n        | 'admin'\n        | 'systems'\n        | 'modules'\n        | 'zones'\n        | 'drivers'\n        | 'repositories'\n        | 'triggers'\n        | 'users'\n        | 'domains';\n    /** Display name of the extension */\n    name: string;\n    /** URL to the application to embed */\n    url: string;\n    /** Conditions for showing the extension */\n    conditions: [string, string, any][];\n    /** Icon to display next to the name */\n    icon: ApplicationIcon;\n}\n\n@Component({\n    selector: '[app-extensions]',\n    template: `\n        <h2 class=\"text-lg font-medium mb-4 mt-4\">Backoffice extensions</h2>\n        <div *ngIf=\"!loading; else load_state\">\n            <div class=\"flex items-center space-x-2 mb-4\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"domain\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <button mat-button (click)=\"editExtension()\">\n                    Add Extension\n                </button>\n            </div>\n            <div class=\"bg-info my-4 p-4 flex items-center rounded shadow space-x-4 text-sm text-white\">\n                <p><strong>Note:</strong> Backoffice requires a full page refresh for extension changes and additions to apply</p>\n            </div>\n            <div role=\"table\">\n                <div table-head>\n                    <div class=\"w-24 p-2\">Type</div>\n                    <div class=\"w-40 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">URL</div>\n                    <div class=\"w-28 p-2\">Conditions</div>\n                    <div class=\"w-24 p-2\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let extension of extension_list\">\n                        <div class=\"w-24 p-2 capitalize\">\n                            {{ extension.type }}\n                        </div>\n                        <div class=\"w-40 p-2\">{{ extension.name }}</div>\n                        <div class=\"flex-1 p-2\">{{ extension.url }}</div>\n                        <div class=\"w-28 p-2\">\n                            {{ extension.conditions.length }}\n                        </div>\n                        <div class=\"w-24 flex items-center justify-center\">\n                            <button\n                                mat-icon-button\n                                (click)=\"editExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-edit' }\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                (click)=\"removeExtension(extension)\"\n                            >\n                                <app-icon\n                                    [icon]=\"{ class: 'backoffice-trash' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                </div>\n                <div class=\"text\">{{ loading }}</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceExtensionsComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public domain: PlaceDomain;\n    /** List of extension available on the current domain */\n    public extension_list: BackofficeExtension[] = [];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.setDomain(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public setDomain(domain: PlaceDomain) {\n        this.domain = domain;\n        const config = this.domain.config?.backoffice?.extend || {};\n        const extensions: BackofficeExtension[] = [];\n        for (const type in config) {\n            if (!config[type]) {\n                continue;\n            }\n            for (const name in config[type]) {\n                if (!config[type][name]) {\n                    continue;\n                }\n                extensions.push({\n                    ...config[type][name],\n                    name,\n                    type,\n                });\n            }\n        }\n        this.extension_list = extensions;\n        this.extension_list.sort(\n            (a, b) =>\n                a.type.localeCompare(b.type) || a.name.localeCompare(b.name)\n        );\n    }\n\n    public editExtension(item?: BackofficeExtension) {\n        const ref = this._dialog.open(ExtensionModalComponent, {\n            data: { item: item ? JSON.parse(JSON.stringify(item)) : undefined },\n        });\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (event) => {\n                ref.componentInstance.loading = true;\n                if (item) {\n                    this.extension_list = this.extension_list.filter(\n                        (i) => i !== item\n                    );\n                }\n                this.extension_list.push(event.metadata);\n                await this.updateDomain();\n                ref.componentInstance.loading = false;\n                ref.close();\n            });\n    }\n\n    public async removeExtension(item: BackofficeExtension) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                data: {\n                    title: 'Remove extension',\n                    content: `Are you sure you want to remove the extension \"${item.name}\" from ${item.type}?`,\n                    icon: { class: 'backoffice-trash' },\n                },\n            }\n        );\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe(async (_) => {\n                ref.componentInstance.loading = 'Removing extension...';\n                this.extension_list = this.extension_list.filter(\n                    (i) => i !== item\n                );\n                await this.updateDomain().catch((e) =>\n                    notifyError(`Error removing extension: ${e}`)\n                );\n                ref.componentInstance.loading = '';\n                ref.close();\n            });\n    }\n\n    public async updateDomain() {\n        const extensions = {};\n        for (const ext of this.extension_list) {\n            if (!extensions[ext.type]) {\n                extensions[ext.type] = {};\n            }\n            const data = { ...ext };\n            delete data.type;\n            delete data.name;\n            extensions[ext.type][ext.name] = data;\n        }\n        const updated = new PlaceDomain({\n            ...this.domain,\n            config: {\n                ...this.domain.config,\n                backoffice: {\n                    ...(this.domain.config.backoffice || {}),\n                    extend: extensions,\n                },\n            },\n        });\n        const domain = await updateDomain(this.domain.id, updated).toPromise();\n        this.setDomain(domain);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { post } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { StaffTenantModalData } from './staff-tenant-modal.component';\n\n@Component({\n    selector: 'booking-limits-modal',\n    template: ` <header>\n            <h3>Edit Tenant Booking Limits</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto w-[512px] max-w-[100vw]\"\n        >\n            <div class=\"flex flex-col\">\n                <object-list-field\n                    formControlName=\"booking_limits\"\n                    [fields]=\"['type', 'amount']\"\n                ></object-list-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-gray-200 flex justify-center\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving booking limits for Staff API tenant...</p>\n            </main>\n        </ng-template>`,\n    styles: [``],\n})\nexport class BookingLimitsModalComponent {\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public form = new FormGroup({\n        booking_limits: new FormControl<{ type: string, amount: string }[]>([]),\n    });\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<BookingLimitsModalComponent>\n    ) {\n        const limits = this.tenant?.booking_limits || {};\n        this.form.patchValue({\n            booking_limits: Object.keys(limits).map((k) => ({\n                type: k,\n                amount: `${limits[k]}`,\n            })),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const limits: { type: string; amount: string }[] =\n            this.form.value.booking_limits || [];\n        const booking_limits = {};\n        for (const { type, amount } of limits) {\n            booking_limits[type] = +amount || 0;\n        }\n        console.log('Limits:', limits, booking_limits);\n        const call = post(\n            `/api/staff/v1/tenants/${this.tenant.id}/limits`,\n            booking_limits\n        );\n        const resp = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!resp) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close({ ...this.tenant, booking_limits: resp });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { cleanObject, PlaceDomain, post, put } from '@placeos/ts-client';\nimport { getInvalidFields } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent, HashMap } from '../common/types';\nimport { PlaceTenant } from './staff-api.component';\n\nconst FIELD_NAME_MAPPING: HashMap<string> = {\n    issuer: 'Service Account Email',\n    conference_type: 'Conference Type',\n    signing_key: 'Private Key',\n    sub: 'Service User',\n    client_id: 'Client ID',\n    client_secret: 'Client Secret',\n    domain: 'Domain',\n    scopes: 'Scopes',\n    user_agent: 'User Agent',\n};\n\nexport interface StaffTenantModalData {\n    tenant?: PlaceTenant;\n    domain?: PlaceDomain;\n}\n\n@Component({\n    selector: 'staff-tenant-modal',\n    template: `\n        <header>\n            <h3>{{ tenant ? 'Edit' : 'New' }} Tenant</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto\"\n        >\n            <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label>Name<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"Tenant Name\"\n                        />\n                        <mat-error>A tenant name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label>Platform<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"platform\">\n                            <mat-option value=\"google\">Google</mat-option>\n                            <mat-option value=\"office365\">Office365</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div\n                class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\"\n                *ngIf=\"form.value.platform !== 'google' && !form.value.delegated\"\n            >\n                <div class=\"flex flex-col flex-1\">\n                    <label>Service Account:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"service_account\"\n                            placeholder=\"Service Account\"\n                        />\n                        <mat-error>\n                            Service account should be a valid email address\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex items-center mb-4\">\n                <mat-checkbox formControlName=\"delegated\">\n                    Delegated\n                </mat-checkbox>\n            </div>\n            <form *ngIf=\"credentials\" [formGroup]=\"credentials\">\n                <ng-container\n                    *ngFor=\"let item of credentials.controls | keyvalue\"\n                >\n                    <div\n                        class=\"flex flex-col\"\n                        [class.hidden]=\"item.value?.disabled\"\n                    >\n                        <label class=\"capitalize\">\n                            {{ name_map[item.key] || item.key }}\n                            <span *ngIf=\"item.key !== 'conference_type' && !form.value.id\">*</span\n                            >:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <ng-container [ngSwitch]=\"item.key\">\n                                <input\n                                    matInput\n                                    *ngSwitchDefault\n                                    [formControlName]=\"item.key\"\n                                    [placeholder]=\"\n                                        name_map[item.key] || item.key\n                                    \"\n                                />\n                                <textarea\n                                    matInput\n                                    *ngSwitchCase=\"'signing_key'\"\n                                    [formControlName]=\"item.key\"\n                                    [placeholder]=\"\n                                        name_map[item.key] || item.key\n                                    \"\n                                ></textarea>\n                            </ng-container>\n                            <mat-error>A {{ item.key }} is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </ng-container>\n            </form>\n            <div\n                class=\"flex items-center mb-4\"\n                *ngIf=\"form.value.platform === 'office365'\"\n            >\n                <mat-checkbox\n                    [(ngModel)]=\"show_outlook\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Configure Outlook Plugin\n                </mat-checkbox>\n            </div>\n            <form\n                *ngIf=\"show_outlook && form.get('outlook_config')\"\n                formGroupName=\"outlook_config\"\n            >\n                <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook App ID<span>*</span>:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"app_id\"\n                                placeholder=\"Application ID\"\n                            />\n                            <mat-error>An application ID is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook App Domain:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"app_domain\"\n                                placeholder=\"Application Domain\"\n                            />\n                            <mat-error>\n                                An application domain is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook App Resource:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"app_resource\"\n                                placeholder=\"Application ID\"\n                            />\n                            <mat-error>\n                                An application resource is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook Source Location:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"source_location\"\n                                placeholder=\"Source Location\"\n                            />\n                            <mat-error>A source location is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center flex-wrap space-x-0 sm:space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label>Outlook Base Path:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"base_path\"\n                                placeholder=\"outlook\"\n                            />\n                            <mat-error>\n                                Base path to the application root folder is\n                                required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </form>\n            <div class=\"flex flex-col space-y-2\">\n                <label>Booking Limits</label>\n                <object-list-field\n                    formControlName=\"booking_limits\"\n                    [fields]=\"['type', 'amount']\"\n                ></object-list-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-gray-200 flex justify-center\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving staff API tenant...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class StaffTenantModalComponent implements OnInit {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly tenant = this._data.tenant;\n    public readonly domain = this._data.domain;\n\n    public show_outlook = false;\n\n    public form = new FormGroup({\n        id: new FormControl(this.tenant?.id || ''),\n        domain: new FormControl(\n            this.domain?.domain || this.tenant?.domain || 'localhost'\n        ),\n        name: new FormControl(this.tenant?.name || '', [Validators.required]),\n        delegated: new FormControl(this.tenant?.delegated ?? false),\n        platform: new FormControl(this.tenant?.platform || 'google', [\n            Validators.required,\n        ]),\n        service_account: new FormControl(this.tenant?.service_account, [\n            Validators.email,\n        ]),\n        booking_limits: new FormControl([]),\n        credentials:\n            this.tenant?.platform === 'office365'\n                ? this.office_form\n                : this.google_form,\n    });\n\n    public loading = false;\n\n    public readonly name_map = FIELD_NAME_MAPPING;\n\n    public get office_form() {\n        return new FormGroup({\n            tenant: new FormControl('', [Validators.required]),\n            client_id: new FormControl('', [Validators.required]),\n            client_secret: new FormControl('', [Validators.required]),\n            conference_type: new FormControl(''),\n        });\n    }\n\n    public get google_form() {\n        return new FormGroup({\n            issuer: new FormControl('', [Validators.required]),\n            signing_key: new FormControl('', [Validators.required]),\n            scopes: new FormControl('', [Validators.required]),\n            domain: new FormControl('', [Validators.required]),\n            sub: new FormControl('', [Validators.required]),\n            user_agent: new FormControl('PlaceOS', [Validators.required]),\n            conference_type: new FormControl(''),\n        });\n    }\n\n    public get credentials(): FormGroup {\n        return this.form?.controls.credentials as any;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: StaffTenantModalData,\n        private _dialog_ref: MatDialogRef<StaffTenantModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        const limits = this.tenant?.booking_limits || {};\n        const fields = [\n            'tenant',\n            'client_id',\n            'client_secret',\n            'issuer',\n            'signing_key',\n            'scopes',\n            'sub',\n            'domain',\n            'user_agent'\n        ];\n        const handleDelegation = (delegated) => {\n            if (delegated) {\n                for (const field of fields) {\n                    this.form.get('credentials')?.get(field)?.disable();\n                    this.form.get('credentials')?.get(field)?.setValidators([]);\n                }\n            } else {\n                const id = this.form.value.id;\n                for (const field of fields) {\n                    this.form.get('credentials')?.get(field)?.enable();\n                    this.form\n                        .get('credentials')\n                        ?.get(field)\n                        ?.setValidators(id ? [] : [Validators.required]);\n                }\n            }\n            this.form.updateValueAndValidity();\n        };\n        this.form.controls.platform.valueChanges.subscribe((platform) => {\n            const credentials = this.form.value.credentials;\n            this.form.removeControl('credentials');\n            this.form.addControl(\n                'credentials',\n                platform === 'office365' ? this.office_form : this.google_form\n            );\n            if (platform === 'office365') {\n                (this.form as any).addControl(\n                    'outlook_config',\n                    new FormGroup({\n                        app_id: new FormControl(''),\n                        app_domain: new FormControl(''),\n                        app_resource: new FormControl(''),\n                        source_location: new FormControl(''),\n                        base_path: new FormControl(''),\n                    })\n                );\n            } else {\n                (this.form as any).removeControl('outlook_config');\n            }\n            handleDelegation(this.form.value.delegated);\n            this.form.patchValue({ credentials });\n        });\n        handleDelegation(this.form.value.delegated);\n        this.form.controls.delegated.valueChanges.subscribe(handleDelegation);\n        this.form.patchValue({\n            ...(this.tenant || {}),\n            domain: this.tenant?.domain || this._data.domain?.domain,\n            booking_limits: Object.keys(limits).map((k) => ({\n                type: k,\n                amount: limits[k],\n            })),\n        });\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return notifyError(\n                `Some fields are invalid. [${getInvalidFields(this.form)}]`\n            );\n        }\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const limits: { type: string; amount: string }[] =\n            this.form.value.booking_limits || [];\n        const booking_limits = limits.reduce(\n            (m, { type, amount }) => (m[type] = +amount),\n            {}\n        );\n        const value = this.form.value;\n        if (!value.credentials.conference_type)\n            delete value.credentials.conference_type;\n        if (!this.show_outlook) {\n            delete (value as any).outlook_config;\n        } else {\n            for (const key in (value as any).outlook_config) {\n                if ((value as any).outlook_config[key] == null) {\n                    delete (value as any).outlook_config[key];\n                }\n            }\n        }\n        for (const key in (value as any).credentials) {\n            if ((value as any).credentials[key] == null) {\n                delete (value as any).credentials[key];\n            }\n        }\n        if (!Object.keys(value.credentials).length) {\n            delete value.credentials;\n        }\n        const data = cleanObject({\n            ...(this.tenant || {}),\n            ...value,\n            booking_limits,\n        }, ['', null, undefined]);\n        const call = this.tenant?.id\n            ? put(`/api/staff/v1/tenants/${this.tenant.id}`, data)\n            : post('/api/staff/v1/tenants', data);\n        const tenant = await call.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!tenant) return notifyError('Error adding new tenant.');\n        notifySuccess('Successfully added new tenant.');\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { del, get, PlaceDomain, queryDomains } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../common/general';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { BookingLimitsModalComponent } from './booking-limits-modal.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\n\nexport interface PlaceTenant {\n    id: string;\n    name: string;\n    domain: string;\n    platform: string;\n    delegated?: boolean;\n    service_account?: string;\n    booking_limits: Record<string, number>;\n    credentials?: HashMap<string>;\n}\n\n@Component({\n    selector: 'staff-api',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <label for=\"type\">Domain: </label>\n            <mat-form-field class=\"h-12\" appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [ngModel]=\"domain | async\"\n                    (ngModelChange)=\"domain.next($event)\"\n                    placeholder=\"Select Domain...\"\n                >\n                    <mat-option *ngFor=\"let domain of domain_list\" [value]=\"domain\">\n                        {{ domain.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button mat-button (click)=\"editTenant()\">Add Tenant</button>\n        </div>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div class=\"w-full\" *ngIf=\"(tenants | async)?.length; else empty_state\">\n                <div table-head>\n                    <div class=\"w-1/2 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Platform</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of tenants | async\">\n                        <div class=\"w-1/2 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 p-2 truncate\">{{ item.platform }}</div>\n                        <div class=\"w-24 p-2 truncate\">\n                            <button mat-button class=\"clear underline\" (click)=\"editLimits(item)\">\n                                Edit Limits\n                            </button>\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"editTenant(item)\">\n                                <app-icon className=\"backoffice-edit\"></app-icon>\n                            </button>\n                            <button mat-icon-button class=\"h-10 w-10\" (click)=\"removeTenant(item)\">\n                                <app-icon className=\"backoffice-trash\"></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No tenants for selected domain</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class PlaceStaffAPIComponent implements OnInit {\n    /** Loading state */\n    public loading: string = '';\n    /** List of available domains */\n    public domain_list: PlaceDomain[];\n    /** Currently active domain */\n    public readonly domain = new BehaviorSubject<PlaceDomain>(null);\n\n    public readonly tenants = this.domain.pipe(\n        switchMap(() => {\n            this.loading = 'Loading tenants for domain...';\n            return get('/api/staff/v1/tenants');\n        }),\n        catchError((_) => []),\n        map((tenants) => {\n            this.loading = '';\n            return tenants.filter((t) => t.domain === this.domain.getValue().domain);\n        }),\n        shareReplay()\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async ngOnInit() {\n        this.loading = 'Loading domains...';\n        this.domain_list = await queryDomains()\n            .pipe(map((r) => r.data))\n            .toPromise();\n        this.domain.next(this.domain_list[0]);\n        this.loading = '';\n    }\n\n    public editTenant(tenant?: PlaceTenant) {\n        const ref = this._dialog.open(StaffTenantModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe(_ => this.domain.next(this.domain.getValue()));\n    }\n\n    public editLimits(tenant: PlaceTenant) {\n        const ref = this._dialog.open(BookingLimitsModalComponent, {\n            data: { tenant, domain: this.domain.getValue() },\n        });\n        ref.afterClosed().subscribe(_ => this.domain.next(this.domain.getValue()));\n    }\n\n    public async removeTenant(tenant: PlaceTenant) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove tenant?',\n                content: `Remove <strong>${tenant.name}</strong> from this domain?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details || !details.reason) return;\n        details.loading('Removing tenant from domain...');\n        const system = await del(`/api/staff/v1/tenants/${tenant.id}`)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${tenant.id} from domain. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                return true;\n            });\n        details.close();\n        if (system) return;\n        notifySuccess(`Successfully removed tenant from domain.`);\n        this.domain.next(this.domain.getValue());\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { addEdge, PlaceEdge, updateEdge } from '@placeos/ts-client';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { DialogEvent } from '../common/types';\n\nexport interface EdgeModalData {\n    edge: PlaceEdge;\n}\n\n@Component({\n    selector: 'edge-modal',\n    template: `\n        <header>\n            <h3>{{ edge ? 'Edit' : 'New' }} Edge</h3>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            [formGroup]=\"form\"\n            *ngIf=\"!loading && form; else load_state\"\n            class=\"overflow-auto\"\n        >\n            <div class=\"flex flex-col flex-1\">\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        formControlName=\"name\"\n                        placeholder=\"Edge Name\"\n                    />\n                    <mat-error>A edge name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        formControlName=\"description\"\n                        placeholder=\"Edge description...\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 border-t border-gray-200 flex justify-center\"\n        >\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>Saving edge...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-width: calc(100vw - 5rem);\n                max-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class EdgeModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n\n    public readonly edge = this._data.edge;\n\n    public form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n    });\n\n    public loading = false;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EdgeModalData,\n        private _dialog_ref: MatDialogRef<EdgeModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form.patchValue(this.edge);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._dialog_ref.disableClose = true;\n        this.loading = true;\n        const edge = { ...this.edge, ...this.form.value };\n        const method = edge.id ? updateEdge(edge.id, edge) : addEdge(edge);\n        const new_edge = await method.toPromise().catch((_) => null);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        if (!new_edge) return notifyError('Error adding new edge.');\n        edge.id\n            ? notifySuccess('Successfully updated edge.')\n            : notifySuccess(\n                  'Successfully added new edge. Please make sure to save the API key as you will not be able to view it again in the future.'\n              );\n        this._dialog_ref.close(new_edge);\n    }\n}\n","import { Clipboard } from '@angular/cdk/clipboard';\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    PlaceEdge,\n    queryEdges,\n    removeEdge,\n    retrieveEdgeToken,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounce,\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { copyToClipboard, openConfirmModal } from '../common/general';\nimport {\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n} from '../common/notifications';\nimport { EdgeModalComponent } from './edge-modal.component';\n\n@Component({\n    selector: '[admin-edge]',\n    template: `\n        <button mat-button class=\"w-full sm:w-32 my-4\" (click)=\"edit()\">\n            Add New Edge\n        </button>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                table\n                class=\"w-full min-w-[48rem]\"\n                *ngIf=\"(edges | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div class=\"w-32 p-2\">ID</div>\n                    <div class=\"w-32 p-2\">Name</div>\n                    <div class=\"flex-1 p-2\">Description</div>\n                    <div class=\"w-24 p-2 h-10\"></div>\n                </div>\n                <div table-body>\n                    <div table-row *ngFor=\"let item of edges | async\">\n                        <div class=\"w-32 p-2 truncate text-xs font-mono\">\n                            {{ item.id }}\n                        </div>\n                        <div class=\"w-32 p-2 truncate\">{{ item.name }}</div>\n                        <div class=\"flex-1 w-1/4 p-2 truncate\">\n                            {{ item.description }}\n                        </div>\n                        <div class=\"w-24 px-2 flex items-center justify-end \">\n                            <button\n                                mat-icon-button\n                                class=\"h-10 w-10\"\n                                (click)=\"edit(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-edit\"\n                                ></app-icon>\n                            </button>\n                            <button\n                                mat-icon-button\n                                class=\"h-10 w-10\"\n                                (click)=\"remove(item)\"\n                            >\n                                <app-icon\n                                    className=\"backoffice-trash\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <div\n            *ngIf=\"(last_change | async)?.x_api_key\"\n            (click)=\"copyKey(item.x_api_key)\"\n            matRipple\n            [matTooltip]=\"'Copy API Key for ' + item.name\"\n            class=\"absolute flex rounded cursor-pointer items-center right-4 top-4 bg-white dark:bg-neutral-700 shadow border border-gray-200 dark:border-neutral-500 max-w-[calc(100%-11rem)] overflow-hidden\"\n        >\n            <div class=\"p-2 flex-1 w-1/2 flex h-full items-center border-r border-gray-200 dark:border-neutral-500 \">\n                <code class=\"flex-1 truncate\">{{ item.x_api_key }}</code>\n            </div>\n            <button mat-icon-button class=\"rounded-none\">\n                <app-icon className=\"backoffice-copy\"></app-icon>\n            </button>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center\">\n                <p>No edges</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div class=\"w-full flex flex-col items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                min-height: 10rem;\n            }\n        `,\n    ],\n})\nexport class PlaceEdgeComponent {\n    public loading: string = '';\n\n    private _change = new BehaviorSubject<number>(0);\n    private _hide = new BehaviorSubject<string>('');\n    public last_change = new BehaviorSubject<PlaceEdge>(null);\n\n    public get item() {\n        return this.last_change.getValue();\n    }\n\n    private _edge_list: Observable<PlaceEdge[]> = this._change.pipe(\n        debounceTime(300),\n        switchMap((_) => {\n            this.loading = 'Loading Edges...';\n            return queryEdges();\n        }),\n        catchError((_) => of({})),\n        map((details?: { data: PlaceEdge[] }) => {\n            this.loading = '';\n            return (details?.data || []).sort((a, b) =>\n                a.id?.localeCompare(b.id)\n            );\n        }),\n        shareReplay()\n    );\n\n    public readonly edges = combineLatest([\n        this._edge_list,\n        this._hide\n    ]).pipe(\n        debounceTime(500),\n        map(([list, hide]) => {\n            if (!hide) return list;\n            const edges = list.filter((_) => _.id !== hide);\n            return edges.sort((a, b) => a.id?.localeCompare(b.id));\n        })\n    );\n\n    public readonly token = async (edge: PlaceEdge) => {\n        const details = await retrieveEdgeToken(edge.id).toPromise();\n        copyToClipboard(details.token);\n        notifyInfo(`Token copied to clickboard.`);\n    };\n\n    public readonly edit = async (edge?: PlaceEdge) => {\n        const ref = this._dialog.open(EdgeModalComponent, { data: { edge } });\n        ref.afterClosed().subscribe((_) => {\n            sessionStorage.setItem('BACKOFFICE.last_edge', JSON.stringify(_));\n            this.last_change.next(_);\n            this._change.next(Date.now());\n        });\n    };\n\n    public readonly remove = async (i: PlaceEdge) => {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove edge?',\n                content: `Remove <strong>${i.name}</strong>?<br>You or your users may lose access to some data.`,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n            this._dialog\n        );\n        if (!details) return;\n        details.loading('Removing edge...');\n        const err = await removeEdge(i.id)\n            .toPromise()\n            .catch((_) => _);\n        details.close();\n        if (err)\n            return notifyError(\n                `Error removing edge. Error: ${\n                    err.statusText || err.message || err\n                }`\n            );\n        sessionStorage.removeItem('BACKOFFICE.last_edge');\n        this.last_change.next(null);\n        notifySuccess('Successfully removed Edge.');\n        this._hide.next(i.id);\n    };\n\n    constructor(private _dialog: MatDialog, private _clipboard: Clipboard) {}\n\n    public ngOnInit() {\n        const edge_data = sessionStorage.getItem('BACKOFFICE.last_edge');\n        try {\n            this.last_change.next(JSON.parse(edge_data) || null);\n        } catch {}\n    }\n\n    public copyKey(key: string) {\n        if (key && this._clipboard.copy(key)) {\n            notifySuccess('Edge API Key copied to clipboard.');\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { randomInt } from '../common/general';\nimport { JsonSchema, SchemaStateService } from './schema-state.service';\n\n@Component({\n    selector: 'admin-schemas',\n    template: `\n        <div class=\"flex items-center space-x-2 my-4\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <mat-select\n                        name=\"type\"\n                        [(ngModel)]=\"active_schema\"\n                        (ngModelChange)=\"copySchema()\"\n                        placeholder=\"Select Schema...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let schema of schema_list | async\"\n                            [value]=\"schema\"\n                        >\n                            {{ schema.name }}\n                        </mat-option>\n                        <mat-option\n                            (click)=\"newSchema(); $event.preventDefault()\"\n                        >\n                            <span class=\"italic font-sans\">New Schema</span>\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"newSchema()\">\n                Add Schema\n            </button>\n        </div>\n        <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"schema_copy\">\n            <div class=\"flex flex-col\">\n                <label for=\"type\">Schema Name: </label>\n                <mat-form-field class=\"h-12\" appearance=\"outline\">\n                    <input matInput [(ngModel)]=\"schema_copy.name\" />\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"mt-6\" (click)=\"saveSchema()\">\n                Save Schema\n            </button>\n        </div>\n        <div class=\"relative flex-1 h-1/2\">\n            <ng-container *ngIf=\"schema_copy; else empty_state\">\n                <settings-form-field\n                    [(ngModel)]=\"schema_copy.schema\"\n                    lang=\"json\"\n                    [readonly]=\"false\"\n                ></settings-form-field>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"absolute inset-0 flex items-center justify-center\">\n                <p class=\"p-8\">Select a schema to edit</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 1rem;\n                right: 1rem;\n                bottom: 0;\n                display: flex;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class AdminSchemasComponent {\n    public active_schema: JsonSchema;\n    public schema_copy: JsonSchema;\n\n    public readonly schema_list = this._state.schemas.pipe(shareReplay(1));\n    constructor(private _state: SchemaStateService) {}\n\n    public copySchema() {\n        if (!this.active_schema) return;\n        this.schema_copy = JSON.parse(JSON.stringify(this.active_schema));\n    }\n\n    public async newSchema() {\n        this.active_schema = {\n            name: 'New Schema',\n            schema: '{}',\n        };\n        this.copySchema();\n    }\n\n    public saveSchema() {\n        this._state.saveSchema(this.schema_copy);\n        this.active_schema = null;\n        this.schema_copy = null;\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from \"../getTime/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import { getUnixTime } from 'date-fns';\n\nexport class PlaceAPIKeyDetails {\n    public readonly id: string;\n    public readonly name: string;\n    public readonly user_id: string;\n    public readonly authority_id: string;\n    public readonly description: string;\n    public readonly scopes: string[];\n    public readonly permissions: null | 'user' | 'support' | 'admin';\n    public readonly created_at: number;\n    public readonly updated_at: number;\n    public readonly secret?: string;\n    public readonly x_api_key?: string;\n\n    constructor(_data: Partial<PlaceAPIKeyDetails>) {\n        this.id = _data.id || '';\n        this.name = _data.name || '';\n        this.user_id = _data.user_id || '';\n        this.authority_id = _data.authority_id || '';\n        this.description = _data.description || '';\n        this.permissions = _data.permissions || 'user';\n        this.created_at = _data.created_at || getUnixTime(new Date());\n        this.updated_at = _data.updated_at || getUnixTime(new Date());\n        this.secret = _data.secret;\n        this.x_api_key = _data.x_api_key || '';\n        this.scopes = _data.scopes || [];\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { addChipItem, removeChipItem } from '../../common/forms';\nimport { getInvalidFields } from '../../common/general';\nimport { notifyError } from '../../common/notifications';\nimport { DialogEvent } from '../../common/types';\nimport { APIKeyService } from './api-keys.service';\n\n@Component({\n    selector: 'api-key-modal',\n    template: `\n        <header class=\"h-12 flex items-center justify-between p-2\">\n            <h2>New API Key</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon className=\"backoffice-cross\"></app-icon>\n            </button>\n        </header>\n        <main\n            class=\"w-[32rem] max-w-[calc(100vw-2rem)]\"\n            *ngIf=\"!loading && form; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Name<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                        matInput\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"name\">Description</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        name=\"description\"\n                        formControlName=\"description\"\n                        placeholder=\"Description\"\n                        matInput\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"scope\">Scopes<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Scopes\">\n                        <mat-chip\n                            *ngFor=\"let scope of scope_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeScope(scope)\"\n                        >\n                            {{ scope }}\n                            <app-icon\n                                matChipRemove\n                                class=\"dark:text-black\"\n                                className=\"backoffice-cross\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            matInput\n                            placeholder=\"Scopes...\"\n                            i18n-placeholder=\"@@apiScopePlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addScope($event)\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-chip-list>\n                    <mat-error>At least one scope is required</mat-error>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let option of scopes | async\"\n                            (click)=\"addScope({ input: {}, value: option })\"\n                        >\n                            {{ option }}\n                        </mat-option>\n                    </mat-autocomplete>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"user\">User<span>*</span></label>\n                <an-action-field\n                    [matMenuTriggerFor]=\"menu\"\n                    yPosition=\"below\"\n                    class=\"mb-8\"\n                    (click)=\"focusInput()\"\n                >\n                    <div [class.opacity-30]=\"!form.value.user?.id\">\n                        {{ form.value.user?.name || 'Select user' }}\n                    </div>\n                </an-action-field>\n                <mat-menu #menu=\"matMenu\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"px-2 h-12\"\n                        (click)=\"\n                            $event.preventDefault(); $event.stopPropagation()\n                        \"\n                    >\n                        <input\n                            matInput\n                            #input\n                            ngModel\n                            (ngModelChange)=\"setSearch($event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Search users...\"\n                        />\n                    </mat-form-field>\n                    <button\n                        mat-menu-item\n                        *ngFor=\"let item of users | async | slice: 0:10\"\n                        (click)=\"\n                            form.patchValue({ user: item, user_id: item.id });\n                            setSearch('')\n                        \"\n                        [class.text-primary]=\"form.value.user?.id === item.id\"\n                    >\n                        {{ item.name }}\n                    </button>\n                </mat-menu>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"permissions\">Permissions</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        name=\"permissions\"\n                        formControlName=\"permissions\"\n                        placeholder=\"None\"\n                    >\n                        <mat-option [value]=\"null\">None</mat-option>\n                        <mat-option value=\"user\">User</mat-option>\n                        <mat-option value=\"support\">Support</mat-option>\n                        <mat-option value=\"admin\">Admin</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"p-2 flex items-center justify-center border-t border-gray-100 dark:border-gray-100/20\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 w-[24rem] h-64\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class APIKeyModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        user: new FormControl(null),\n        user_id: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        scopes: new FormControl([], [Validators.required, Validators.minLength(1)]),\n        permissions: new FormControl(''),\n    });\n    public loading: string;\n    public readonly search_str = new BehaviorSubject('');\n    public readonly scopes = this._service.available_scopes;\n\n    @ViewChild('input') public _input_el: ElementRef<HTMLInputElement>;\n\n    public readonly users = combineLatest([\n        this._service.users,\n        this.form.valueChanges,\n    ]).pipe(\n        map(([users, { permissions }]) => {\n            if (permissions === 'admin')\n                return users.filter((_) => _.sys_admin);\n            if (permissions === 'support')\n                return users.filter((_) => _.support || _.sys_admin);\n            return users.sort((a, b) => a.name?.localeCompare(b.name));\n        })\n    );\n\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public readonly focusInput = () =>\n        setTimeout(() => this._input_el?.nativeElement?.focus(), 100);\n    public readonly setSearch = (s) => this._service.setSearch(s);\n\n    public readonly addScope = (e) =>\n        addChipItem(this.form.controls.scopes as any, e);\n    public readonly removeScope = (i) =>\n        removeChipItem(this.form.controls.scopes as any, i);\n\n    constructor(private _service: APIKeyService) {\n        setTimeout(() => this.form.patchValue({ permissions: null }), 100);\n    }\n\n    public get scope_list(): string[] {\n        return this.form.controls.scopes.value;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = { ...this.form.value };\n        delete data.user;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    create,\n    get,\n    PlaceDomain,\n    PlaceUser,\n    query,\n    queryDomains,\n    queryUsers,\n    remove,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, first, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { openConfirmModal } from '../../common/general';\nimport { notifyError, notifySuccess } from '../../common/notifications';\nimport { PlaceAPIKeyDetails } from './api-key-details.class';\nimport { APIKeyModalComponent } from './api-key-modal.component';\n\n@Injectable()\nexport class APIKeyService {\n    private _search = new BehaviorSubject<string>('');\n    private _domain = new BehaviorSubject<PlaceDomain>(null);\n    private _last_key = new BehaviorSubject<PlaceAPIKeyDetails>(null);\n    private _change = new BehaviorSubject<number>(0);\n\n    public readonly last_key = this._last_key.asObservable();\n    public readonly active_domain = this._domain.asObservable();\n\n    public readonly available_domains = queryDomains({ limit: 500 }).pipe(\n        map((_) => _.data),\n        shareReplay(1)\n    );\n\n    public readonly available_scopes: Observable<string[]> = get('/api/engine/v2/scopes').pipe(\n        map(_ => _ as any),\n        shareReplay(1)\n    );\n\n    public readonly available_keys = combineLatest([\n        this._domain,\n        this._change,\n    ]).pipe(\n        switchMap(([domain]) => {\n            return domain\n                ? query({\n                      query_params: { authority_id: domain.id },\n                      fn: (d) => new PlaceAPIKeyDetails(d),\n                      path: 'api_keys',\n                  }).pipe(map((_) => _.data as PlaceAPIKeyDetails[]))\n                : of([] as PlaceAPIKeyDetails[]);\n        }),\n        shareReplay(1)\n    );\n\n    public readonly users = combineLatest([\n        this._domain,\n        this._search,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(([domain, q]) => {\n            return domain\n                ? queryUsers({ authority_id: domain.id, q }).pipe(\n                      map((_) => _.data as PlaceUser[])\n                  )\n                : of([] as PlaceUser[]);\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _dialog: MatDialog) {}\n\n    public setDomain(domain: PlaceDomain) {\n        this._domain.next(domain);\n    }\n\n    public setSearch(s: string) {\n        this._search.next(s);\n    }\n\n    public async newKey() {\n        const ref = this._dialog.open(APIKeyModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Creating new API key...';\n        const domain = this._domain.getValue();\n        const key = await create({\n            query_params: {},\n            fn: (d) => new PlaceAPIKeyDetails(d),\n            path: 'api_keys',\n            form_data: {\n                ...details.metadata,\n                authority_id: domain.id,\n            },\n        })\n            .toPromise()\n            .catch((_) => {\n                ref.close();\n                notifyError(_);\n                throw _;\n            });\n        this._last_key.next(key as any);\n        this._change.next(Date.now());\n        notifySuccess('Successfully created new API key.');\n        ref.close();\n    }\n\n    public async removeKey(key: PlaceAPIKeyDetails) {\n        const details = await openConfirmModal(\n            {\n                title: 'Remove API Key',\n                content: `Are you sure you wish to remove this API key?\n                    Removing this key may result in applications using this key to stop working.`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Removing API key...');\n        await remove({\n            id: key.id,\n            query_params: {},\n            path: 'api_keys',\n        }).toPromise();\n        details.close();\n        notifySuccess('Successfully removed API key.');\n    }\n}\n","import { Component } from '@angular/core';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { take } from 'rxjs/operators';\nimport { APIKeyService } from './api-keys.service';\nimport { notifyInfo } from '../../common/notifications';\n\n@Component({\n    selector: 'admin-api-keys',\n    template: `\n        <div class=\"flex items-start space-x-2 my-4\">\n            <div class=\"flex flex-col space-y-1\">\n                <label for=\"type\">Domain: </label>\n                <mat-form-field appearance=\"outline\" class=\"h-12\">\n                    <mat-select\n                        name=\"type\"\n                        [ngModel]=\"domain | async\"\n                        (ngModelChange)=\"setDomain($event)\"\n                        placeholder=\"Select Domain...\"\n                    >\n                        <mat-option\n                            *ngFor=\"let domain of domain_list | async\"\n                            [value]=\"domain\"\n                        >\n                            {{ domain.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button\n                mat-button\n                class=\"mt-8 min-w-[8rem]\"\n                [disabled]=\"!(domain | async)\"\n                (click)=\"newKey()\"\n            >\n                Add API Key\n            </button>\n            <div\n                *ngIf=\"last_key | async\"\n                class=\"rounded shadow border border-gray-100 min-w-[24rem]\"\n            >\n                <div class=\"border-b px-2 pb-1 border-gray-200 !w-full\">\n                    <label class=\"p-0 m-0\">\n                        Last API Key Details ({{\n                            (last_key | async)?.name || 'Unanamed API Key'\n                        }})\n                    </label>\n                </div>\n                <div class=\"p-2\">\n                    <div\n                        class=\"select-all text-xs opacity-60 mono break-words cursor-pointer\"\n                        (click)=\"copyKey()\"\n                    >\n                        {{ (last_key | async)?.x_api_key}}\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div role=\"table\" class=\"min-w-[60rem]\" *ngIf=\"(key_list | async)?.length; else load_state\">\n            <div table-head>\n                <div class=\"w-32 p-2\">Name</div>\n                <div class=\"flex-1 p-2\">Description</div>\n                <div class=\"w-32 p-2 truncate\">Scopes</div>\n                <div class=\"w-28 p-2\">Permissions</div>\n                <div class=\"w-32 p-2\">Created</div>\n                <div class=\"w-16 p-2\"></div>\n            </div>\n            <div table-body>\n                <div table-row *ngFor=\"let item of key_list | async\">\n                    <div class=\"w-32 p-2\">{{ item.name }}</div>\n                    <div class=\"flex-1 p-2\">{{ item.description }}</div>\n                    <div class=\"w-32 p-2 truncate\">\n                        <span\n                            class=\"m-1 px-2 py-1 bg-gray-400 rounded text-xs text-white\"\n                            *ngFor=\"let scope of item.scopes\"\n                        >\n                            {{ scope }}\n                        </span>\n                    </div>\n                    <div class=\"w-28 p-2\">{{ item.permissions || 'None' }}</div>\n                    <div class=\"w-32 p-2\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                    <div class=\"w-16 p-2 flex items-center\">\n                        <button mat-icon-button (click)=\"deleteKey(item)\">\n                            <app-icon className=\"backoffice-trash\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No API Keys</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AdminAPIKeysComponent {\n    public readonly domain = this._service.active_domain;\n    public readonly domain_list = this._service.available_domains;\n    public readonly key_list = this._service.available_keys;\n    public readonly last_key = this._service.last_key;\n\n    public readonly setDomain = (d) => this._service.setDomain(d);\n    public readonly newKey = () => this._service.newKey();\n    public readonly deleteKey = (k) => this._service.removeKey(k);\n\n    constructor(\n        private _service: APIKeyService,\n        private _clipboard: Clipboard\n    ) {}\n\n    public async copyKey() {\n        const key = await this.last_key.pipe(take(1)).toPromise();\n        if (!key?.x_api_key) return;\n        this._clipboard.copy(key.x_api_key);\n        notifyInfo('Copied API key to clipboard.');\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { AuthorisedAdminGuard } from 'apps/backoffice/src/app/ui/guards/authorised-admin.guard';\n\nimport { PlaceComponent } from './admin.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        component: PlaceComponent,\n        canActivate: [AuthorisedAdminGuard],\n        children: [\n            { path: 'about', component: PlaceDetailsComponent },\n            { path: 'database', component: PlaceDatabaseDetailsComponent },\n            { path: 'clusters', component: PlaceClusterDetailsComponent },\n            { path: 'interfaces', component: AdminInterfacesComponent },\n            { path: 'brokers', component: AdminBrokersComponent },\n            { path: 'edge', component: PlaceEdgeComponent },\n            { path: 'edge/:id', component: PlaceEdgeComponent },\n            { path: 'extensions', component: PlaceExtensionsComponent },\n            { path: 'staff-api', component: PlaceStaffAPIComponent },\n            { path: 'schemas', component: AdminSchemasComponent },\n            { path: 'api-keys', component: AdminAPIKeysComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './admin.routes';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\nimport { PlaceComponent } from './admin.component';\nimport { PlaceDatabaseDetailsComponent } from './database-details.component';\nimport { PlaceDetailsComponent } from './details.component';\nimport { PlaceClusterDetailsComponent } from './cluster-details/cluster-details.component';\nimport { PlaceClusterItemComponent } from './cluster-details/cluster-item.component';\nimport { PlaceClusterTaskListComponent } from './cluster-details/cluster-task-list.component';\nimport { AdminInterfacesComponent } from './interfaces.component';\nimport { AdminBrokersComponent } from './brokers.component';\nimport { PlaceExtensionsComponent } from './extensions.component';\nimport { ExtensionModalComponent } from './extension-modal/extension-modal.component';\nimport { PlaceStaffAPIComponent } from './staff-api.component';\nimport { StaffTenantModalComponent } from './staff-tenant-modal.component';\nimport { PlaceEdgeComponent } from './edge.component';\nimport { EdgeModalComponent } from './edge-modal.component';\nimport { AdminClusterNodeComponent } from './cluster-details/cluster-node.component';\nimport { AdminSchemasComponent } from './schemas.component';\nimport { AdminAPIKeysComponent } from './api-keys/api-keys.component';\nimport { APIKeyModalComponent } from './api-keys/api-key-modal.component';\nimport { APIKeyService } from './api-keys/api-keys.service';\nimport { BookingLimitsModalComponent } from './booking-limits-modal.component';\n\n@NgModule({\n    declarations: [\n        PlaceComponent,\n        PlaceDatabaseDetailsComponent,\n        PlaceDetailsComponent,\n        PlaceClusterDetailsComponent,\n        PlaceClusterItemComponent,\n        PlaceClusterTaskListComponent,\n        PlaceExtensionsComponent,\n        AdminInterfacesComponent,\n        AdminBrokersComponent,\n        ExtensionModalComponent,\n        PlaceStaffAPIComponent,\n        StaffTenantModalComponent,\n        PlaceEdgeComponent,\n        EdgeModalComponent,\n        AdminClusterNodeComponent,\n        AdminSchemasComponent,\n        AdminAPIKeysComponent,\n        APIKeyModalComponent,\n        BookingLimitsModalComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n    providers: [\n        APIKeyService\n    ]\n})\nexport class AppPlaceModule {}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n"],"x_google_ignoreList":[19,20,27]}