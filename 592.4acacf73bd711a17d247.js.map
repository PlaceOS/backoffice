{"version":3,"sources":["./apps/backoffice/src/app/engine/schema-state.service.ts"],"names":["SchemaStateService","_schemas","schemas","this","asObservable","loadSchemas","id","schema","getValue","find","_","JSON","parse","schema_list","localStorage","getItem","sort","a","b","name","localeCompare","next","filter","setItem","stringify"],"mappings":"0IAaO,Y,MAAMA,EAKT,cAJQ,KAAAC,SAAW,IAAI,IAA8B,IAErC,KAAAC,QAAUC,KAAKF,SAASG,eAGpCD,KAAKE,cAGF,UAAUC,GACb,MACMC,EADcJ,KAAKF,SAASO,WACPC,KAAKC,GAAKA,EAAEJ,KAAOA,GAC9C,OAAKC,EACEI,KAAKC,MAAML,EAAOA,QAAU,MADf,KAIjB,cACH,MAAMM,EAAcF,KAAKC,MAAME,aAAaC,QAAQ,uBAAyB,MAC7EF,EAAYG,KAAK,CAACC,EAAGC,KAAK,MAAC,OAAM,QAAN,EAAAD,EAAEE,YAAI,eAAEC,cAAcF,EAAEC,QACnDhB,KAAKF,SAASoB,KAAKR,GAGhB,WAAWN,GACd,IAAIM,EAAcV,KAAKF,SAASO,WAChCK,EAAc,IAAIA,EAAYS,OAAOZ,GAAKH,EAAOD,KAAOI,EAAEJ,IAAKC,GAC/DM,EAAYG,KAAK,CAACC,EAAGC,KAAK,MAAC,OAAM,QAAN,EAAAD,EAAEE,YAAI,eAAEC,cAAcF,EAAEC,QACnDL,aAAaS,QAAQ,qBAAsBZ,KAAKa,UAAUX,IAC1DV,KAAKF,SAASoB,KAAKR,I,6CA3Bdb,I,0BAAAA,EAAkB,QAAlBA,EAAkB,qBAFf,S,GAET","file":"592.4acacf73bd711a17d247.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HashMap } from \"@placeos/ts-client/dist/esm/utilities/types\";\nimport { BehaviorSubject } from \"rxjs\";\n\nexport interface JsonSchema {\n    id: string;\n    name: string;\n    schema: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SchemaStateService {\n    private _schemas = new BehaviorSubject<JsonSchema[]>([]);\n\n    public readonly schemas = this._schemas.asObservable();\n\n    constructor() {\n        this.loadSchemas();\n    }\n\n    public getSchema(id: string): HashMap {\n        const schema_list = this._schemas.getValue();\n        const schema = schema_list.find(_ => _.id === id);\n        if (!schema) return null;\n        return JSON.parse(schema.schema || '{}');\n    }\n\n    public loadSchemas(): void {\n        const schema_list = JSON.parse(localStorage.getItem('BACKOFFICE.schemas') || '[]');\n        schema_list.sort((a, b) => a.name?.localeCompare(b.name));\n        this._schemas.next(schema_list);\n    }\n\n    public saveSchema(schema: JsonSchema): void {\n        let schema_list = this._schemas.getValue();\n        schema_list = [...schema_list.filter(_ => schema.id !== _.id), schema];\n        schema_list.sort((a, b) => a.name?.localeCompare(b.name));\n        localStorage.setItem('BACKOFFICE.schemas', JSON.stringify(schema_list));\n        this._schemas.next(schema_list);\n    }\n}\n"],"sourceRoot":"webpack:///"}