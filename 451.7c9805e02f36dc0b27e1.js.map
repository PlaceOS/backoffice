{"version":3,"sources":["./apps/backoffice/src/app/metrics/clock.component.ts","./apps/backoffice/src/app/metrics/metrics.component.ts","./apps/backoffice/src/app/metrics/metrics.routes.ts","./apps/backoffice/src/app/metrics/metrics.module.ts"],"names":["ClockComponent","this","updateTime","interval","time","Date","hour_angle","getHours","getMinutes","minute_angle","getSeconds","second_angle","MetricsComponent","_settings","super","api_authority","metrics","config","title","ROUTES","path","component","children","redirectTo","AppMetricsModule"],"mappings":"kNA2CO,Y,MAAMA,UAAuB,IAQzB,WACHC,KAAKC,aACLD,KAAKE,SAAS,OAAQ,IAAMF,KAAKC,aAAc,KAG5C,aACH,MAAME,EAAO,IAAIC,KACjBJ,KAAKK,YACEF,EAAKG,WAAa,GAAMH,EAAKI,aAAe,IAAM,GAAM,IAC/DP,KAAKQ,cACCL,EAAKI,aAAeJ,EAAKM,aAAe,IAAM,GAAM,IAC1DT,KAAKU,aAAgBP,EAAKM,aAAe,GAAM,K,0EAnB1CV,KAAc,GAAdA,I,2BAAAA,EAAc,2fArCnB,iBACI,iBAMA,iBAMA,iBAMA,iBAGJ,S,MAnBQ,2EAMA,6EAMA,+E,2HAsBT,G,cCKA,Y,MAAMY,UAAyB,IAclC,YAAoBC,GAChBC,QADgB,KAAAD,YAPpB,kBACI,MAAME,GAAgB,WACtB,OAAOA,EACDA,EAAcC,SAAWD,EAAcE,OAAOD,QAC9C,GAOH,WACHf,KAAKC,aACLD,KAAKE,SAAS,OAAQ,IAAMF,KAAKC,aAAc,KAC/CD,KAAKY,UAAUK,MAAQ,UAGpB,aACHjB,KAAKG,KAAO,IAAIC,M,6CAzBXO,GAAgB,a,wBAAhBA,EAAgB,sF,SA/BT,mG,2YARZ,iBAII,iBAGI,4BAEA,QACA,iBACI,iBACA,iBACI,iBAAkB,S,gBAA8B,QAChD,kBAAiB,U,iBAA+B,QACpD,QACJ,QACJ,QACA,kBACI,qB,iBAIJ,QACJ,S,MAtBI,iCAW8B,8CACD,gDAOrB,oE,oJAkBb,GC5CA,MAAMO,EAAiB,CAC1B,CAAEC,KAAM,GAAIC,UAAWT,EAAkBU,SAAU,IACnD,CAAEF,KAAM,YAAaC,UAAWT,EAAkBU,SAAU,IAC5D,CAAEF,KAAM,oBAAqBC,UAAWT,EAAkBU,SAAU,IACpE,CAAEF,KAAM,UAAWC,UAAWT,EAAkBU,SAAU,IAC1D,CAAEF,KAAM,KAAWG,WAAY,K,cCW5B,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAPA,CACL,KACA,KACA,cAAsBL,GACtB,Q,GAGD","file":"451.7c9805e02f36dc0b27e1.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { BaseClass } from '../common/base.class';\n\n@Component({\n    selector: 'clock',\n    template: `\n        <div class=\"rounded-full h-12 w-12 border-2 border-white relative\">\n            <div\n                class=\"hand absolute bottom-1/2 left-1/2 bg-white h-3 w-1 rounded\"\n                [style.transform]=\"\n                    'translateX(-50%) rotate(' + hour_angle + 'deg)'\n                \"\n            ></div>\n            <div\n                class=\"hand absolute bottom-1/2 left-1/2 bg-white h-4 minute\"\n                [style.transform]=\"\n                    'translateX(-50%) rotate(' + minute_angle + 'deg)'\n                \"\n            ></div>\n            <div\n                class=\"hand absolute bottom-1/2 left-1/2 bg-white h-5 w-px\"\n                [style.transform]=\"\n                    'translateX(-50%) rotate(' + second_angle + 'deg)'\n                \"\n            ></div>\n            <div\n                class=\"absolute top-1/2 left-1/2 h-2 w-2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-full\"\n            ></div>\n        </div>\n    `,\n    styles: [\n        `\n            .hand {\n                transform-origin: 50% 100%;\n            }\n\n            .minute {\n                width: 2px;\n                border-radius: 1px;\n            }\n        `,\n    ],\n})\nexport class ClockComponent extends BaseClass implements OnInit {\n    /** Angle to display the hour hand of the clock at */\n    public hour_angle: number;\n    /** Angle to display the minute hand of the clock at */\n    public minute_angle: number;\n    /** Angle to display the seconds hand of the clock at */\n    public second_angle: number;\n\n    public ngOnInit() {\n        this.updateTime();\n        this.interval('time', () => this.updateTime(), 1000);\n    }\n\n    public updateTime() {\n        const time = new Date();\n        this.hour_angle =\n            (((time.getHours() % 12) + time.getMinutes() / 60) / 12) * 360;\n        this.minute_angle =\n            ((time.getMinutes() + time.getSeconds() / 60) / 60) * 360;\n        this.second_angle = (time.getSeconds() / 60) * 360;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { authority } from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { SettingsService } from '../common/settings.service';\n\n@Component({\n    selector: 'app-metrics',\n    template: `\n        <div\n            class=\"h-full w-full flex flex-col bg-gray-700\"\n            [class.fullscreen]=\"fullscreen\"\n        >\n            <div\n                class=\"flex items-center w-full bg-primary text-white py-2 px-4 border-b border-gray-400\"\n            >\n                <div class=\"text-2xl flex-1 font-medium\" i18n=\"@@metricsHeader\">\n                    Metrics\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <clock></clock>\n                    <div class=\"display\">\n                        <div class=\"time\">{{ time | date: 'shortTime' }}</div>\n                        <div class=\"day\">{{ time | date: 'mediumDate' }}</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"flex-1 w-full h-1/2 relative\">\n                <iframe\n                    class=\"absolute inset-0 w-full h-full\"\n                    [src]=\"metrics_url | safe: 'resource'\"\n                ></iframe>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            .fullscreen {\n                position: fixed !important;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                z-index: 9999;\n            }\n        `,\n    ],\n})\nexport class MetricsComponent extends BaseClass implements OnInit {\n    /** Whether to only render the metrics view */\n    public fullscreen: boolean;\n\n    public time: Date;\n\n    /** URL for the metrics interface */\n    public get metrics_url(): string {\n        const api_authority = authority();\n        return api_authority\n            ? api_authority.metrics || api_authority.config.metrics\n            : '';\n    }\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.updateTime();\n        this.interval('time', () => this.updateTime(), 1000);\n        this._settings.title = 'Metrics';\n    }\n\n    public updateTime() {\n        this.time = new Date();\n    }\n}\n","\nimport { Routes } from '@angular/router';\nimport { MetricsComponent } from './metrics.component';\n\nexport const ROUTES: Routes = [\n    { path: '', component: MetricsComponent, children: [] },\n    { path: 'dashboard', component: MetricsComponent, children: [] },\n    { path: 'dashboard/:period', component: MetricsComponent, children: [] },\n    { path: ':period', component: MetricsComponent, children: [] },\n    { path: '**',      redirectTo: '' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './metrics.routes';\n\nimport { MetricsComponent } from './metrics.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { ClockComponent } from './clock.component';\n\n@NgModule({\n    declarations: [MetricsComponent, ClockComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppMetricsModule {}\n"],"sourceRoot":"webpack:///"}