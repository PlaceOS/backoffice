{"version":3,"file":"396.c04de36434487195.js","mappings":"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","names":["SystemStateService","BaseClass","constructor","_state","_debug","_dialog","super","i","this","item","BehaviorSubject","all_item","pipe","debounceTime","switchMap","PlaceSystem","systemSettings","id","combineLatest","_change","_","_loading","next","getValue","settings","details","Promise","all","listSystemTriggers","map","d","total","toPromise","listMetadata","triggers","metadata","devices","modules","length","zones","queryModules","control_system_id","complete","limit","data","sort","a","b","indexOf","_modules","shareReplay","reduce","mapping","device","isListening","mod","custom_name","name","calculateModuleIndex","listSystemZones","asObservable","active_item","startSystem","t","confirm","title","content","icon","type","class","reason","loading","catch","err","notifyError","JSON","stringify","response","message","notifySuccess","close","stopSystem","toggleModuleDebug","unbind","bind","newModule","module","edit","PlaceModule","system","joinModule","editModule","Date","now","selectTrigger","ref","open","SelectItemModalComponent","service_name","query_fn","queryTriggers","q","resp","race","componentInstance","event","first","afterClosed","addTrigger","trigger","addSystemTrigger","enabled","important","trigger_id","timeout","editTrigger","ItemCreateUpdateModalComponent","height","width","maxHeight","maxWidth","save","updateTrigger","external_save","url","apiEndpoint","trig","put","r","removeTrigger","removeSystemTrigger","statusText","reorderModules","fst","snd","n","list","moveItemInArray","updateSystem","replaceItem","reorderZones","addSystemModule","removeModule","driver_id","removeSystemModule","reloadModule","recompileDriver","driver","addZones","zone_list","unique","removeZone","zone","filter","z","s","toggleModulePower","running","stopModule","startModule","viewDetails","ViewResponseModalComponent","openConfirmModal","i0","factory","SystemAboutComponent","_service","associated_settings","selectors","$localize","ctx","$event","SystemModulesComponent","debug_state","module_bindings","extra","role","PlaceDriverRole","refresh_modules","driver_type","handleContextEvent","power","viewState","loadModule","reload","showModule","k","hasOwnProperty","getModules","ViewModuleStateModalComponent","then","drop","previousIndex","currentIndex","addModule","new_module","i18n_21","SystemTriggersComponent","filter$","temp_trigger","temp","search","toLowerCase","includes","copyToClipboard","location","origin","webhook_secret","notifyInfo","updateComparisons","comparisons","trigger_state","key","conditions","SystemZonesComponent","pending_zones","p","pending","queryZones","SystemMetadataComponent","ROUTES","path","component","SystemsComponent","_item","create","bulkAdd","extensions","extensionsForItem","updateTabList","counts","tab_list","count","concat","ngOnInit","subscription","subscribe","children","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppSystemsModule","CommonModule","FormsModule","ReactiveFormsModule","RouterModule","SharedContentModule","DragDropModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/systems/system-state.service.ts","./apps/backoffice/src/app/systems/system-about.component.ts","./apps/backoffice/src/app/systems/system-modules.component.ts","./apps/backoffice/src/app/systems/system-triggers.component.ts","./apps/backoffice/src/app/systems/system-zones.component.ts","./apps/backoffice/src/app/systems/system-metadata.component.ts","./apps/backoffice/src/app/systems/systems.component.ts","./apps/backoffice/src/app/systems/systems.routes.ts","./apps/backoffice/src/app/systems/systems.module.ts"],"sourcesContent":["import { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addSystemModule,\n    addSystemTrigger,\n    apiEndpoint,\n    listSystemTriggers,\n    listSystemZones,\n    PlaceModule,\n    PlaceSystem,\n    PlaceTrigger,\n    PlaceZone,\n    put,\n    queryModules,\n    queryTriggers,\n    recompileDriver,\n    removeSystemModule,\n    removeSystemTrigger,\n    showMetadata,\n    startModule,\n    startSystem,\n    stopModule,\n    stopSystem,\n    systemSettings,\n    updateSystem,\n    updateTrigger,\n    listMetadata\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { calculateModuleIndex } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { openConfirmModal, unique } from '../common/general';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { ConfirmModalData } from '../overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from '../overlays/item-modal/item-modal.component';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData,\n} from '../overlays/select-item-modal/select-item-modal.component';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SystemStateService extends BaseClass {\n    /** Observable of the active item */\n    public readonly item = this._state.item;\n\n    private _loading = new BehaviorSubject<HashMap<boolean>>({});\n    private _modules = new BehaviorSubject<PlaceModule[]>([]);\n    private _change = new BehaviorSubject<number>(0);\n    /** Observable for associated settings of the active item */\n    public readonly associated_settings = this._state.all_item.pipe(\n        debounceTime(300),\n        switchMap((item: PlaceSystem) => {\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            return systemSettings(item.id);\n        })\n    );\n    /** Observable of the counts of the active item */\n    public readonly counts = combineLatest([\n        this._state.all_item,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(async (_) => {\n            const [item] = _;\n            if (!item || !(item instanceof PlaceSystem)) return {};\n            this._loading.next({\n                ...this._loading.getValue(),\n                settings: true,\n            });\n            const details = await Promise.all([\n                listSystemTriggers(item.id)\n                    .pipe(map((d) => d.total))\n                    .toPromise(),\n                listMetadata(item.id).toPromise(),\n            ]);\n            const [triggers, metadata] = details;\n            this._loading.next({\n                ...this._loading.getValue(),\n                settings: false,\n            });\n            return {\n                devices: (item as any).modules.length,\n                zones: (item as any).zones.length,\n                triggers,\n                metadata: metadata.length,\n            };\n        })\n    );\n    /** Observable for modules associated with system */\n    public readonly modules = combineLatest([this.item, this._change]).pipe(\n        switchMap(async (_) => {\n            const item = _[0];\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                modules: true,\n            });\n            const modules = await queryModules({\n                control_system_id: item.id,\n                complete: true,\n                limit: 200,\n            } as any)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            this._loading.next({\n                ...this._loading.getValue(),\n                modules: false,\n            });\n            modules.sort(\n                (a, b) =>\n                    item.modules.indexOf(a.id) - item.modules.indexOf(b.id)\n            );\n            this._modules.next(modules);\n            return modules;\n        }),\n        shareReplay()\n    );\n    /** Observable for debug state of the active modules */\n    public readonly debug_state = this.modules.pipe(\n        map((modules) => {\n            return modules.reduce((mapping, device) => {\n                mapping[device.id] = this._debug.isListening(device);\n                return mapping;\n            }, {});\n        })\n    );\n    /** Observable for module bindings */\n    public readonly module_bindings = this.modules.pipe(\n        map((modules) =>\n            modules.map(\n                (mod) =>\n                    `${\n                        mod.custom_name || mod.name || 'Blank'\n                    }_${calculateModuleIndex(modules, mod)}`\n            )\n        ),\n        shareReplay()\n    );\n    /** Observable for zones associated with system */\n    public readonly zones = this._state.item.pipe(\n        switchMap(async (item: PlaceSystem) => {\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                zones: true,\n            });\n            const zones = await listSystemZones(item.id)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            zones.sort(\n                (a, b) => item.zones.indexOf(a.id) - item.zones.indexOf(b.id)\n            );\n            this._loading.next({\n                ...this._loading.getValue(),\n                zones: false,\n            });\n            return zones;\n        }),\n        shareReplay()\n    );\n    /** Observable for triggers associated with system */\n    public readonly triggers = combineLatest([this.item, this._change]).pipe(\n        switchMap(async (_) => {\n            const [item] = _;\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                triggers: true,\n            });\n            const triggers = await listSystemTriggers(item.id)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            this._loading.next({\n                ...this._loading.getValue(),\n                triggers: false,\n            });\n            return triggers;\n        }),\n        shareReplay()\n    );\n    /** Observable of the active item */\n    public readonly loading = this._loading.asObservable();\n\n    public readonly getModules = () => this._modules.getValue();\n    /** Observable of the active item */\n    public get active_item(): PlaceSystem {\n        return this._state.active_item || ({} as any);\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _debug: PlaceDebugService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public async startSystem() {\n        const details = await this.confirm({\n            title: 'Start system?',\n            content: `Are you sure you want to start this system?<br>All stopped modules within the system will boot up.`,\n            icon: { type: 'icon', class: 'backoffice-controller-play' },\n        });\n        if (details && details.reason) {\n            details.loading('Starting system...');\n            const resp = await startSystem(this.active_item.id)\n                .toPromise()\n                .catch((err) => {\n                    notifyError(\n                        `Failed to start system: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                    return err;\n                });\n            if (!resp) notifySuccess(`Successfully started system`);\n            details.close();\n        }\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public async stopSystem() {\n        const details = await this.confirm({\n            title: 'Stop system?',\n            content: `Are you sure you want to stop this system?<br>All modules will be immediately stopped regardless of any other systems they may be in.`,\n            icon: { type: 'icon', class: 'backoffice-controller-stop' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Stopping system...');\n        const resp = await stopSystem(this.active_item.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to stop system: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        if (!resp) notifySuccess(`Successfully stopped system`);\n        details.close();\n    }\n\n    public toggleModuleDebug(device: PlaceModule) {\n        if (!device) return;\n        if (this._debug.isListening(device)) {\n            this._debug.unbind(device);\n        } else {\n            this._debug.bind(\n                device,\n                `${\n                    device.custom_name || device.name || 'Blank'\n                }_${calculateModuleIndex(this._modules.getValue(), device)}`\n            );\n        }\n    }\n\n    public async newModule() {\n        const module = await this._state\n            .edit(\n                new PlaceModule({\n                    system: this.active_item,\n                    control_system_id: this.active_item.id,\n                })\n            )\n            .catch((_) => null);\n        if (!module) return;\n        this.joinModule(module.id);\n    }\n\n    public async editModule(device: PlaceModule) {\n        await this._state.edit(device).catch((_) => null);\n        this._change.next(Date.now());\n    }\n\n    public async selectTrigger() {\n        const ref = this._dialog.open<\n            SelectItemModalComponent,\n            SelectItemModalData\n        >(SelectItemModalComponent, {\n            data: {\n                service_name: 'Triggers',\n                query_fn: (_) =>\n                    queryTriggers({ q: _ }).pipe(map((resp) => resp.data)),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'action'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details || !details.reason) return ref.close();\n        const t = await this.addTrigger(ref.componentInstance.item);\n        ref.close();\n        this._change.next(Date.now());\n        return t;\n    }\n\n    public async addTrigger(trigger: PlaceTrigger) {\n        const t = await addSystemTrigger(this.active_item.id, {\n            control_system_id: this.active_item.id,\n            enabled: true,\n            important: false,\n            trigger_id: trigger.id,\n        } as any).toPromise();\n        this.timeout('change', () => this._change.next(Date.now()));\n        return t;\n    }\n\n    public async editTrigger(trigger: PlaceTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: trigger,\n                    name: 'Trigger',\n                    save: (item) => updateTrigger(item.id, item),\n                    external_save: true,\n                },\n            });\n            const details = await Promise.race([\n                ref.componentInstance.event\n                    .pipe(first((_) => _.reason === 'action'))\n                    .toPromise(),\n                ref.afterClosed().toPromise(),\n            ]);\n            if (!details || !details.reason) return;\n            ref.componentInstance.loading = 'Saving trigger settings...';\n\n            const url = `${apiEndpoint()}/systems/${\n                this.active_item.id\n            }/triggers/${trigger.id}`;\n            const trig = await put(url, details.metadata)\n                .toPromise()\n                .catch((err) => {\n                    notifyError(\n                        `Error updating trigger settings. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                    throw err;\n                });\n            ref.close();\n            if (!trig) return trigger;\n            notifySuccess(`Successfully updated trigger settings.`);\n            this.timeout('change', () => this._change.next(Date.now()));\n            return trig;\n        }\n    }\n\n    public async removeTrigger(trigger: PlaceTrigger) {\n        const details = await this.confirm({\n            title: `Remove trigger`,\n            content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        await removeSystemTrigger(this.active_item.id, trigger.id)\n            .toPromise()\n            .catch((err) => {\n                details.close();\n                notifyError(\n                    `Error removing trigger ${trigger.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        details.close();\n        notifySuccess(`Successfully removed trigger from system.`);\n        this._change.next(Date.now());\n    }\n\n    public async reorderModules(fst: number, snd: number) {\n        const details = await this.confirm({\n            title: 'Change order?',\n            content: `Are you sure you want to change the module priority?<br>Settings will be updated immediately for the system.`,\n            icon: { type: 'icon', class: 'backoffice-layers' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Updating module order...');\n        const list: string[] = [...this.active_item.modules];\n        moveItemInArray(list, fst, snd);\n        const resp = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            modules: list,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to reorder system modules: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        details.close();\n        if (resp instanceof PlaceSystem) {\n            notifySuccess(`Successfully reordered system modules.`);\n            this._state.replaceItem(resp);\n        }\n    }\n\n    public async reorderZones(fst: number, snd: number) {\n        const details = await this.confirm({\n            title: 'Change order?',\n            content: `Are you sure you want to change the zone priority?<br>Settings will be updated immediately for the system.`,\n            icon: { type: 'icon', class: 'backoffice-layers' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Updating zone order...');\n        const list: string[] = [...this.active_item.zones];\n        moveItemInArray(list, fst, snd);\n        const resp = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones: list,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to reorder system zones: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        if (resp instanceof PlaceSystem) {\n            notifySuccess(`Successfully reordered system zones.`);\n            this._state.replaceItem(resp);\n        }\n        details.close();\n    }\n\n    /**\n     * Associate module with the active system\n     * @param id ID of the module to associate with the active system\n     */\n    public async joinModule(id: string) {\n        const system = await addSystemModule(this.active_item.id, id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error adding module ${id} to system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully added module to system.`);\n        this._change.next(Date.now());\n    }\n\n    /**\n     * Remove associated module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async removeModule(device: PlaceModule) {\n        const details = await this.confirm({\n            title: 'Remove module?',\n            content: `Remove ${device.driver_id} from this system?<br>If this is not used elsewhere the associated data will be removed immediately.`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        const system = await removeSystemModule(this.active_item.id, device.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed module from system.`);\n    }\n\n    /**\n     * Reload module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async reloadModule(device: PlaceModule) {\n        const details = await this.confirm({\n            title: 'Recompile module?',\n            content: `New driver code will be loaded and the device settings will be reloaded.`,\n            icon: { type: 'icon', class: 'backoffice-install' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Recompiling and reloading driver...');\n        await recompileDriver(device.driver?.id || device.driver_id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        notifySuccess(`Successfully removed module from system.`);\n        details.close();\n    }\n\n    /**\n     * Add list of zones to the system\n     * @param zones List of zones to add\n     */\n    public async addZones(zone_list: PlaceZone[]) {\n        const zones = unique([\n            ...this.active_item.zones,\n            ...zone_list.map((_) => _.id),\n        ]);\n        const system = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error adding ${\n                        zone_list.length\n                    } zone(s) to system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully added zone to system.`);\n    }\n\n    /**\n     * Remove associated module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async removeZone(zone: PlaceZone) {\n        const details = await this.confirm({\n            title: 'Remove zone?',\n            content: `<p>Are you sure you want remove zone \"${zone.name}\" from the system?</p>Configuration will be updated immediately.`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        const zones = this.active_item.zones.filter((z) => z !== zone.id);\n        const system = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing zone ${zone.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed zone from system.`);\n    }\n\n    /**\n     * Toggle the power state\n     * @param device Module to toggle the power state\n     */\n    public async toggleModulePower(device: PlaceModule) {\n        const method = device.running ? stopModule : startModule;\n        await method(device.id)\n            .toPromise()\n            .catch((err) => {\n                if (typeof err === 'string' && err.length < 64) {\n                    notifyError(err);\n                } else {\n                    notifyError(\n                        `Failed to ${\n                            device.running ? 'stop' : 'start'\n                        } module '${device.id}'.\\nView Error?`,\n                        'View',\n                        () => this.viewDetails(err)\n                    );\n                }\n                throw err;\n            });\n        notifySuccess(\n            `Module successfully ${device.running ? 'stopped' : 'started'}`\n        );\n        (device as any).running = !device.running;\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(\n            ViewResponseModalComponent,\n            {\n                data: { content },\n            }\n        );\n    }\n\n    private async confirm(data: ConfirmModalData) {\n        return openConfirmModal(data, this._dialog);\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport { SystemStateService } from './system-state.service';\n\n\n@Component({\n    selector: 'system-about',\n    template: `\n        <section class=\"flex items-center space-x-2 mb-4\">\n            <button\n                mat-button\n                class=\"flex-1 sm:flex-none\"\n                (click)=\"start()\"\n                i18n=\"@@systemStartAction\"\n            >\n                Start System\n            </button>\n            <button\n                mat-button\n                class=\"flex-1 sm:flex-none\"\n                (click)=\"stop()\"\n                i18n=\"@@systemStopAction\"\n            >\n                Stop System\n            </button>\n        </section>\n        <section class=\"details\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.support_url\">\n                <label i18n=\"@@systemUrlLabel\">Support URL:</label>\n                <div class=\"value\">\n                    <a class=\"underline\" [href]=\"item?.support_url\" target=\"_blank\">{{\n                        item?.support_url\n                    }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.bookable\">\n                <label i18n=\"@@systemBookableLabel\">Bookable Room:</label>\n                <div class=\"value\">{{ item?.bookable ? 'Yes' : 'No' }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.email\">\n                <label i18n=\"@@emailLabel\">Email:&nbsp;</label>\n                <a\n                    *ngIf=\"item?.email\"\n                    class=\"underline select-all\"\n                    [href]=\"'mailto:' + item?.email\"\n                    target=\"_blank\"\n                    >{{ item?.email }}</a\n                >\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.capacity\">\n                <label i18n=\"@@capacityLabel\">Capacity:</label>\n                <div class=\"value\">{{ item?.capacity }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.map_id\">\n                <label i18n=\"@@mapIdLabel\">Map ID:</label>\n                <div class=\"value\">{{ item?.map_id }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.installed_ui_devices\">\n                <label i18n=\"@@systemPanelCountLabel\">Installed Touch Panels:</label>\n                <div class=\"value\">{{ item?.installed_ui_devices }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@systemCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item?.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.updated_at\">\n                <label i18n=\"@systemUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item?.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">Settings</header>\n        <section *ngIf=\"item?.settings && other_settings; else load_state\">\n            <a-settings-form\n                [id]=\"item?.id\"\n                [merge]=\"true\"\n                [settings]=\"item?.settings\"\n                [merge_settings]=\"(other_settings | async) || []\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"32\"></mat-spinner>\n                <p i18n=\"@@systemLoadingLabel\">Loading system settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            button {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SystemAboutComponent {\n    /** List of settings for associated modules, drivers and zones */\n    public readonly other_settings = this._service.associated_settings;\n\n    public readonly start = () => this._service.startSystem();\n    public readonly stop = () => this._service.stopSystem();\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: SystemStateService) {}\n}\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    loadModule,\n    PlaceDriverRole,\n    PlaceModule,\n    PlaceSystem,\n    queryModules,\n    showModule,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifyError,\n    notifySuccess,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { AppLink, HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    ModuleStateModalData,\n    ViewModuleStateModalComponent,\n} from 'apps/backoffice/src/app/overlays/view-module-state/view-module-state.component';\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-modules',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <section add-module class=\"flex space-x-2 flex-wrap mb-2\">\n                <item-search-field\n                    class=\"flex-grow-1 w-full sm:flex-1 sm:w-auto h-12\"\n                    name=\"module\"\n                    [query_fn]=\"query_fn\"\n                    [exclude]=\"exclude_fn\"\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"new_module = $event.id\"\n                ></item-search-field>\n                <button\n                    mat-button\n                    class=\"flex-1 w-40 sm:w-32 sm:flex-none h-11\"\n                    [disabled]=\"!new_module\"\n                    (click)=\"addModule()\"\n                    i18n=\"@@addExistingAction\"\n                >\n                    Add existing\n                </button>\n                <button\n                    mat-button\n                    class=\"flex-1 w-40 sm:w-32 sm:flex-none h-11\"\n                    (click)=\"newModule()\"\n                    i18n=\"@@newAction\"\n                >\n                    Add new\n                </button>\n            </section>\n            <section\n                exec\n                *ngIf=\"item.id && item.modules && !hide_exec\"\n                class=\"mb-2\"\n            >\n                <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@execHeader\">\n                    Execute command\n                </h3>\n                <execute-method-field [system]=\"item\"></execute-method-field>\n            </section>\n            <section device-list>\n                <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@moduleListHeader\">\n                    Module List\n                </h3>\n                <ng-container\n                    *ngIf=\"!(loading | async).modules; else load_state\"\n                >\n                    <div\n                        role=\"table\"\n                        class=\"overflow-x-auto min-w-[60rem]\"\n                        *ngIf=\"(modules | async)?.length; else empty_state\"\n                    >\n                        <div table-head>\n                            <div class=\"w-10 p-2\"></div>\n                            <div class=\"w-12 p-2\" i18n=\"@@moduleStateLabel\">\n                                State\n                            </div>\n                            <div class=\"flex-1 p-2\" i18n=\"@@moduleNameLabel\">\n                                Name\n                            </div>\n                            <div class=\"w-24 p-2\" i18n=\"@@moduleTypeLabel\">\n                                Type\n                            </div>\n                            <div class=\"w-48 p-2\" i18n=\"@@moduleClassLabel\">\n                                Class\n                            </div>\n                            <div class=\"w-48 p-2\" i18n=\"@@moduleIpLabel\">\n                                IP/URI\n                            </div>\n                            <div\n                                class=\"w-[3.5rem] p-2\"\n                                i18n=\"@@moduleStateLabel\"\n                            >\n                                Debug\n                            </div>\n                            <div class=\"w-24 p-2 h-9\"></div>\n                        </div>\n                        <div\n                            body\n                            cdkDropList\n                            (cdkDropListDropped)=\"drop($event)\"\n                            class=\"overflow-y-auto\"\n                        >\n                            <div\n                                table-row\n                                cdkDrag\n                                *ngFor=\"\n                                    let device of modules | async;\n                                    let i = index\n                                \"\n                                [context-menu]=\"menu\"\n                                (contextAction)=\"\n                                    handleContextEvent($event, device)\n                                \"\n                            >\n                                <div\n                                    class=\"w-full h-10 border-2 border-dashed border-gray-600 bg-gray-300 bg-opacity-25\"\n                                    *cdkDragPlaceholder\n                                ></div>\n                                <div\n                                    class=\"w-10 flex justify-center h-full\"\n                                    style=\"cursor: grab\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-select-arrows\"\n                                        cdkDragHandle\n                                    ></app-icon>\n                                </div>\n                                <div\n                                    class=\"w-12 flex items-center justify-center p-2 h-full\"\n                                >\n                                    <div\n                                        dot\n                                        binding\n                                        [sys]=\"item.id\"\n                                        [mod]=\"(bindings | async)[i]\"\n                                        bind=\"connected\"\n                                        [(model)]=\"device.connected\"\n                                        class=\"h-4 w-4 rounded-full\"\n                                        [class.bg-black]=\"!device.running\"\n                                        [class.bg-error]=\"\n                                            device.running && !device.connected\n                                        \"\n                                        [class.bg-success]=\"\n                                            device.running && !!device.connected\n                                        \"\n                                        (click)=\"power(device)\"\n                                    ></div>\n                                </div>\n                                <div\n                                    class=\"flex-1 p-2 h-full flex flex-col justify-center\"\n                                >\n                                    <a\n                                        [routerLink]=\"['/modules', device.id]\"\n                                        (contextmenu)=\"$event.stopPropagation()\"\n                                        class=\"truncate underline underline-offset-4 w-full\"\n                                        [title]=\"\n                                            device.driver?.name || '<Unnamed>'\n                                        \"\n                                    >\n                                        {{\n                                            device.driver?.name ||\n                                                '&lt;Unnamed&gt;'\n                                        }}\n                                    </a>\n                                    <div\n                                        class=\"text-xs truncate w-full\"\n                                        *ngIf=\"device.notes\"\n                                    >\n                                        {{ device.notes }}\n                                    </div>\n                                </div>\n                                <div class=\"w-24 p-2\" i18n=\"@@driverType\">\n                                    { driver_type(device.driver?.role), select, Device { Device }\n                                    Logic { Logic } SSH { SSH } Websocket {\n                                    Websocket } Service { Service } other {\n                                    Other } }\n                                </div>\n                                <div class=\"w-48 p-2\">\n                                    <span\n                                        class=\"truncate\"\n                                        [title]=\"(bindings | async)[i]\"\n                                        >{{ (bindings | async)[i] }}</span\n                                    >\n                                </div>\n                                <div\n                                    class=\"w-48 text-right flex items-center h-full p-2\"\n                                >\n                                    <app-icon\n                                        *ngIf=\"device.tls\"\n                                        className=\"backoffice-lock\"\n                                    ></app-icon>\n                                    <a\n                                        [href]=\"\n                                            device.ip\n                                                ? (device.tls\n                                                      ? 'https://'\n                                                      : 'http://') + device.ip\n                                                : device.uri\n                                        \"\n                                        target=\"_blank\"\n                                        class=\"truncate underline\"\n                                        >{{ device.ip || device.uri }}</a\n                                    >\n                                </div>\n                                <div\n                                    class=\"w-[3.5rem] flex items-center justify-center p-2 h-full\"\n                                >\n                                    <mat-checkbox\n                                        [disabled]=\"!device.running\"\n                                        [checked]=\"\n                                            (debugging | async)[device.id]\n                                        \"\n                                        [matTooltip]=\"\n                                            ((debugging | async)[device.id]\n                                                ? 'Disable'\n                                                : 'Enable') + ' Debugging'\n                                        \"\n                                        matTooltipPosition=\"left\"\n                                        (change)=\"toggleDebug(device)\"\n                                    >\n                                    </mat-checkbox>\n                                </div>\n                                <div class=\"w-24 flex px-2 justify-center\">\n                                    <button\n                                        mat-icon-button\n                                        (click)=\"editModule(device)\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-edit'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <button\n                                        mat-icon-button\n                                        [matMenuTriggerFor]=\"menu\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-dots-three-vertical'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button\n                                            mat-menu-item\n                                            *ngFor=\"\n                                                let item of device.running\n                                                    ? menu_options\n                                                    : offline_options\n                                            \"\n                                            (click)=\"\n                                                handleContextEvent(item, device)\n                                            \"\n                                        >\n                                            <app-icon\n                                                [icon]=\"item.icon\"\n                                            ></app-icon>\n                                            <div class=\"text\">\n                                                {{ item.name }}\n                                            </div>\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n            </section>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading modules...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No devices for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            button[mat-button] {\n                min-width: 8rem;\n            }\n\n            button.mat-menu-item {\n                display: flex;\n                align-items: center;\n            }\n\n            button .text {\n                margin-left: 1rem;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 48rem;\n            }\n\n            .bg-success {\n                height: 0.5rem !important;\n                width: 0.5rem !important;\n            }\n\n            [dot] {\n                transition: height 200ms, width 200ms;\n            }\n\n            mat-checkbox.mat-checkbox-disabled {\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class SystemModulesComponent extends BaseClass {\n    /** Whether a device should be listened to */\n    public device_listener: HashMap<boolean> = {};\n    /** Store for ID of new module to add to system */\n    public new_module: string;\n    /** Whether to show exec block */\n    public hide_exec: boolean;\n    /** Whether to refresh the list of active modules in the exec options */\n    public refresh_modules: boolean;\n\n    public readonly loading = this._service.loading;\n    public readonly modules = this._service.modules;\n    public readonly debugging = this._service.debug_state;\n    public readonly bindings = this._service.module_bindings;\n    /** Actions available for the context menu */\n    public menu_options: AppLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        {\n            id: 'state',\n            name: 'View State',\n            icon: { type: 'icon', class: 'backoffice-eye' },\n        },\n        {\n            id: 'reload',\n            name: 'Recompile Driver',\n            icon: { type: 'icon', class: 'backoffice-cw' },\n        },\n        {\n            id: 'edit',\n            name: 'Edit Module',\n            icon: { type: 'icon', class: 'backoffice-edit' },\n        },\n        {\n            id: 'remove',\n            name: 'Remove Module',\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n\n    public offline_options: AppLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        {\n            id: 'edit',\n            name: 'Edit Module',\n            icon: { type: 'icon', class: 'backoffice-edit' },\n        },\n        {\n            id: 'remove',\n            name: 'Remove Module',\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n    /** Query method for modules */\n    public readonly query_fn = (_: string) =>\n        queryModules({ q: _ }).pipe(\n            map((_) =>\n                _.data.map((mod) => ({ ...mod, extra: mod.driver?.name }))\n            )\n        );\n    /** Function for excluding modules already within this system */\n    public readonly exclude_fn = (item: PlaceModule) =>\n        item.control_system_id === this.item.id ||\n        item.role === PlaceDriverRole.Logic;\n\n    public readonly newModule = () => this._service.newModule();\n    public readonly removeModule = (d) => this._service.removeModule(d);\n    public readonly editModule = (d) => this._service.editModule(d);\n    public readonly joinModule = (id) => this._service.joinModule(id);\n    public readonly reloadModule = (d) => this._service.reloadModule(d);\n    public readonly toggleDebug = (d) => this._service.toggleModuleDebug(d);\n    public readonly power = (d) => {\n        this._service.toggleModulePower(d);\n        this.refresh_modules = !this.refresh_modules;\n    };\n\n    public driver_type(role: PlaceDriverRole): string {\n        if (role == null) return '';\n        switch (role) {\n            case PlaceDriverRole.Device:\n                return 'Device';\n            case PlaceDriverRole.SSH:\n                return 'SSH';\n            case PlaceDriverRole.Service:\n                return 'Service';\n            case PlaceDriverRole.Websocket:\n                return 'Websocket';\n        }\n        return 'Logic';\n    }\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(\n        private _service: SystemStateService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    /**\n     * Handle context menu event\n     * @param event Event posted by the context menu\n     * @param device Module associated with the context menu event\n     */\n    public handleContextEvent(event: AppLink, device: PlaceModule) {\n        if (event) {\n            switch (event.id) {\n                case 'power':\n                    this.power(device);\n                    break;\n                case 'state':\n                    this.viewState(device);\n                    break;\n                case 'reload':\n                    this.reloadModule(device);\n                    break;\n                case 'remove':\n                    this.removeModule(device);\n                    break;\n                case 'load':\n                    this.loadModule(device);\n                    break;\n                case 'edit':\n                    this.editModule(device);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Update the state of the module\n     * @param device Module to reload\n     */\n    public async reload(device: PlaceModule) {\n        const item = await showModule(device.id).toPromise();\n        for (const k in item) {\n            if (item.hasOwnProperty(k)) {\n                device[k] = item[k];\n            }\n        }\n    }\n\n    public async viewState(device: PlaceModule) {\n        const modules = this._service.getModules();\n        this._dialog.open<ViewModuleStateModalComponent, ModuleStateModalData>(\n            ViewModuleStateModalComponent,\n            { data: { system: this.item, module: device, devices: modules } }\n        );\n    }\n\n    public loadModule(device: PlaceModule) {\n        loadModule(device.id)\n            .toPromise()\n            .then(\n                () =>\n                    notifySuccess(\n                        `Successfully loaded module \"${\n                            device.name || device.id\n                        }\"`\n                    ),\n                (err) =>\n                    notifyError(\n                        `Error loading module. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n\n    /**\n     * Handle drop event for reordering the devices\n     * @param event Drag drop details\n     */\n    public drop(event: CdkDragDrop<any[]>) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderModules(\n                event.previousIndex,\n                event.currentIndex\n            );\n        }\n    }\n\n    public addModule() {\n        if (!this.new_module) return;\n        this.joinModule(this.new_module);\n        this.new_module = '';\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceTrigger } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { copyToClipboard, unique } from '../common/general';\nimport { notifyInfo } from '../common/notifications';\n\nimport { HashMap } from '../common/types';\nimport { SystemStateService } from './system-state.service';\n\nexport interface TriggerInstanceState {\n    triggered: boolean;\n    trigger_count: number;\n    action_errors: number;\n    comparison_errors: number;\n    conditions: HashMap<boolean>;\n}\n\n@Component({\n    selector: 'system-triggers',\n    template: `\n        <section class=\"flex items-center mb-4 space-x-2\">\n            <button\n                mat-button\n                style=\"min-width: 8rem\"\n                (click)=\"selectTrigger()\"\n            >\n                Add Trigger\n            </button>\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter triggers...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <ng-container *ngIf=\"!(loading | async).triggers; else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(triggers | async)?.length; else empty_state\"\n                >\n                    <div table-head>\n                        <div class=\"w-12 p-2\"></div>\n                        <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">\n                            Name\n                        </div>\n                        <div class=\"w-16 p-2\" i18n=\"@@triggerCountLabel\">\n                            Count\n                        </div>\n                        <div class=\"w-16 p-2\" i18n=\"@@triggerErrorsLabel\">\n                            Errors\n                        </div>\n                        <div class=\"w-28 p-2\" i18n=\"@@descriptionLabel\">\n                            Added\n                        </div>\n                        <div class=\"w-32 p-2\"></div>\n                    </div>\n                    <div table-body class=\"overflow-y-auto\">\n                        <div\n                            table-row\n                            *ngFor=\"\n                                let trigger of triggers | async;\n                                let i = index\n                            \"\n                        >\n                            <i\n                                hidden\n                                binding\n                                [sys]=\"item.id\"\n                                mod=\"_TRIGGER__1\"\n                                [bind]=\"trigger.id\"\n                                [(model)]=\"trigger_state[trigger.id]\"\n                                (modelChange)=\"updateComparisons(trigger.id)\"\n                            ></i>\n                            <div\n                                class=\"w-12 flex items-center justify-center h-full p-2\"\n                            >\n                                <div\n                                    class=\"h-2 w-2 rounded-full\"\n                                    [class.bg-black]=\"\n                                        !trigger_state[trigger.id]?.triggered\n                                    \"\n                                    [class.bg-success]=\"\n                                        trigger_state[trigger.id]?.triggered\n                                    \"\n                                ></div>\n                            </div>\n                            <div flex class=\"flex-1 p-2\">\n                                <a\n                                    class=\"truncate\"\n                                    [routerLink]=\"['/triggers', trigger.id]\"\n                                    >{{ trigger.name }}</a\n                                >\n                            </div>\n                            <div desc class=\"w-16 p-2\">\n                                {{ trigger_state[trigger.id]?.trigger_count }}\n                            </div>\n                            <div desc class=\"w-16 p-2\">\n                                {{\n                                    trigger_state[trigger.id]?.action_errors +\n                                        trigger_state[trigger.id]\n                                            ?.comparison_errors || '0'\n                                }}\n                            </div>\n                            <div desc class=\"w-28 p-2\">\n                                {{ +trigger.created_at * 1000 | dateFrom }}\n                            </div>\n                            <div class=\"w-32 p-2 items-center justify-center\">\n                                <button\n                                    mat-icon-button\n                                    (click)=\"copyWebhookURL(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-link\"\n                                    ></app-icon>\n                                </button>\n                                <button\n                                    mat-icon-button\n                                    (click)=\"editTrigger(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-edit\"\n                                    ></app-icon>\n                                </button>\n                                <button\n                                    mat-icon-button\n                                    (click)=\"deleteTrigger(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-trash\"\n                                    ></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading triggers...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No triggers for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [flex] {\n                min-width: 8rem;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 36rem;\n            }\n        `,\n    ],\n})\nexport class SystemTriggersComponent {\n    public readonly filter$ = new BehaviorSubject<string>('');\n\n    public readonly loading = this._service.loading;\n\n    public readonly trigger_state: HashMap<TriggerInstanceState> = {};\n\n    public readonly comparisons: HashMap<string> = {};\n\n    public readonly temp_trigger = new BehaviorSubject<PlaceTrigger>(null);\n\n    public readonly triggers = combineLatest([\n        this.filter$,\n        this._service.triggers,\n        this.temp_trigger,\n    ]).pipe(\n        map(([filter, triggers, temp]) => {\n            const search = filter.toLowerCase();\n            const list = unique(temp ? [...triggers, temp] : triggers, 'id');\n            return filter\n                ? list.filter((t) => t.name.toLowerCase().includes(search))\n                : list;\n        })\n    );\n\n    public readonly copyWebhookURL = (t) => {\n        copyToClipboard(\n            `${location.origin}/api/engine/v2/webhook/${t.id}/notify?secret=${t.webhook_secret}`\n        );\n        notifyInfo('Webhook link copied to clipboard');\n    };\n    public readonly editTrigger = async (t) =>\n        this.temp_trigger.next((await this._service.editTrigger(t)) as any);\n    public readonly deleteTrigger = (t) => this._service.removeTrigger(t);\n    public readonly selectTrigger = async () =>\n        this.temp_trigger.next((await this._service.selectTrigger()) || null);\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    constructor(private _service: SystemStateService) {}\n\n    public updateComparisons(id: string): void {\n        this.comparisons[id] = '';\n        if (this.trigger_state[id]) {\n            for (const key in this.trigger_state[id].conditions) {\n                if (this.trigger_state[id].conditions.hasOwnProperty(key)) {\n                    if (this.comparisons[id]) {\n                        this.comparisons[id] += '\\n';\n                    }\n                    this.comparisons[\n                        id\n                    ] += `${key}: ${this.trigger_state[id].conditions[key]}`;\n                }\n            }\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem, PlaceZone, queryZones } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-zones',\n    template: `\n        <section class=\"flex items-center space-x-2 mb-4\">\n            <item-search-field\n                name=\"zone\"\n                class=\"flex-1 h-12\"\n                [query_fn]=\"query_fn\"\n                [exclude]=\"exclude_fn\"\n                [clear_on_select]=\"true\"\n                [ngModel]=\"null\"\n                (ngModelChange)=\"addPendingZone($event)\"\n            ></item-search-field>\n            <button\n                mat-button\n                [disabled]=\"!this.pending_zones.getValue().length\"\n                (click)=\"savePendingZones()\"\n            >\n                Save Pending\n            </button>\n        </section>\n        <section>\n            <ng-container *ngIf=\"!(loading | async).zones; else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(zones | async)?.length\"\n                >\n                    <div table-head>\n                        <div class=\"w-12 p-2\"></div>\n                        <div class=\"w-48 p-2\" i18n=\"@@nameLabel\">Name</div>\n                        <div desc class=\"flex-1 p-2\" i18n=\"@@descriptionLabel\">\n                            Description\n                        </div>\n                        <div class=\"w-16 p-2\"></div>\n                    </div>\n                    <div\n                        body\n                        cdkDropList\n                        (cdkDropListDropped)=\"drop($event)\"\n                        class=\"overflow-y-auto\"\n                    >\n                        <div\n                            table-row\n                            cdkDrag\n                            *ngFor=\"let zone of zones | async; let i = index\"\n                        >\n                            <div\n                                class=\"w-full h-10 border-2 border-dashed border-gray-600 bg-gray-300 bg-opacity-25\"\n                                *cdkDragPlaceholder\n                            ></div>\n                            <div\n                                class=\"w-12 flex justify-center h-full p-2\"\n                                style=\"cursor: grab\"\n                                [class.pointer-events-none]=\"zone.pending\"\n                                [class.text-pending]=\"zone.pending\"\n                            >\n                                <app-icon\n                                    [className]=\"\n                                        zone.pending\n                                            ? 'backoffice-warning'\n                                            : 'backoffice-select-arrows'\n                                    \"\n                                    cdkDragHandle\n                                ></app-icon>\n                            </div>\n                            <div class=\"w-48 p-2\">\n                                <a [routerLink]=\"['/zones', zone.id]\">\n                                    {{ zone.name }}\n                                </a>\n                            </div>\n                            <div desc class=\"flex-1 truncate\">\n                                {{ zone.description }}\n                            </div>\n                            <div class=\"w-16 p-2 items-center justify-center\">\n                                <button\n                                    mat-icon-button\n                                    *ngIf=\"(zones | async).length > 1\"\n                                    (click)=\"removeZone(zone)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-trash\"\n                                    ></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading zones...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            [desc] {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SystemZonesComponent {\n    /** ID of a zone that the user wishes to add to the system */\n    public readonly pending_zones = new BehaviorSubject([]);\n    /** Whether zones for active item are loading */\n    public readonly loading = this._service.loading;\n    /** List of zones assoicated with the active item */\n    public readonly zones = combineLatest([\n        this._service.zones,\n        this.pending_zones,\n    ]).pipe(\n        map(([z, p]) => [...z, ...p.map((_) => ({ ..._, pending: true }))])\n    );\n\n    /** Query function for systems */\n    public readonly query_fn = (_) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n\n    public readonly exclude_fn = (zone: PlaceZone) =>\n        this.item.zones.indexOf(zone.id) >= 0;\n\n    public readonly removeZone = (z) =>\n        z.pending\n            ? this.pending_zones.next(\n                  this.pending_zones.getValue().filter((_) => _.id !== z.id)\n              )\n            : this._service.removeZone(z);\n\n    public readonly addPendingZone = (z) =>\n        this.pending_zones.next([...this.pending_zones.getValue(), z]);\n\n    public readonly savePendingZones = async () => {\n        if (!this.pending_zones.getValue().length) return;\n        await this._service.addZones(this.pending_zones.getValue());\n        this.pending_zones.next([]);\n    };\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: SystemStateService) {}\n\n    public drop(event) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderZones(event.previousIndex, event.currentIndex);\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\n\n@Component({\n    selector: 'system-metadata',\n    template: `\n        <metadata-display *ngIf=\"item\" [item]=\"item\"></metadata-display>\n    `,\n    styles: [``],\n})\nexport class SystemMetadataComponent {\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ActiveItemService) {}\n}\n","import { Component } from '@angular/core';\nimport { extensionsForItem } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'new-systems-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <item-sidebar class=\"hidden sm:block\"></item-sidebar>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                <item-selection class=\"z-20 sm:hidden\">\n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </item-selection>\n                <div class=\"flex flex-col flex-1 h-1/2\">\n                    <ng-container *ngIf=\"item?.id\">\n                        <item-details\n                            [can_edit]=\"true\"\n                            [item]=\"item\"\n                        ></item-details>\n                        <item-tablist\n                            [base]=\"name\"\n                            [tabs]=\"tab_list\"\n                            [scrolled]=\"scroll > 0\"\n                            class=\"z-10\"\n                        ></item-tablist>\n                        <div\n                            #el\n                            class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                            (scroll)=\"scroll = el.scrollTop\"\n                        >\n                            <router-outlet></router-outlet>\n                        </div>\n                    </ng-container>\n                </div>\n                <button\n                    class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                    matTooltip=\"New system\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"newItem()\"\n                >\n                    <app-icon\n                        [className]=\"'backoffice-plus'\"\n                        class=\"text-3xl\"\n                    ></app-icon>\n                </button>\n                <button\n                    class=\"absolute bottom-16 left-2 sm:-left-8 w-10 h-10 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                    matTooltip=\"Bulk add systems\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"bulkAdd()\"\n                >\n                    <app-icon class=\"text-2xl\">playlist_add</app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class SystemsComponent extends BaseClass {\n    public readonly name = 'systems';\n    public open_menu = false;\n    public scroll = 0;\n\n    public tab_list = [];\n\n    public readonly newItem = () => this._item.create();\n    public readonly bulkAdd = () => this._item.bulkAdd();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(counts: Record<string, number>) {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'modules',\n                name: 'Modules',\n                count: counts.devices,\n                icon: { class: 'backoffice-tablet' },\n            },\n            {\n                id: 'zones',\n                name: 'Zones',\n                count: counts.zones,\n                icon: { class: 'backoffice-layers' },\n            },\n            {\n                id: 'triggers',\n                name: 'Triggers',\n                count: counts.triggers,\n                icon: { class: 'backoffice-stopwatch' },\n            },\n            {\n                id: 'metadata',\n                name: 'Metadata',\n                count: counts.metadata,\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'history',\n                name: 'Settings History',\n                icon: { class: 'backoffice-clock' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(\n        protected _service: SystemStateService,\n        private _item: ActiveItemService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.updateTabList({});\n        this.subscription(\n            'counts',\n            this._service.counts.subscribe((counts) =>\n                this.updateTabList(counts)\n            )\n        );\n    }\n}\n","import { Routes } from '@angular/router';\nimport { SystemAboutComponent } from './system-about.component';\nimport { SystemModulesComponent } from './system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers.component';\nimport { SystemZonesComponent } from './system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\nimport { SystemsComponent } from './systems.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: SystemsComponent,\n        children: [\n            { path: 'about', component: SystemAboutComponent },\n            { path: 'modules', component: SystemModulesComponent },\n            { path: 'triggers', component: SystemTriggersComponent },\n            { path: 'zones', component: SystemZonesComponent },\n            { path: 'metadata', component: SystemMetadataComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './systems.routes';\n\nimport { SystemAboutComponent } from './system-about.component';\nimport { SystemModulesComponent } from './system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers.component';\nimport { SystemZonesComponent } from './system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { SystemsComponent } from './systems.component';\n\n@NgModule({\n    declarations: [\n        SystemAboutComponent,\n        SystemModulesComponent,\n        SystemTriggersComponent,\n        SystemZonesComponent,\n        SystemMetadataComponent,\n        SystemsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule,\n    ],\n})\nexport class AppSystemsModule {}\n"]}