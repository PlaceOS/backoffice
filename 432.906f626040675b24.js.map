{"version":3,"file":"432.906f626040675b24.js","mappings":"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","names":["ModuleStateService","constructor","_state","_dialog","this","BehaviorSubject","_loading","asObservable","item","pipe","filter","_","PlaceModule","all_item","debounceTime","switchMap","moduleSettings","id","showDriver","driver_id","shareReplay","system_id","showSystem","of","next","console","log","querySystems","module_id","map","details","data","catchError","tap","active_item","toggleModuleState","error","running","stopModule","startModule","toPromise","catch","err","length","notifyError","viewDetails","notifySuccess","content","open","ViewResponseModalComponent","i0","factory","ModuleAboutComponent","_service","driver","system","associated_settings","stopping","selectors","$localize","i18n_21","ctx","ModuleSystemsComponent","loading","combineLatest","filter$","system_list","systems","search","toLowerCase","sys","name","includes","ROUTES","path","component","ModulesComponent","BaseClass","super","create","extensions","extensionsForItem","updateTabList","tab_list","icon","class","count","system_count","concat","ngOnInit","subscription","subscribe","loadValues","query","offset","limit","n","total","children","ExtensionOutletComponent","SettingsHistoryViewComponent","redirectTo","AppModulesModule","CommonModule","FormsModule","RouterModule","SharedContentModule"],"sourceRoot":"webpack:///","sources":["./apps/backoffice/src/app/modules/module-state.service.ts","./apps/backoffice/src/app/modules/module-about.component.ts","./apps/backoffice/src/app/modules/module-systems.component.ts","./apps/backoffice/src/app/modules/modules.component.ts","./apps/backoffice/src/app/modules/modules.routes.ts","./apps/backoffice/src/app/modules/modules.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    moduleSettings,\n    PlaceModule,\n    querySystems,\n    showDriver,\n    showSystem,\n    startModule,\n    stopModule,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ModuleStateService {\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n    /** Active module */\n    public readonly item: Observable<PlaceModule> = this._state.item.pipe(\n        filter((_) => _ instanceof PlaceModule)\n    ) as any;\n    /** Observable for associated settings of the active item */\n    public readonly associated_settings = this._state.all_item.pipe(\n        debounceTime(300),\n        switchMap((item: PlaceModule) => {\n            if (!item || !(item instanceof PlaceModule)) return [];\n            return moduleSettings(item.id);\n        })\n    );\n    /** Driver associated with the active module */\n    public readonly driver = this.item.pipe(\n        switchMap((item) => showDriver(item.driver_id)),\n        shareReplay(1)\n    );\n    /** System assoicated with the active module */\n    public readonly system = this.item.pipe(\n        switchMap((item) =>\n            item.system_id ? showSystem(item.system_id) : of(null)\n        ),\n        shareReplay(1)\n    );\n    /** System assoicated with the active module */\n    public readonly system_list = this.item.pipe(\n        switchMap((item) => {\n            this._loading.next(true);\n            console.log('Loading Systems...');\n            return querySystems({ module_id: item.id });\n        }),\n        map((details) => details.data),\n        catchError(() => []),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public get active_item(): PlaceModule {\n        return this._state.active_item as any;\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async toggleModuleState() {\n        const method = this.active_item.running ? stopModule : startModule;\n        const error = await method(this.active_item.id)\n            .pipe(map((_) => null))\n            .toPromise()\n            .catch((err) => err);\n        if (error) {\n            console.log('Error:', error);\n            if (typeof error === 'string' && error.length < 64) {\n                notifyError(error);\n            } else {\n                notifyError(\n                    `Failed to ${\n                        this.active_item.running ? 'stop' : 'start'\n                    } device '${this.active_item.id}'.\\nView Error?`,\n                    'View',\n                    () => this.viewDetails(error)\n                );\n            }\n            return;\n        }\n        notifySuccess(\n            `Module successfully ${\n                this.active_item.running ? 'stopped' : 'started'\n            }`\n        );\n        (this.active_item as any).running = !this.active_item.running;\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(\n            ViewResponseModalComponent,\n            {\n                data: { content },\n            }\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceModule } from '@placeos/ts-client';\n\nimport { ModuleStateService } from './module-state.service';\n\n@Component({\n    selector: 'module-about',\n    template: `\n        <section class=\"space-y-2 flex\">\n            <div class=\"shadow rounded p-2 border border-black/10 space-y-2 min-w-[50%]\">\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item.notes\">\n                    <label i18n=\"@moduleNotesLabel\">Notes:</label>\n                    <div class=\"value\">{{ item.notes }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item.ip\">\n                    <label i18n=\"@moduleIPLabel\">IP:</label>\n                    <div class=\"value\">{{ item.ip }}</div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"item.port > 1\">\n                    <label i18n=\"@modulePortLabel\">Port:</label>\n                    <div class=\"value\">{{ item.port }}</div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.tls || item.udp\"\n                >\n                    <label i18n=\"@moduleTLSLabel\">Protocol:</label>\n                    <code *ngIf=\"item.tls\" class=\"bg-success text-white\">TLS</code>\n                    <code *ngIf=\"item.udp\" class=\"bg-success text-white\">UDP</code>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.created_at\"\n                >\n                    <label i18n=\"@@moduleCreatedAtLabel\">Created:</label>\n                    <div class=\"value\">\n                        {{ item.created_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"item.updated_at\"\n                >\n                    <label i18n=\"@moduleUpdatedAtLabel\">Updated:</label>\n                    <div class=\"value\">\n                        {{ item.updated_at * 1000 | dateFrom }}\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"driver | async\">\n                    <label i18n=\"@moduleUpdatedAtLabel\">Driver:</label>\n                    <a\n                        class=\"underline\"\n                        [routerLink]=\"['/drivers', item.driver_id]\"\n                    >\n                        {{ (driver | async).name || '&lt;Unnamed&gt;' }}\n                    </a>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"system | async\">\n                    <label i18n=\"@moduleUpdatedAtLabel\">System:</label>\n                    <a\n                        class=\"underline\"\n                        [routerLink]=\"[\n                            '/systems',\n                            (system | async).id,\n                            'modules'\n                        ]\"\n                    >\n                        {{ (system | async).name }}\n                    </a>\n                </div>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <section>\n            <button\n                mat-button\n                class=\"w-32\"\n                [disabled]=\"stopping\"\n                (click)=\"toggleModuleState()\"\n            >\n                <div class=\"text\" *ngIf=\"!stopping\" i18n=\"@@moduleStateToggle\">\n                    { item.running, select, true { Stop Module } false { Start\n                    Module } }\n                </div>\n                <mat-spinner diameter=\"32\" *ngIf=\"stopping\"></mat-spinner>\n            </button>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">\n            Settings\n        </header>\n        <section\n            *ngIf=\"item.settings && (other_settings | async); else load_state\"\n        >\n            <a-settings-form\n                [id]=\"item.id\"\n                [merge]=\"true\"\n                [settings]=\"item.settings\"\n                [merge_settings]=\"(other_settings | async) || []\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"p-8 flex flex-col items-center justify-center m-auto\">\n                <mat-spinner class=\"mb-4\" diameter=\"48\"></mat-spinner>\n                <p i18n=\"@@moduleDetailsLoading\">Loading module settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            label {\n                width: 4rem;\n            }\n        `,\n    ],\n})\nexport class ModuleAboutComponent {\n    /** Driver for the active item */\n    public readonly driver = this._service.driver;\n    /** Control System for the active item */\n    public readonly system = this._service.system;\n    /** List of settings for associated modules, drivers and zones */\n    public readonly other_settings = this._service.associated_settings;\n    /** Whether module is being stopped */\n    public stopping: boolean;\n\n    public get item(): PlaceModule {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: ModuleStateService) {}\n\n    public async toggleModuleState() {\n        this.stopping = true;\n        await this._service.toggleModuleState();\n        this.stopping = false;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { PlaceModule, PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { Subject, Observable, of, BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    switchMap,\n    catchError,\n    map,\n} from 'rxjs/operators';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\nimport { ModuleStateService } from './module-state.service';\n\n@Component({\n    selector: 'module-systems',\n    template: `\n        <section class=\"flex items-center mb-4\">\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter systems...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section *ngIf=\"!(loading | async); else load_state\">\n            <div\n                role=\"table\"\n                class=\"overflow-x-auto\"\n                *ngIf=\"(system_list | async)?.length; else empty_state\"\n            >\n                <div table-head>\n                    <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">Name</div>\n                    <div class=\"w-48 p-2\" i18n=\"@@systemLabel\">No. Modules</div>\n                    <div class=\"w-36 p-2\" i18n=\"@@createdLabel\">Created</div>\n                </div>\n                <div table-body class=\"overflow-y-auto\">\n                    <div\n                        table-row\n                        *ngFor=\"\n                            let system of system_list | async;\n                            let i = index\n                        \"\n                    >\n                        <div flex class=\"flex-1 p-2 underline\">\n                            <a [routerLink]=\"['/systems', system.id]\">{{\n                                system.name\n                            }}</a>\n                        </div>\n                        <div class=\"w-48 p-2\">\n                            {{ system.installed_ui_devices || '0' }}\n                        </div>\n                        <div class=\"w-36 p-2\">\n                            {{ system.created_at * 1000 | dateFrom }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading systems...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No systems with module</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class ModuleSystemsComponent {\n    /** Subject holding the value of the search */\n    public readonly filter$ = new BehaviorSubject<string>('');\n    /** Whether systems are being loaded */\n    public readonly loading = this._service.loading;\n\n    public readonly system_list = combineLatest([\n        this.filter$,\n        this._service.system_list,\n    ]).pipe(\n        map((details) => {\n            const [filter, systems] = details;\n            const search = filter.toLowerCase();\n            return filter\n                ? systems.filter((sys) =>\n                      sys.name.toLowerCase().includes(search)\n                  )\n                : systems;\n        })\n    );\n\n    constructor(private _service: ModuleStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PlaceModule, querySystems } from '@placeos/ts-client';\nimport { extensionsForItem } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { ActiveItemService } from '../common/item.service';\n\n@Component({\n    selector: 'new-modules-view',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center divide-y sm:divide-y-0 sm:divide-x divide-gray-300 dark:divide-neutral-600 bg-white dark:bg-neutral-700\"\n        >\n            <sidebar-menu [(open)]=\"open_menu\" class=\"sm:h-full\"></sidebar-menu>\n            <item-sidebar class=\"hidden sm:block\" [route]=\"name\" title=\"Modules\"></item-sidebar>\n            <div class=\"flex-1 w-1/2 h-full relative flex flex-col z-0\">\n                <item-selection class=\"z-20 sm:hidden\" [route]=\"name\" title=\"Modules\">\n                    <button\n                        mat-icon-button\n                        class=\"sm:hidden mr-2\"\n                        (click)=\"open_menu = true\"\n                    >\n                        <app-icon className=\"backoffice-menu\"></app-icon>\n                    </button>\n                </item-selection>\n                <div class=\"flex flex-col flex-1 h-1/2\">\n                    <ng-container *ngIf=\"item?.id\">\n                        <item-details\n                            [can_edit]=\"true\"\n                            [item]=\"item\"\n                            type=\"Module\"\n                        ></item-details>\n                        <item-tablist\n                            [base]=\"name\"\n                            [tabs]=\"tab_list\"\n                            [scrolled]=\"scroll > 0\"\n                            class=\"z-10\"\n                        ></item-tablist>\n                        <div\n                            #el\n                            class=\"flex-1 h-1/2 w-full overflow-auto p-4 z-0 relative\"\n                            (scroll)=\"scroll = el.scrollTop\"\n                        >\n                            <router-outlet></router-outlet>\n                        </div>\n                    </ng-container>\n                </div>\n                <button\n                    class=\"absolute bottom-2 left-2 sm:-left-9 w-12 h-12 flex items-center justify-center bg-primary dark:bg-pink rounded-lg shadow z-30 text-white\"\n                    matTooltip=\"New system\"\n                    matTooltipPosition=\"right\"\n                    matRipple\n                    (click)=\"newItem()\"\n                >\n                    <app-icon\n                        [className]=\"'backoffice-plus'\"\n                        class=\"text-3xl\"\n                    ></app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ModulesComponent extends BaseClass {\n    /** Number of systems for the active device */\n    public system_count: number;\n    public open_menu = false;\n    public readonly name = 'modules';\n\n    public tab_list = [];\n\n    public readonly newItem = () => this._service.create();\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList() {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'systems',\n                name: 'Systems',\n                count: this.system_count,\n                icon: { class: 'backoffice-documents' },\n            },\n            {\n                id: 'history',\n                name: 'Settings History',\n                icon: { class: 'backoffice-clock' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(private _service: ActiveItemService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadValues(item as any);\n                this.updateTabList();\n            })\n        );\n        this.updateTabList();\n    }\n\n    protected async loadValues(item: PlaceModule) {\n        if (!item) return;\n        const query: any = { offset: 0, limit: 1, module_id: item.id };\n        // Get system count\n        this.system_count = (await querySystems(query).toPromise()).total;\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { ModuleAboutComponent } from './module-about.component';\nimport { ModuleSystemsComponent } from './module-systems.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\nimport { ModulesComponent } from './modules.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: ModulesComponent,\n        children: [\n            { path: 'about', component: ModuleAboutComponent },\n            { path: 'systems', component: ModuleSystemsComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' },\n        ],\n    },\n    { path: '**', redirectTo: '-' },\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './modules.routes';\n\nimport { ModuleAboutComponent } from './module-about.component';\nimport { ModuleSystemsComponent } from './module-systems.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\nimport { ModulesComponent } from './modules.component';\n\n@NgModule({\n    declarations: [\n        ModuleAboutComponent,\n        ModuleSystemsComponent,\n        ModulesComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class AppModulesModule {}\n"],"x_google_ignoreList":[]}