{"version":3,"sources":["./apps/backoffice/src/app/systems/system-state.service.ts","./apps/backoffice/src/app/systems/systems.component.ts","./apps/backoffice/src/app/systems/system-about.component.ts","./apps/backoffice/src/app/systems/system-modules.component.ts","./apps/backoffice/src/app/systems/system-triggers.component.ts","./apps/backoffice/src/app/systems/system-zones.component.ts","./apps/backoffice/src/app/systems/system-metadata.component.ts","./apps/backoffice/src/app/systems/systems.routes.ts","./apps/backoffice/src/app/systems/systems.module.ts"],"names":["SystemStateService","_state","_debug","_dialog","super","item","this","_loading","BehaviorSubject","_modules","_change","associated_settings","all_item","pipe","debounceTime","switchMap","id","counts","combineLatest","_","next","getValue","settings","details","Promise","all","map","d","total","toPromise","triggers","metadata","devices","modules","length","zones","control_system_id","complete","limit","i","data","sort","a","b","indexOf","shareReplay","debug_state","reduce","mapping","device","isListening","module_bindings","mod","custom_name","name","loading","asObservable","getModules","active_item","confirm","title","content","icon","type","class","reason","catch","err","JSON","stringify","response","message","close","unbind","bind","module","edit","system","joinModule","Date","now","ref","open","service_name","query_fn","q","resp","race","componentInstance","event","first","afterClosed","t","addTrigger","trigger","enabled","important","trigger_id","timeout","height","width","maxHeight","maxWidth","save","external_save","url","trig","statusText","fst","snd","list","replaceItem","driver_id","driver","zone_list","zone","filter","z","method","running","viewDetails","SystemsComponent","_service","tab_list","count","concat","extensions","updateTabList","subscription","subscribe","SystemAboutComponent","other_settings","start","startSystem","stop","stopSystem","$event","stopPropagation","SystemModulesComponent","device_listener","debugging","bindings","menu_options","offline_options","extra","exclude_fn","role","newModule","removeModule","editModule","reloadModule","toggleDebug","toggleModuleDebug","power","toggleModulePower","refresh_modules","viewState","loadModule","k","hasOwnProperty","then","previousIndex","currentIndex","reorderModules","new_module","SystemTriggersComponent","filter$","trigger_state","comparisons","temp_trigger","temp","search","toLowerCase","includes","copyWebhookURL","location","origin","webhook_secret","editTrigger","deleteTrigger","removeTrigger","selectTrigger","key","conditions","SystemZonesComponent","pending_zones","p","pending","removeZone","addPendingZone","savePendingZones","addZones","reorderZones","SystemMetadataComponent","_schemas","form_map","edited","schema_map","name_list","control","value","loadMetadata","push","Math","floor","random","description","new","generateForms","field","form","prop","markAllAsTouched","valid","controls","parse","index","findIndex","splice","forEach","group","validateName","editors","undefined","schema","valueChanges","getSchema","e","Object","keys","ROUTES","path","component","children","redirectTo","AppSystemsModule"],"mappings":"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","file":"389.71513f7e9afabec800db.js","sourcesContent":["import { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    addSystemModule,\n    addSystemTrigger,\n    apiEndpoint,\n    listSystemTriggers,\n    listSystemZones,\n    PlaceModule,\n    PlaceSystem,\n    PlaceTrigger,\n    PlaceZone,\n    put,\n    queryModules,\n    queryTriggers,\n    recompileDriver,\n    removeSystemModule,\n    removeSystemTrigger,\n    showMetadata,\n    startModule,\n    startSystem,\n    stopModule,\n    stopSystem,\n    systemSettings,\n    updateSystem,\n    updateTrigger,\n    listMetadata\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { calculateModuleIndex } from '../common/api';\nimport { BaseClass } from '../common/base.class';\nimport { PlaceDebugService } from '../common/debug.service';\nimport { openConfirmModal, unique } from '../common/general';\n\nimport { ActiveItemService } from '../common/item.service';\nimport { notifyError, notifySuccess } from '../common/notifications';\nimport { HashMap } from '../common/types';\nimport { ConfirmModalData } from '../overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from '../overlays/item-modal/item-modal.component';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData,\n} from '../overlays/select-item-modal/select-item-modal.component';\nimport { ViewResponseModalComponent } from '../overlays/view-response-modal/view-response-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SystemStateService extends BaseClass {\n    /** Observable of the active item */\n    public readonly item = this._state.item;\n\n    private _loading = new BehaviorSubject<HashMap<boolean>>({});\n    private _modules = new BehaviorSubject<PlaceModule[]>([]);\n    private _change = new BehaviorSubject<number>(0);\n    /** Observable for associated settings of the active item */\n    public readonly associated_settings = this._state.all_item.pipe(\n        debounceTime(300),\n        switchMap((item: PlaceSystem) => {\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            return systemSettings(item.id);\n        })\n    );\n    /** Observable of the counts of the active item */\n    public readonly counts = combineLatest([\n        this._state.all_item,\n        this._change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(async (_) => {\n            const [item] = _;\n            if (!item || !(item instanceof PlaceSystem)) return {};\n            this._loading.next({\n                ...this._loading.getValue(),\n                settings: true,\n            });\n            const details = await Promise.all([\n                listSystemTriggers(item.id)\n                    .pipe(map((d) => d.total))\n                    .toPromise(),\n                listMetadata(item.id).toPromise(),\n            ]);\n            const [triggers, metadata] = details;\n            this._loading.next({\n                ...this._loading.getValue(),\n                settings: false,\n            });\n            return {\n                devices: (item as any).modules.length,\n                zones: (item as any).zones.length,\n                triggers,\n                metadata: metadata.length,\n            };\n        })\n    );\n    /** Observable for modules associated with system */\n    public readonly modules = combineLatest([this.item, this._change]).pipe(\n        switchMap(async (_) => {\n            const item = _[0];\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                modules: true,\n            });\n            const modules = await queryModules({\n                control_system_id: item.id,\n                complete: true,\n                limit: 200,\n            } as any)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            this._loading.next({\n                ...this._loading.getValue(),\n                modules: false,\n            });\n            modules.sort(\n                (a, b) =>\n                    item.modules.indexOf(a.id) - item.modules.indexOf(b.id)\n            );\n            this._modules.next(modules);\n            return modules;\n        }),\n        shareReplay()\n    );\n    /** Observable for debug state of the active modules */\n    public readonly debug_state = this.modules.pipe(\n        map((modules) => {\n            return modules.reduce((mapping, device) => {\n                mapping[device.id] = this._debug.isListening(device);\n                return mapping;\n            }, {});\n        })\n    );\n    /** Observable for module bindings */\n    public readonly module_bindings = this.modules.pipe(\n        map((modules) =>\n            modules.map(\n                (mod) =>\n                    `${\n                        mod.custom_name || mod.name || 'Blank'\n                    }_${calculateModuleIndex(modules, mod)}`\n            )\n        ),\n        shareReplay()\n    );\n    /** Observable for zones associated with system */\n    public readonly zones = this._state.item.pipe(\n        switchMap(async (item: PlaceSystem) => {\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                zones: true,\n            });\n            const zones = await listSystemZones(item.id)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            zones.sort(\n                (a, b) => item.zones.indexOf(a.id) - item.zones.indexOf(b.id)\n            );\n            this._loading.next({\n                ...this._loading.getValue(),\n                zones: false,\n            });\n            return zones;\n        }),\n        shareReplay()\n    );\n    /** Observable for triggers associated with system */\n    public readonly triggers = combineLatest([this.item, this._change]).pipe(\n        switchMap(async (_) => {\n            const [item] = _;\n            if (!item || !(item instanceof PlaceSystem)) return [];\n            this._loading.next({\n                ...this._loading.getValue(),\n                triggers: true,\n            });\n            const triggers = await listSystemTriggers(item.id)\n                .pipe(map((i) => i.data))\n                .toPromise();\n            this._loading.next({\n                ...this._loading.getValue(),\n                triggers: false,\n            });\n            return triggers;\n        }),\n        shareReplay()\n    );\n    /** Observable of the active item */\n    public readonly loading = this._loading.asObservable();\n\n    public readonly getModules = () => this._modules.getValue();\n    /** Observable of the active item */\n    public get active_item(): PlaceSystem {\n        return this._state.active_item || ({} as any);\n    }\n\n    constructor(\n        private _state: ActiveItemService,\n        private _debug: PlaceDebugService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public async startSystem() {\n        const details = await this.confirm({\n            title: 'Start system?',\n            content: `Are you sure you want to start this system?<br>All stopped modules within the system will boot up.`,\n            icon: { type: 'icon', class: 'backoffice-controller-play' },\n        });\n        if (details && details.reason) {\n            details.loading('Starting system...');\n            const resp = await startSystem(this.active_item.id)\n                .toPromise()\n                .catch((err) => {\n                    notifyError(\n                        `Failed to start system: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                    return err;\n                });\n            if (!resp) notifySuccess(`Successfully started system`);\n            details.close();\n        }\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public async stopSystem() {\n        const details = await this.confirm({\n            title: 'Stop system?',\n            content: `Are you sure you want to stop this system?<br>All modules will be immediately stopped regardless of any other systems they may be in.`,\n            icon: { type: 'icon', class: 'backoffice-controller-stop' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Stopping system...');\n        const resp = await stopSystem(this.active_item.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to stop system: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        if (!resp) notifySuccess(`Successfully stopped system`);\n        details.close();\n    }\n\n    public toggleModuleDebug(device: PlaceModule) {\n        if (!device) return;\n        if (this._debug.isListening(device)) {\n            this._debug.unbind(device);\n        } else {\n            this._debug.bind(\n                device,\n                `${\n                    device.custom_name || device.name || 'Blank'\n                }_${calculateModuleIndex(this._modules.getValue(), device)}`\n            );\n        }\n    }\n\n    public async newModule() {\n        const module = await this._state\n            .edit(\n                new PlaceModule({\n                    system: this.active_item,\n                    control_system_id: this.active_item.id,\n                })\n            )\n            .catch((_) => null);\n        if (!module) return;\n        this.joinModule(module.id);\n    }\n\n    public async editModule(device: PlaceModule) {\n        await this._state.edit(device).catch((_) => null);\n        this._change.next(Date.now());\n    }\n\n    public async selectTrigger() {\n        const ref = this._dialog.open<\n            SelectItemModalComponent,\n            SelectItemModalData\n        >(SelectItemModalComponent, {\n            data: {\n                service_name: 'Triggers',\n                query_fn: (_) =>\n                    queryTriggers({ q: _ }).pipe(map((resp) => resp.data)),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'action'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (!details || !details.reason) return ref.close();\n        const t = await this.addTrigger(ref.componentInstance.item);\n        ref.close();\n        this._change.next(Date.now());\n        return t;\n    }\n\n    public async addTrigger(trigger: PlaceTrigger) {\n        const t = await addSystemTrigger(this.active_item.id, {\n            control_system_id: this.active_item.id,\n            enabled: true,\n            important: false,\n            trigger_id: trigger.id,\n        } as any).toPromise();\n        this.timeout('change', () => this._change.next(Date.now()));\n        return t;\n    }\n\n    public async editTrigger(trigger: PlaceTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: trigger,\n                    name: 'Trigger',\n                    save: (item) => updateTrigger(item.id, item),\n                    external_save: true,\n                },\n            });\n            const details = await Promise.race([\n                ref.componentInstance.event\n                    .pipe(first((_) => _.reason === 'action'))\n                    .toPromise(),\n                ref.afterClosed().toPromise(),\n            ]);\n            if (!details || !details.reason) return;\n            ref.componentInstance.loading = 'Saving trigger settings...';\n\n            const url = `${apiEndpoint()}/systems/${\n                this.active_item.id\n            }/triggers/${trigger.id}`;\n            const trig = await put(url, details.metadata)\n                .toPromise()\n                .catch((err) => {\n                    notifyError(\n                        `Error updating trigger settings. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                    throw err;\n                });\n            ref.close();\n            if (!trig) return trigger;\n            notifySuccess(`Successfully updated trigger settings.`);\n            this.timeout('change', () => this._change.next(Date.now()));\n            return trig;\n        }\n    }\n\n    public async removeTrigger(trigger: PlaceTrigger) {\n        const details = await this.confirm({\n            title: `Remove trigger`,\n            content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        await removeSystemTrigger(this.active_item.id, trigger.id)\n            .toPromise()\n            .catch((err) => {\n                details.close();\n                notifyError(\n                    `Error removing trigger ${trigger.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        details.close();\n        notifySuccess(`Successfully removed trigger from system.`);\n        this._change.next(Date.now());\n    }\n\n    public async reorderModules(fst: number, snd: number) {\n        const details = await this.confirm({\n            title: 'Change order?',\n            content: `Are you sure you want to change the module priority?<br>Settings will be updated immediately for the system.`,\n            icon: { type: 'icon', class: 'backoffice-layers' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Updating module order...');\n        const list: string[] = [...this.active_item.modules];\n        moveItemInArray(list, fst, snd);\n        const resp = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            modules: list,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to reorder system modules: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        details.close();\n        if (resp instanceof PlaceSystem) {\n            notifySuccess(`Successfully reordered system modules.`);\n            this._state.replaceItem(resp);\n        }\n    }\n\n    public async reorderZones(fst: number, snd: number) {\n        const details = await this.confirm({\n            title: 'Change order?',\n            content: `Are you sure you want to change the zone priority?<br>Settings will be updated immediately for the system.`,\n            icon: { type: 'icon', class: 'backoffice-layers' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Updating zone order...');\n        const list: string[] = [...this.active_item.zones];\n        moveItemInArray(list, fst, snd);\n        const resp = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones: list,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Failed to reorder system zones: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n                return err;\n            });\n        if (resp instanceof PlaceSystem) {\n            notifySuccess(`Successfully reordered system zones.`);\n            this._state.replaceItem(resp);\n        }\n        details.close();\n    }\n\n    /**\n     * Associate module with the active system\n     * @param id ID of the module to associate with the active system\n     */\n    public async joinModule(id: string) {\n        const system = await addSystemModule(this.active_item.id, id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error adding module ${id} to system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully added module to system.`);\n        this._change.next(Date.now());\n    }\n\n    /**\n     * Remove associated module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async removeModule(device: PlaceModule) {\n        const details = await this.confirm({\n            title: 'Remove module?',\n            content: `Remove ${device.driver_id} from this system?<br>If this is not used elsewhere the associated data will be removed immediately.`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        const system = await removeSystemModule(this.active_item.id, device.id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed module from system.`);\n    }\n\n    /**\n     * Reload module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async reloadModule(device: PlaceModule) {\n        const details = await this.confirm({\n            title: 'Recompile module?',\n            content: `New driver code will be loaded and the device settings will be reloaded.`,\n            icon: { type: 'icon', class: 'backoffice-install' },\n        });\n        if (!details || !details.reason) return;\n        details.loading('Recompiling and reloading driver...');\n        await recompileDriver(device.driver?.id || device.driver_id)\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing module ${device.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n                throw err;\n            });\n        notifySuccess(`Successfully removed module from system.`);\n        details.close();\n    }\n\n    /**\n     * Add list of zones to the system\n     * @param zones List of zones to add\n     */\n    public async addZones(zone_list: PlaceZone[]) {\n        const zones = unique([\n            ...this.active_item.zones,\n            ...zone_list.map((_) => _.id),\n        ]);\n        const system = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error adding ${\n                        zone_list.length\n                    } zone(s) to system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully added zone to system.`);\n    }\n\n    /**\n     * Remove associated module from the active system\n     * @param id ID of the module to disassociate with the active system\n     */\n    public async removeZone(zone: PlaceZone) {\n        const details = await this.confirm({\n            title: 'Remove zone?',\n            content: `<p>Are you sure you want remove zone \"${zone.name}\" from the system?</p>Configuration will be updated immediately.`,\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        });\n        if (!details || !details.reason) return;\n        const zones = this.active_item.zones.filter((z) => z !== zone.id);\n        const system = await updateSystem(this.active_item.id, {\n            ...this.active_item,\n            zones,\n        })\n            .toPromise()\n            .catch((err) => {\n                notifyError(\n                    `Error removing zone ${zone.id} from system. Error: ${\n                        err.statusText || err.message || err\n                    }`\n                );\n            });\n        details.close();\n        if (!system) return;\n        this._state.replaceItem(system);\n        notifySuccess(`Successfully removed zone from system.`);\n    }\n\n    /**\n     * Toggle the power state\n     * @param device Module to toggle the power state\n     */\n    public async toggleModulePower(device: PlaceModule) {\n        const method = device.running ? stopModule : startModule;\n        await method(device.id)\n            .toPromise()\n            .catch((err) => {\n                if (typeof err === 'string' && err.length < 64) {\n                    notifyError(err);\n                } else {\n                    notifyError(\n                        `Failed to ${\n                            device.running ? 'stop' : 'start'\n                        } module '${device.id}'.\\nView Error?`,\n                        'View',\n                        () => this.viewDetails(err)\n                    );\n                }\n                throw err;\n            });\n        notifySuccess(\n            `Module successfully ${device.running ? 'stopped' : 'started'}`\n        );\n        (device as any).running = !device.running;\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(\n            ViewResponseModalComponent,\n            {\n                data: { content },\n            }\n        );\n    }\n\n    private async confirm(data: ConfirmModalData) {\n        return openConfirmModal(data, this._dialog);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BaseClass } from '../common/base.class';\nimport { extensionsForItem } from '../common/api';\nimport { SystemStateService } from './system-state.service';\nimport { HashMap } from '../common/types';\n\n@Component({\n    selector: 'app-systems',\n    template: `\n        <div class=\"flex-1 flex-col sm:flex-row flex h-full w-full relative\">\n            <sidebar\n                heading=\"Systems\"\n                name=\"systems\"\n                class=\"absolute top-0 left-0 h-12 w-full sm:h-full sm:static\"\n            ></sidebar>\n            <item-display\n                name=\"system\"\n                route=\"systems\"\n                [tabs]=\"tab_list\"\n                class=\"flex-1 relative mt-12 sm:mt-0 w-full sm:w-1/2 \"\n            ></item-display>\n        </div>\n    `,\n    styles: [\n        `\n            sidebar {\n                transition: height 300ms;\n            }\n            @media screen and (min-width: 640px) {\n                sidebar {\n                    width: 20em !important;\n                }\n            }\n        `,\n    ],\n})\nexport class SystemsComponent extends BaseClass implements OnInit {\n    public readonly name = 'systems';\n\n    public tab_list = [];\n\n    public get extensions() {\n        return extensionsForItem(this._service.active_item, this.name);\n    }\n\n    public updateTabList(counts: HashMap<number>) {\n        this.tab_list = [\n            {\n                id: 'about',\n                name: 'About',\n                icon: { class: 'backoffice-info-with-circle' },\n            },\n            {\n                id: 'modules',\n                name: 'Modules',\n                count: counts.devices,\n                icon: { class: 'backoffice-tablet' },\n            },\n            {\n                id: 'zones',\n                name: 'Zones',\n                count: counts.zones,\n                icon: { class: 'backoffice-layers' },\n            },\n            {\n                id: 'triggers',\n                name: 'Triggers',\n                count: counts.triggers,\n                icon: { class: 'backoffice-stopwatch' },\n            },\n            {\n                id: 'metadata',\n                name: 'Metadata',\n                count: counts.metadata,\n                icon: { class: 'backoffice-gist' },\n            },\n            {\n                id: 'history',\n                name: 'Settings History',\n                icon: { class: 'backoffice-clock' },\n            },\n        ].concat(this.extensions);\n    }\n\n    constructor(protected _service: SystemStateService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.updateTabList({});\n        this.subscription(\n            'counts',\n            this._service.counts.subscribe((counts) =>\n                this.updateTabList(counts)\n            )\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport { SystemStateService } from './system-state.service';\n\n\n@Component({\n    selector: 'system-about',\n    template: `\n        <section class=\"flex items-center space-x-2 mb-4\">\n            <button\n                mat-button\n                class=\"flex-1 sm:flex-none\"\n                (click)=\"start()\"\n                i18n=\"@@systemStartAction\"\n            >\n                Start System\n            </button>\n            <button\n                mat-button\n                class=\"flex-1 sm:flex-none\"\n                (click)=\"stop()\"\n                i18n=\"@@systemStopAction\"\n            >\n                Stop System\n            </button>\n        </section>\n        <section class=\"details\">\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.support_url\">\n                <label i18n=\"@@systemUrlLabel\">Support URL:</label>\n                <div class=\"value\">\n                    <a class=\"underline\" [href]=\"item?.support_url\" target=\"_blank\">{{\n                        item?.support_url\n                    }}</a>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.bookable\">\n                <label i18n=\"@@systemBookableLabel\">Bookable Room:</label>\n                <div class=\"value\">{{ item?.bookable ? 'Yes' : 'No' }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.email\">\n                <label i18n=\"@@emailLabel\">Email:&nbsp;</label>\n                <a\n                    *ngIf=\"item?.email\"\n                    class=\"underline select-all\"\n                    [href]=\"'mailto:' + item?.email\"\n                    target=\"_blank\"\n                    >{{ item?.email }}</a\n                >\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.capacity\">\n                <label i18n=\"@@capacityLabel\">Capacity:</label>\n                <div class=\"value\">{{ item?.capacity }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.map_id\">\n                <label i18n=\"@@mapIdLabel\">Map ID:</label>\n                <div class=\"value\">{{ item?.map_id }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.installed_ui_devices\">\n                <label i18n=\"@@systemPanelCountLabel\">Installed Touch Panels:</label>\n                <div class=\"value\">{{ item?.installed_ui_devices }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.created_at\">\n                <label i18n=\"@@systemCreatedAtLabel\">Created:</label>\n                <div class=\"value\">{{ item?.created_at * 1000 | dateFrom }}</div>\n            </div>\n            <div class=\"flex items-center space-x-2\" *ngIf=\"item?.updated_at\">\n                <label i18n=\"@systemUpdatedAtLabel\">Updated:</label>\n                <div class=\"value\">{{ item?.updated_at * 1000 | dateFrom }}</div>\n            </div>\n        </section>\n        <hr class=\"my-4\" />\n        <header class=\"font-medium text-lg\" i18n=\"@@settingsLabel\">Settings</header>\n        <section *ngIf=\"item?.settings && other_settings; else load_state\">\n            <a-settings-form\n                [id]=\"item?.id\"\n                [merge]=\"true\"\n                [settings]=\"item?.settings\"\n                [merge_settings]=\"(other_settings | async) || []\"\n            ></a-settings-form>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col p-8 items-center justify-center\">\n                <mat-spinner class=\"mb-4\" [diameter]=\"32\"></mat-spinner>\n                <p i18n=\"@@systemLoadingLabel\">Loading system settings...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n                height: 100%;\n                width: 100%;\n            }\n\n            button {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SystemAboutComponent {\n    /** List of settings for associated modules, drivers and zones */\n    public readonly other_settings = this._service.associated_settings;\n\n    public readonly start = () => this._service.startSystem();\n    public readonly stop = () => this._service.stopSystem();\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: SystemStateService) {}\n}\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    loadModule,\n    PlaceDriverRole,\n    PlaceModule,\n    PlaceSystem,\n    queryModules,\n    showModule,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport {\n    notifyError,\n    notifySuccess,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { AppLink, HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    ModuleStateModalData,\n    ViewModuleStateModalComponent,\n} from 'apps/backoffice/src/app/overlays/view-module-state/view-module-state.component';\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-modules',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <section add-module class=\"flex space-x-2 flex-wrap mb-2\">\n                <item-search-field\n                    class=\"flex-grow-1 w-full sm:flex-1 sm:w-auto h-12\"\n                    name=\"module\"\n                    [query_fn]=\"query_fn\"\n                    [exclude]=\"exclude_fn\"\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"new_module = $event.id\"\n                ></item-search-field>\n                <button\n                    mat-button\n                    class=\"flex-1 w-40 sm:w-32 sm:flex-none h-11\"\n                    [disabled]=\"!new_module\"\n                    (click)=\"addModule()\"\n                    i18n=\"@@addExistingAction\"\n                >\n                    Add existing\n                </button>\n                <button\n                    mat-button\n                    class=\"flex-1 w-40 sm:w-32 sm:flex-none h-11\"\n                    (click)=\"newModule()\"\n                    i18n=\"@@newAction\"\n                >\n                    Add new\n                </button>\n            </section>\n            <section\n                exec\n                *ngIf=\"item.id && item.modules && !hide_exec\"\n                class=\"mb-2\"\n            >\n                <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@execHeader\">\n                    Execute command\n                </h3>\n                <execute-method-field [system]=\"item\"></execute-method-field>\n            </section>\n            <section device-list>\n                <h3 class=\"font-medium text-lg mb-2\" i18n=\"@@moduleListHeader\">\n                    Module List\n                </h3>\n                <ng-container\n                    *ngIf=\"!(loading | async).modules; else load_state\"\n                >\n                    <div\n                        role=\"table\"\n                        class=\"overflow-x-auto\"\n                        *ngIf=\"(modules | async)?.length; else empty_state\"\n                    >\n                        <div table-head>\n                            <div class=\"w-12 p-2\"></div>\n                            <div class=\"w-12 p-2\" i18n=\"@@moduleStateLabel\">\n                                State\n                            </div>\n                            <div class=\"flex-1 p-2\" i18n=\"@@moduleNameLabel\">\n                                Name\n                            </div>\n                            <div class=\"w-48 p-2\" i18n=\"@@moduleClassLabel\">\n                                Class\n                            </div>\n                            <div class=\"w-48 p-2\" i18n=\"@@moduleIpLabel\">\n                                IP/URI\n                            </div>\n                            <div class=\"w-24 p-2 h-9\"></div>\n                        </div>\n                        <div\n                            body\n                            cdkDropList\n                            (cdkDropListDropped)=\"drop($event)\"\n                            class=\"overflow-y-auto\"\n                        >\n                            <div\n                                table-row\n                                cdkDrag\n                                *ngFor=\"\n                                    let device of modules | async;\n                                    let i = index\n                                \"\n                                [context-menu]=\"menu\"\n                                (contextAction)=\"\n                                    handleContextEvent($event, device)\n                                \"\n                            >\n                                <div\n                                    class=\"w-full h-10 border-2 border-dashed border-gray-600 bg-gray-300 bg-opacity-25\"\n                                    *cdkDragPlaceholder\n                                ></div>\n                                <div\n                                    class=\"w-12 flex justify-center h-full p-2\"\n                                    style=\"cursor: grab\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-select-arrows\"\n                                        cdkDragHandle\n                                    ></app-icon>\n                                </div>\n                                <div\n                                    class=\"w-12 flex items-center justify-center p-2 h-full\"\n                                >\n                                    <div\n                                        dot\n                                        binding\n                                        [sys]=\"item.id\"\n                                        [mod]=\"(bindings | async)[i]\"\n                                        bind=\"connected\"\n                                        [(model)]=\"device.connected\"\n                                        class=\"h-4 w-4 rounded-full\"\n                                        [class.bg-black]=\"!device.running\"\n                                        [class.bg-error]=\"\n                                            device.running && !device.connected\n                                        \"\n                                        [class.bg-success]=\"\n                                            device.running && !!device.connected\n                                        \"\n                                        (click)=\"power(device)\"\n                                    ></div>\n                                </div>\n                                <div\n                                    class=\"flex-1 p-2 h-full flex flex-col justify-center\"\n                                >\n                                    <a\n                                        [routerLink]=\"['/modules', device.id]\"\n                                        (contextmenu)=\"$event.stopPropagation()\"\n                                        class=\"truncate underline w-full\"\n                                        [title]=\"\n                                            device.driver?.name || '<Unnamed>'\n                                        \"\n                                    >\n                                        {{\n                                            device.driver?.name ||\n                                                '&lt;Unnamed&gt;'\n                                        }}\n                                    </a>\n                                    <div\n                                        class=\"text-xs truncate w-full\"\n                                        *ngIf=\"device.notes\"\n                                    >\n                                        {{ device.notes }}\n                                    </div>\n                                </div>\n                                <div class=\"w-48 p-2\">\n                                    <mat-checkbox\n                                        class=\"w-full\"\n                                        [disabled]=\"!device.running\"\n                                        [checked]=\"\n                                            (debugging | async)[device.id]\n                                        \"\n                                        (change)=\"toggleDebug(device)\"\n                                    >\n                                        <span\n                                            class=\"truncate\"\n                                            [title]=\"(bindings | async)[i]\"\n                                            >{{ (bindings | async)[i] }}</span\n                                        >\n                                    </mat-checkbox>\n                                </div>\n                                <div\n                                    class=\"w-48 text-right flex items-center h-full p-2\"\n                                >\n                                    <app-icon\n                                        *ngIf=\"device.tls\"\n                                        className=\"backoffice-lock\"\n                                    ></app-icon>\n                                    <a\n                                        [href]=\"\n                                            device.ip\n                                                ? (device.tls\n                                                      ? 'https://'\n                                                      : 'http://') + device.ip\n                                                : device.uri\n                                        \"\n                                        target=\"_blank\"\n                                        class=\"truncate underline\"\n                                        >{{ device.ip || device.uri }}</a\n                                    >\n                                </div>\n                                <div class=\"w-24 flex px-2 justify-center\">\n                                    <button\n                                        mat-icon-button\n                                        (click)=\"editModule(device)\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-edit'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <button\n                                        mat-icon-button\n                                        [matMenuTriggerFor]=\"menu\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class:\n                                                    'backoffice-dots-three-vertical'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <mat-menu #menu=\"matMenu\">\n                                        <button\n                                            mat-menu-item\n                                            *ngFor=\"\n                                                let item of device.running\n                                                    ? menu_options\n                                                    : offline_options\n                                            \"\n                                            (click)=\"\n                                                handleContextEvent(item, device)\n                                            \"\n                                        >\n                                            <app-icon\n                                                [icon]=\"item.icon\"\n                                            ></app-icon>\n                                            <div class=\"text\">\n                                                {{ item.name }}\n                                            </div>\n                                        </button>\n                                    </mat-menu>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n            </section>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading modules...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No devices for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1rem;\n            }\n\n            button[mat-button] {\n                min-width: 8rem;\n            }\n\n            button.mat-menu-item {\n                display: flex;\n                align-items: center;\n            }\n\n            button .text {\n                margin-left: 1rem;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 48rem;\n            }\n\n            .bg-success {\n                height: 0.5rem !important;\n                width: 0.5rem !important;\n            }\n\n            [dot] {\n                transition: height 200ms, width 200ms;\n            }\n        `,\n    ],\n})\nexport class SystemModulesComponent extends BaseClass {\n    /** Whether a device should be listened to */\n    public device_listener: HashMap<boolean> = {};\n    /** Store for ID of new module to add to system */\n    public new_module: string;\n    /** Whether to show exec block */\n    public hide_exec: boolean;\n    /** Whether to refresh the list of active modules in the exec options */\n    public refresh_modules: boolean;\n\n    public readonly loading = this._service.loading;\n    public readonly modules = this._service.modules;\n    public readonly debugging = this._service.debug_state;\n    public readonly bindings = this._service.module_bindings;\n    /** Actions available for the context menu */\n    public menu_options: AppLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        {\n            id: 'state',\n            name: 'View State',\n            icon: { type: 'icon', class: 'backoffice-eye' },\n        },\n        {\n            id: 'reload',\n            name: 'Recompile Driver',\n            icon: { type: 'icon', class: 'backoffice-cw' },\n        },\n        {\n            id: 'edit',\n            name: 'Edit Module',\n            icon: { type: 'icon', class: 'backoffice-edit' },\n        },\n        {\n            id: 'remove',\n            name: 'Remove Module',\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n\n    public offline_options: AppLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        {\n            id: 'edit',\n            name: 'Edit Module',\n            icon: { type: 'icon', class: 'backoffice-edit' },\n        },\n        {\n            id: 'remove',\n            name: 'Remove Module',\n            icon: { type: 'icon', class: 'backoffice-trash' },\n        },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n    /** Query method for modules */\n    public readonly query_fn = (_: string) =>\n        queryModules({ q: _ }).pipe(\n            map((_) =>\n                _.data.map((mod) => ({ ...mod, extra: mod.driver?.name }))\n            )\n        );\n    /** Function for excluding modules already within this system */\n    public readonly exclude_fn = (item: PlaceModule) =>\n        item.control_system_id === this.item.id ||\n        item.role === PlaceDriverRole.Logic;\n\n    public readonly newModule = () => this._service.newModule();\n    public readonly removeModule = (d) => this._service.removeModule(d);\n    public readonly editModule = (d) => this._service.editModule(d);\n    public readonly joinModule = (id) => this._service.joinModule(id);\n    public readonly reloadModule = (d) => this._service.reloadModule(d);\n    public readonly toggleDebug = (d) => this._service.toggleModuleDebug(d);\n    public readonly power = (d) => {\n        this._service.toggleModulePower(d);\n        this.refresh_modules = !this.refresh_modules;\n    };\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(\n        private _service: SystemStateService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    /**\n     * Handle context menu event\n     * @param event Event posted by the context menu\n     * @param device Module associated with the context menu event\n     */\n    public handleContextEvent(event: AppLink, device: PlaceModule) {\n        if (event) {\n            switch (event.id) {\n                case 'power':\n                    this.power(device);\n                    break;\n                case 'state':\n                    this.viewState(device);\n                    break;\n                case 'reload':\n                    this.reloadModule(device);\n                    break;\n                case 'remove':\n                    this.removeModule(device);\n                    break;\n                case 'load':\n                    this.loadModule(device);\n                    break;\n                case 'edit':\n                    this.editModule(device);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Update the state of the module\n     * @param device Module to reload\n     */\n    public async reload(device: PlaceModule) {\n        const item = await showModule(device.id).toPromise();\n        for (const k in item) {\n            if (item.hasOwnProperty(k)) {\n                device[k] = item[k];\n            }\n        }\n    }\n\n    public async viewState(device: PlaceModule) {\n        const modules = this._service.getModules();\n        this._dialog.open<ViewModuleStateModalComponent, ModuleStateModalData>(\n            ViewModuleStateModalComponent,\n            { data: { system: this.item, module: device, devices: modules } }\n        );\n    }\n\n    public loadModule(device: PlaceModule) {\n        loadModule(device.id)\n            .toPromise()\n            .then(\n                () =>\n                    notifySuccess(\n                        `Successfully loaded module \"${\n                            device.name || device.id\n                        }\"`\n                    ),\n                (err) =>\n                    notifyError(\n                        `Error loading module. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    )\n            );\n    }\n\n    /**\n     * Handle drop event for reordering the devices\n     * @param event Drag drop details\n     */\n    public drop(event: CdkDragDrop<any[]>) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderModules(\n                event.previousIndex,\n                event.currentIndex\n            );\n        }\n    }\n\n    public addModule() {\n        if (!this.new_module) return;\n        this.joinModule(this.new_module);\n        this.new_module = '';\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceTrigger } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { copyToClipboard, unique } from '../common/general';\nimport { notifyInfo } from '../common/notifications';\n\nimport { HashMap } from '../common/types';\nimport { SystemStateService } from './system-state.service';\n\nexport interface TriggerInstanceState {\n    triggered: boolean;\n    trigger_count: number;\n    action_errors: number;\n    comparison_errors: number;\n    conditions: HashMap<boolean>;\n}\n\n@Component({\n    selector: 'system-triggers',\n    template: `\n        <section class=\"flex items-center mb-4 space-x-2\">\n            <button\n                mat-button\n                style=\"min-width: 8rem\"\n                (click)=\"selectTrigger()\"\n            >\n                Add Trigger\n            </button>\n            <mat-form-field appearance=\"outline\" class=\"h-12 flex-1\">\n                <app-icon\n                    matPrefix\n                    className=\"backoffice-magnifying-glass text-xl mr-2\"\n                ></app-icon>\n                <input\n                    [ngModel]=\"''\"\n                    (ngModelChange)=\"filter$.next($event)\"\n                    matInput\n                    placeholder=\"Filter triggers...\"\n                    class=\"rounded-none\"\n                />\n            </mat-form-field>\n        </section>\n        <section>\n            <ng-container *ngIf=\"!(loading | async).triggers; else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(triggers | async)?.length; else empty_state\"\n                >\n                    <div table-head>\n                        <div class=\"w-12 p-2\"></div>\n                        <div flex class=\"flex-1 p-2\" i18n=\"@@nameLabel\">\n                            Name\n                        </div>\n                        <div class=\"w-16 p-2\" i18n=\"@@triggerCountLabel\">\n                            Count\n                        </div>\n                        <div class=\"w-16 p-2\" i18n=\"@@triggerErrorsLabel\">\n                            Errors\n                        </div>\n                        <div class=\"w-28 p-2\" i18n=\"@@descriptionLabel\">\n                            Added\n                        </div>\n                        <div class=\"w-32 p-2\"></div>\n                    </div>\n                    <div table-body class=\"overflow-y-auto\">\n                        <div\n                            table-row\n                            *ngFor=\"\n                                let trigger of triggers | async;\n                                let i = index\n                            \"\n                        >\n                            <i\n                                hidden\n                                binding\n                                [sys]=\"item.id\"\n                                mod=\"_TRIGGER__1\"\n                                [bind]=\"trigger.id\"\n                                [(model)]=\"trigger_state[trigger.id]\"\n                                (modelChange)=\"updateComparisons(trigger.id)\"\n                            ></i>\n                            <div\n                                class=\"w-12 flex items-center justify-center h-full p-2\"\n                            >\n                                <div\n                                    class=\"h-2 w-2 rounded-full\"\n                                    [class.bg-black]=\"\n                                        !trigger_state[trigger.id]?.triggered\n                                    \"\n                                    [class.bg-success]=\"\n                                        trigger_state[trigger.id]?.triggered\n                                    \"\n                                ></div>\n                            </div>\n                            <div flex class=\"flex-1 p-2\">\n                                <a\n                                    class=\"truncate\"\n                                    [routerLink]=\"['/triggers', trigger.id]\"\n                                    >{{ trigger.name }}</a\n                                >\n                            </div>\n                            <div desc class=\"w-16 p-2\">\n                                {{ trigger_state[trigger.id]?.trigger_count }}\n                            </div>\n                            <div desc class=\"w-16 p-2\">\n                                {{\n                                    trigger_state[trigger.id]?.action_errors +\n                                        trigger_state[trigger.id]\n                                            ?.comparison_errors || '0'\n                                }}\n                            </div>\n                            <div desc class=\"w-28 p-2\">\n                                {{ +trigger.created_at * 1000 | dateFrom }}\n                            </div>\n                            <div class=\"w-32 p-2 items-center justify-center\">\n                                <button\n                                    mat-icon-button\n                                    (click)=\"copyWebhookURL(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-link\"\n                                    ></app-icon>\n                                </button>\n                                <button\n                                    mat-icon-button\n                                    (click)=\"editTrigger(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-edit\"\n                                    ></app-icon>\n                                </button>\n                                <button\n                                    mat-icon-button\n                                    (click)=\"deleteTrigger(trigger)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-trash\"\n                                    ></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading triggers...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <p>No triggers for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                padding: 1rem;\n            }\n\n            [flex] {\n                min-width: 8rem;\n            }\n\n            [role='table'] > div {\n                width: 100%;\n                min-width: 36rem;\n            }\n        `,\n    ],\n})\nexport class SystemTriggersComponent {\n    public readonly filter$ = new BehaviorSubject<string>('');\n\n    public readonly loading = this._service.loading;\n\n    public readonly trigger_state: HashMap<TriggerInstanceState> = {};\n\n    public readonly comparisons: HashMap<string> = {};\n\n    public readonly temp_trigger = new BehaviorSubject<PlaceTrigger>(null);\n\n    public readonly triggers = combineLatest([\n        this.filter$,\n        this._service.triggers,\n        this.temp_trigger,\n    ]).pipe(\n        map(([filter, triggers, temp]) => {\n            const search = filter.toLowerCase();\n            const list = unique(temp ? [...triggers, temp] : triggers, 'id');\n            return filter\n                ? list.filter((t) => t.name.toLowerCase().includes(search))\n                : list;\n        })\n    );\n\n    public readonly copyWebhookURL = (t) => {\n        copyToClipboard(\n            `${location.origin}/api/engine/v2/webhook/${t.id}/notify?secret=${t.webhook_secret}`\n        );\n        notifyInfo('Webhook link copied to clipboard');\n    };\n    public readonly editTrigger = async (t) =>\n        this.temp_trigger.next((await this._service.editTrigger(t)) as any);\n    public readonly deleteTrigger = (t) => this._service.removeTrigger(t);\n    public readonly selectTrigger = async () =>\n        this.temp_trigger.next((await this._service.selectTrigger()) || null);\n\n    public get item() {\n        return this._service.active_item;\n    }\n\n    constructor(private _service: SystemStateService) {}\n\n    public updateComparisons(id: string): void {\n        this.comparisons[id] = '';\n        if (this.trigger_state[id]) {\n            for (const key in this.trigger_state[id].conditions) {\n                if (this.trigger_state[id].conditions.hasOwnProperty(key)) {\n                    if (this.comparisons[id]) {\n                        this.comparisons[id] += '\\n';\n                    }\n                    this.comparisons[\n                        id\n                    ] += `${key}: ${this.trigger_state[id].conditions[key]}`;\n                }\n            }\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { PlaceSystem, PlaceZone, queryZones } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SystemStateService } from './system-state.service';\n\n@Component({\n    selector: 'system-zones',\n    template: `\n        <section class=\"flex items-center space-x-2 mb-4\">\n            <item-search-field\n                name=\"zone\"\n                class=\"flex-1 h-12\"\n                [query_fn]=\"query_fn\"\n                [exclude]=\"exclude_fn\"\n                [ngModel]=\"null\"\n                (ngModelChange)=\"addPendingZone($event)\"\n            ></item-search-field>\n            <button\n                mat-button\n                [disabled]=\"!this.pending_zones.getValue().length\"\n                (click)=\"savePendingZones()\"\n            >\n                Save Pending\n            </button>\n        </section>\n        <section>\n            <ng-container *ngIf=\"!(loading | async).zones; else load_state\">\n                <div\n                    role=\"table\"\n                    class=\"overflow-x-auto\"\n                    *ngIf=\"(zones | async)?.length\"\n                >\n                    <div table-head>\n                        <div class=\"w-12 p-2\"></div>\n                        <div class=\"w-48 p-2\" i18n=\"@@nameLabel\">Name</div>\n                        <div desc class=\"flex-1 p-2\" i18n=\"@@descriptionLabel\">\n                            Description\n                        </div>\n                        <div class=\"w-16 p-2\"></div>\n                    </div>\n                    <div\n                        body\n                        cdkDropList\n                        (cdkDropListDropped)=\"drop($event)\"\n                        class=\"overflow-y-auto\"\n                    >\n                        <div\n                            table-row\n                            cdkDrag\n                            *ngFor=\"let zone of zones | async; let i = index\"\n                        >\n                            <div\n                                class=\"w-full h-10 border-2 border-dashed border-gray-600 bg-gray-300 bg-opacity-25\"\n                                *cdkDragPlaceholder\n                            ></div>\n                            <div\n                                class=\"w-12 flex justify-center h-full p-2\"\n                                style=\"cursor: grab\"\n                                [class.pointer-events-none]=\"zone.pending\"\n                                [class.text-pending]=\"zone.pending\"\n                            >\n                                <app-icon\n                                    [className]=\"\n                                        zone.pending\n                                            ? 'backoffice-warning'\n                                            : 'backoffice-select-arrows'\n                                    \"\n                                    cdkDragHandle\n                                ></app-icon>\n                            </div>\n                            <div class=\"w-48 p-2\">\n                                <a [routerLink]=\"['/zones', zone.id]\">\n                                    {{ zone.name }}\n                                </a>\n                            </div>\n                            <div desc class=\"flex-1 truncate\">\n                                {{ zone.description }}\n                            </div>\n                            <div class=\"w-16 p-2 items-center justify-center\">\n                                <button\n                                    mat-icon-button\n                                    *ngIf=\"(zones | async).length > 1\"\n                                    (click)=\"removeZone(zone)\"\n                                >\n                                    <app-icon\n                                        className=\"backoffice-trash\"\n                                    ></app-icon>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ng-container>\n        </section>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 mx-auto\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Loading zones...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                padding: 1rem;\n            }\n\n            [desc] {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SystemZonesComponent {\n    /** ID of a zone that the user wishes to add to the system */\n    public readonly pending_zones = new BehaviorSubject([]);\n    /** Whether zones for active item are loading */\n    public readonly loading = this._service.loading;\n    /** List of zones assoicated with the active item */\n    public readonly zones = combineLatest([\n        this._service.zones,\n        this.pending_zones,\n    ]).pipe(\n        map(([z, p]) => [...z, ...p.map((_) => ({ ..._, pending: true }))])\n    );\n\n    /** Query function for systems */\n    public readonly query_fn = (_) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n\n    public readonly exclude_fn = (zone: PlaceZone) =>\n        this.item.zones.indexOf(zone.id) >= 0;\n\n    public readonly removeZone = (z) =>\n        z.pending\n            ? this.pending_zones.next(\n                  this.pending_zones.getValue().filter((_) => _.id !== z.id)\n              )\n            : this._service.removeZone(z);\n\n    public readonly addPendingZone = (z) =>\n        this.pending_zones.next([...this.pending_zones.getValue(), z]);\n\n    public readonly savePendingZones = async () => {\n        if (!this.pending_zones.getValue().length) return;\n        await this._service.addZones(this.pending_zones.getValue());\n        this.pending_zones.next([]);\n    };\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    constructor(private _service: SystemStateService) {}\n\n    public drop(event) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            this._service.reorderZones(event.previousIndex, event.currentIndex);\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    PlaceSystem,\n    PlaceMetadata,\n    removeMetadata,\n    updateMetadata,\n    listMetadata,\n} from '@placeos/ts-client';\n\nimport { BaseClass } from 'apps/backoffice/src/app/common/base.class';\nimport { HashMap } from 'apps/backoffice/src/app/common/types';\nimport {\n    FormGroup,\n    FormControl,\n    Validators,\n    AbstractControl,\n} from '@angular/forms';\nimport { validateJSONString } from 'apps/backoffice/src/app/common/validation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MetadataDetailsModalComponent } from 'apps/backoffice/src/app/overlays/metadata-details-modal/metadata-details-modal.component';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'apps/backoffice/src/app/overlays/confirm-modal/confirm-modal.component';\nimport {\n    notifySuccess,\n    notifyError,\n} from 'apps/backoffice/src/app/common/notifications';\nimport { ActiveItemService } from 'apps/backoffice/src/app/common/item.service';\nimport { SchemaStateService } from '../engine/schema-state.service';\n\n@Component({\n    selector: 'system-metadata',\n    template: `\n        <div class=\"p-4\" *ngIf=\"item\">\n            <button\n                mat-button\n                (click)=\"newMetadata()\"\n                i18n=\"@@addMetadataAction\"\n            >\n                Add new Metadata Field\n            </button>\n            <div\n                class=\"mt-4\"\n                *ngIf=\"metadata && metadata.length > 0; else empty_state\"\n            >\n                <mat-accordion>\n                    <ng-container *ngFor=\"let item of metadata\">\n                        <mat-expansion-panel\n                            [class.no-padding]=\"true\"\n                            *ngIf=\"form_map[item.name]\"\n                            [formGroup]=\"form_map[item.name]\"\n                        >\n                            <mat-expansion-panel-header>\n                                <mat-panel-title>\n                                    <div edit class=\"flex-1\">\n                                        {{\n                                            form_map[item.name].controls.name\n                                                .value\n                                        }}\n                                    </div>\n                                    <ng-container *ngIf=\"edited[item.name]\">\n                                        <button\n                                            mat-button\n                                            save\n                                            *ngIf=\"\n                                                !loading[item.name];\n                                                else load_state\n                                            \"\n                                            (click)=\"$event.stopPropagation()\"\n                                            (click)=\"saveMetadata(item)\"\n                                            i18n=\"@@saveAction\"\n                                        >\n                                            Save\n                                        </button>\n                                    </ng-container>\n                                    <button\n                                        mat-icon-button\n                                        matTooltip=\"Edit Metadata Settings\"\n                                        (click)=\"\n                                            editMetadataDetails(item);\n                                            $event.stopPropagation()\n                                        \"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'backoffice-edit'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                    <div class=\"contents\" *ngIf=\"!item.new\">\n                                        <button\n                                            mat-icon-button\n                                            matTooltip=\"Remove Metadata\"\n                                            (click)=\"deleteMetadata(item.name)\"\n                                        >\n                                            <app-icon\n                                                [icon]=\"{\n                                                    class: 'backoffice-trash'\n                                                }\"\n                                            ></app-icon>\n                                        </button>\n                                    </div>\n                                </mat-panel-title>\n                            </mat-expansion-panel-header>\n                            <div class=\"settings\">\n                                <settings-form-field\n                                    formControlName=\"details\"\n                                    lang=\"json\"\n                                    [schema]=\"this.schema_map[item.name]\"\n                                    [readonly]=\"false\"\n                                ></settings-form-field>\n                            </div>\n                        </mat-expansion-panel>\n                    </ng-container>\n                </mat-accordion>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"info-block\">\n                <div class=\"text\" i18n=\"@@zoneMetadataEmpty\">\n                    No zone metadata found\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <mat-spinner diameter=\"32\"></mat-spinner>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [edit] app-icon {\n                opacity: 0;\n                transition: opacity 200ms;\n            }\n\n            [edit]:hover app-icon {\n                opacity: 1;\n            }\n\n            mat-panel-title {\n                display: flex;\n                align-items: center;\n                height: 1.2em;\n                overflow: visible;\n            }\n\n            mat-panel-title button {\n                font-size: 0.8em;\n                background: none;\n                border: none;\n                text-decoration: underline;\n                color: inherit;\n            }\n\n            mat-form-field {\n                height: 3em;\n            }\n\n            .settings {\n                width: 100%;\n            }\n\n            .contents {\n                display: flex;\n                justify-content: flex-end;\n                flex: 1;\n                min-width: 2em;\n            }\n\n            .contents button {\n                text-decoration: none;\n            }\n        `,\n    ],\n})\nexport class SystemMetadataComponent extends BaseClass {\n    /** List of metadata associated with the zone */\n    public metadata: PlaceMetadata[] = [];\n    /** Map of form field groups to metadata fields */\n    public form_map: HashMap<FormGroup> = {};\n    /** Map of metadata fields to whether they have been edited */\n    public edited: HashMap<boolean> = {};\n    /** Map of metadata properties to whether they are saving */\n    public loading: HashMap<boolean> = {};\n    /** Map of metadata schemas to the associated metadata */\n    public schema_map: HashMap<HashMap | string> = {};\n\n    public get item(): PlaceSystem {\n        return this._service.active_item as any;\n    }\n\n    private validateName(name_list: string[]) {\n        return (control: AbstractControl) => {\n            return name_list.indexOf(control.value) >= 0\n                ? { name: true }\n                : null;\n        };\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _service: ActiveItemService,\n        private _schemas: SchemaStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.item.subscribe((item) => {\n                this.loadMetadata();\n            })\n        );\n    }\n\n    public newMetadata() {\n        this.metadata.push({\n            name: `new_field_${Math.floor(Math.random() * 999_999_999)}`,\n            description: '',\n            new: true,\n            details: {},\n        } as any);\n        this.generateForms();\n    }\n\n    public editMetadataDetails(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        this._dialog.open(MetadataDetailsModalComponent, {\n            maxWidth: '95vw',\n            data: {\n                form,\n            },\n        });\n    }\n\n    /**\n     * Delete the given metadata field\n     * @param field Name of the field to remove\n     */\n    public deleteMetadata(field: string) {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want delete the metadata property \"${field}\"?</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' },\n            },\n        });\n        this.subscription(\n            'confirm',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    removeMetadata(this.item.id, { name: field }).subscribe(\n                        () => {\n                            notifySuccess(\n                                `Successfully removed \"${field}\" metadata.`\n                            );\n                            this.metadata = this.metadata.filter(\n                                (prop) => prop.name !== field\n                            );\n                            this.generateForms();\n                        },\n                        (err) =>\n                            notifyError(\n                                `Error removing old \"${field}\" metadata. Error: ${\n                                    err.response || err.message || err\n                                }`\n                            )\n                    );\n                }\n                ref.close();\n            })\n        );\n    }\n\n    public saveMetadata(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        form.markAllAsTouched();\n        if (!form.valid)\n            return notifyError(\n                `JSON for property \"${form.controls.name.value}\" is invalid`\n            );\n        const value = form.value;\n        this.loading[field.name] = true;\n        updateMetadata(this.item.id, {\n            ...value,\n            details: JSON.parse(value.details),\n        }).subscribe(\n            (item: PlaceMetadata) => {\n                this.loading[field.name] = false;\n                const index = this.metadata.findIndex(\n                    (i) => i.name === field.name\n                );\n                this.edited[field.name] = false;\n                if (field.name !== item.name) {\n                    removeMetadata(this.item.id, field)\n                        .toPromise()\n                        .catch((err) =>\n                            notifyError(\n                                `Error removing old \"${\n                                    field.name\n                                }\" metadata. Error: ${JSON.stringify(\n                                    err.response || err.message || err\n                                )}`\n                            )\n                        );\n                }\n                if (index >= 0) {\n                    this.metadata.splice(index, 1, {\n                        ...item,\n                        new: false,\n                    } as any);\n                }\n                notifySuccess(`Saved \"${value.name}\" metadata.`);\n                this.generateForms();\n            },\n            (err) => {\n                this.loading[field.name] = false;\n                notifyError(\n                    `Error saving \"${\n                        value.name\n                    }\" metadata. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    private generateForms() {\n        delete this.form_map;\n        this.form_map = {};\n        this.metadata.forEach((group) => {\n            const details =\n                typeof group.details === 'string'\n                    ? JSON.parse(group.details)\n                    : group.details;\n            this.form_map[group.name] = new FormGroup({\n                name: new FormControl(group.name, [\n                    Validators.required,\n                    this.validateName(\n                        this.metadata\n                            .filter((i) => i.name !== group.name)\n                            .map((i) => i.name)\n                    ),\n                ]),\n                description: new FormControl(group.description),\n                editors: new FormControl(group.editors),\n                details: new FormControl(\n                    JSON.stringify(details || {}, undefined, 4),\n                    [Validators.required, validateJSONString]\n                ),\n                schema: new FormControl(group.schema),\n            });\n            this.subscription(\n                `${group.name}_changes`,\n                this.form_map[group.name].valueChanges.subscribe(\n                    () => (this.edited[group.name] = true)\n                )\n            );\n            this.subscription(\n                `${group.name}_schema`,\n                this.form_map[\n                    group.name\n                ].controls.schema.valueChanges.subscribe((_) => {\n                    let schema = this._schemas.getSchema(_);\n                    if (!schema) {\n                        try {\n                            schema = JSON.parse(_);\n                        } catch (e) {\n                            schema = {};\n                        }\n                    }\n                    this.schema_map[group.name] = schema;\n                })\n            );\n        });\n    }\n\n    private loadMetadata() {\n        listMetadata(this.item.id).subscribe((map) => {\n            this.metadata = Object.keys(map).map((key) => map[key]);\n            this.generateForms();\n        });\n    }\n}\n","import { Routes } from '@angular/router';\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about.component';\nimport { SystemModulesComponent } from './system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers.component';\nimport { SystemZonesComponent } from './system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata.component';\nimport { ExtensionOutletComponent } from '../ui/extension-outlet.component';\nimport { SettingsHistoryViewComponent } from '../ui/settings-history-view.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: SystemsComponent,\n        children: [\n            { path: '', redirectTo: 'about' },\n            { path: 'about', component: SystemAboutComponent },\n            { path: 'modules', component: SystemModulesComponent },\n            { path: 'triggers', component: SystemTriggersComponent },\n            { path: 'zones', component: SystemZonesComponent },\n            { path: 'metadata', component: SystemMetadataComponent },\n            { path: 'extend/:id', component: ExtensionOutletComponent },\n            { path: 'history', component: SettingsHistoryViewComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './systems.routes';\n\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about.component';\nimport { SystemModulesComponent } from './system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers.component';\nimport { SystemZonesComponent } from './system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata.component';\nimport { SharedContentModule } from 'apps/backoffice/src/app/ui/ui.module';\n\n@NgModule({\n    declarations: [\n        SystemsComponent,\n        SystemAboutComponent,\n        SystemModulesComponent,\n        SystemTriggersComponent,\n        SystemZonesComponent,\n        SystemMetadataComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule,\n    ],\n})\nexport class AppSystemsModule {}\n"],"sourceRoot":"webpack:///"}