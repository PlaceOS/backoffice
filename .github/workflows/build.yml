# This is a basic workflow to help you get started with Actions

name: BUILD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
    push:
        branches: [develop, release/**, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    install_deps:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: '2'

            - name: Cache node modules
              id: cache
              uses: actions/cache@v2
              with:
                  path: node_modules
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
                      ${{ runner.os }}-build-
                      ${{ runner.os }}-

            - name: Setup Node.js environment
              uses: actions/setup-node@v1.4.4
              with:
                  node-version: '14'

            - name: NPM install
              if: steps.cache.outputs.cache-hit != 'true'
              run: npm install

            - name: Get short hash
              id: vars
              run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

            - name: Extract branch name
              id: branch_name
              shell: bash
              run: echo "::set-output name=name::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"

            - name: Extract build configuration
              shell: bash
              id: build_ext
              run: |
                  if [[ ${{ steps.branch_name.outputs.name }} == "master" ]] || [[ ${{ steps.branch_name.outputs.name }} == "production" ]] || [[ ${{ steps.branch_name.outputs.name }} == "main" ]]
                  then
                      echo "::set-output name=configuration::production"
                      echo "::set-output name=deploy_branch::prod"
                  elif [[ ${{ steps.branch_name.outputs.name }} == release/* ]]
                  then
                      echo "::set-output name=configuration::staging"
                      echo "::set-output name=deploy_branch::uat"
                  else
                      echo "::set-output name=configuration::staging"
                      echo "::set-output name=deploy_branch::dev"
                  fi

        outputs:
            configuration: ${{ steps.build_ext.outputs.configuration }}
            deploy_branch: ${{ steps.build_ext.outputs.deploy_branch }}
            short_sha: ${{ steps.vars.outputs.short_sha }}

    # This workflow contains a single job called "build"
    build:
        runs-on: ubuntu-latest
        needs: install_deps
        env:
            configuration: ${{ needs.install_deps.outputs.configuration }}
            deploy_branch: ${{ needs.install_deps.outputs.deploy_branch }}
            short_sha: ${{ needs.install_deps.outputs.short_sha }}
        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            - uses: actions/checkout@v2

            - name: Cache node modules
              id: cache
              uses: actions/cache@v2
              with:
                  path: node_modules
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
                      ${{ runner.os }}-build-
                      ${{ runner.os }}-

            - name: Cache nx build cahce
              id: cache-nx
              uses: actions/cache@v2
              with:
                  path: node_modules/.cache/nx
                  key: ${{ runner.os }}-nx-${{matrix.package}}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-nx-${{matrix.package}}-
                      ${{ runner.os }}-nx-

            - name: Setup version
              run: npm run postinstall

            - name: Initialise Pipeline Chat Status
              uses: fjogeleit/http-request-action@master
              continue-on-error: true
              with:
                  url: ${{ secrets.STATUS_URL }}
                  data: '{ "chat_url": "${{ secrets.CHAT_URL }}", "name": "${{ github.repository }}", "commit": "${{ github.sha }}", "pipeline_name": "${{ matrix.package }}", "branch": "${{ github.ref }}", "status": "processing", "url": "https://github.com/${{ github.repository }}/runs/${{ github.run_id }}" }'

            - name: Build affected applications
              run: |
                  npx nx build ${{ matrix.package }} --verbose --configuration=${{ env.configuration }}

            - name: Deploy the application(${{ matrix.package }})
              uses: MrYuion/gha-publish-to-git@v1.1
              continue-on-error: true
              with:
                  branch: build/${{ env.deploy_branch }}
                  source_folder: dist/apps/${{ matrix.package }}
                  commit_message: >
                      build(${{ matrix.package }}): CI build from ${{ env.sha_short }}
                  github_pat: ${{ secrets.API_GITHUB_TOKEN }}

            - name: Update Pipeline Chat Status
              uses: fjogeleit/http-request-action@master
              continue-on-error: true
              with:
                  url: ${{ secrets.STATUS_URL }}
                  data: '{ "name": "${{ github.repository }}", "commit": "${{ github.sha }}", "pipeline_name": "${{ matrix.package }}", "branch": "${{ github.ref }}", "status": "${{ job.status }}", "url": "https://github.com/${{ github.repository }}/runs/${{ github.run_id }}" }'
              if: ${{ always() }}
